cscope 15 $HOME/workspace/ece344/os161/kern               0000425414
	@arch/mips/include/asmdefs.h

4 #i‚de‡
_MIPS_ASMDEFS_H_


5 
	#_MIPS_ASMDEFS_H_


	)

10 
	#z0
 
$0


	)

11 
	#AT
 
$1


	)

12 
	#v0
 
$2


	)

13 
	#v1
 
$3


	)

14 
	#a0
 
$4


	)

15 
	#a1
 
$5


	)

16 
	#a2
 
$6


	)

17 
	#a3
 
$7


	)

18 
	#t0
 
$8


	)

19 
	#t1
 
$9


	)

20 
	#t2
 
$10


	)

21 
	#t3
 
$11


	)

22 
	#t4
 
$12


	)

23 
	#t5
 
$13


	)

24 
	#t6
 
$14


	)

25 
	#t7
 
$15


	)

26 
	#s0
 
$16


	)

27 
	#s1
 
$17


	)

28 
	#s2
 
$18


	)

29 
	#s3
 
$19


	)

30 
	#s4
 
$20


	)

31 
	#s5
 
$21


	)

32 
	#s6
 
$22


	)

33 
	#s7
 
$23


	)

34 
	#t8
 
$24


	)

35 
	#t9
 
$25


	)

36 
	#k0
 
$26


	)

37 
	#k1
 
$27


	)

38 
	#gp
 
$28


	)

39 
	#•
 
$29


	)

40 
	#s8
 
$30


	)

41 
	#ø
 
$31


	)

44 
	#c0_ödex
 
$0


	)

45 
	#c0_øndom
 
$1


	)

46 
	#c0_íåylo
 
$2


	)

49 
	#c0_c⁄ãxt
 
$4


	)

52 
	#c0_vaddr
 
$8


	)

54 
	#c0_íåyhi
 
$10


	)

56 
	#c0_°©us
 
$12


	)

57 
	#c0_ˇu£
 
$13


	)

58 
	#c0_ïc
 
$14


	)

59 
	#c0_¥id
 
$15


	)

	@arch/mips/include/bus.h

1 #i‚de‡
_MIPS_BUS_H_


2 
	#_MIPS_BUS_H_


	)

11 
	~<machöe/vm.h
>

12 
	~<œmebus/œmebus.h
>

14 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

15 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

17 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

18 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

20 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

21 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

28 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

30 
mùs_œmebus_öãºu±
();

	@arch/mips/include/ktypes.h

1 #i‚de‡
_MIPS_KTYPES_H_


2 
	#_MIPS_KTYPES_H_


	)

9 
u_öt32_t
 
	t∑ddr_t
;

10 
u_öt32_t
 
	tvaddr_t
;

	@arch/mips/include/pcb.h

5 #i‚de‡
_MACHINE_PCB_H_


6 
	#_MACHINE_PCB_H_


	)

8 
	~<machöe/£tjmp.h
>

11 
	#STACK_SIZE
 4096

	)

14 
	#STACK_MASK
 0xfffff000

	)

17 
	#SAME_STACK
(
p1
,
p2
Ë((’1)&
STACK_MASK
)==(’2)&STACK_MASK))

	)

20 (*
	tpcb_Áu…func
)();

38 
	spcb
 {

39 
u_öt32_t
 
pcb_swôch°ack
;

40 
u_öt32_t
 
pcb_k°ack
;

41 
u_öt32_t
 
pcb_ööãºu±
;

43 
pcb_Áu…func
 
pcb_badÁu…func
;

44 
jmp_buf
 
pcb_c›yjmp
;

54 
	`md_öôpcb0
(
pcb
 *);

61 
	`md_öôpcb
(
pcb
 *, *
°ack
, *
d©a1
, 
d©a2
,

62 (*
func
)(*, ));

74 
	`md_u£rmode
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack±r
,

75 
vaddr_t
 
íåypoöt
);

83 
	`md_powîoff
();

84 
	`md_ªboŸ
();

85 
	`md_hÆt
();

86 
	`md_∑nic
();

93 
	`mùs_öãºu±
(
u_öt32_t
 
ˇu£_ªgi°î
);

96 
å≠‰ame
;

97 
	`mùs_sysˇŒ
(
å≠‰ame
 *
tf
);

100 
u_öt32_t
 
	`mùs_ømsize
();

	@arch/mips/include/setjmp.h

1 #i‚de‡
_MIPS_SETJMP_H_


2 
	#_MIPS_SETJMP_H_


	)

8 
	#__JB_REGS
 11

	)

11 
u_öt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@arch/mips/include/specialreg.h

1 #i‚de‡
_MIPS_SPECIALREG_H_


2 
	#_MIPS_SPECIALREG_H_


	)

7 
	#CST_IEc
 0x00000001

	)

8 
	#CST_KUc
 0x00000002

	)

9 
	#CST_IEp
 0x00000004

	)

10 
	#CST_KUp
 0x00000008

	)

11 
	#CST_IEo
 0x00000010

	)

12 
	#CST_KUo
 0x00000020

	)

13 
	#CST_MODEMASK
 0x0000003‡

	)

14 
	#CST_IRQMASK
 0x0000ff00

	)

15 
	#CST_BEV
 0x00400000

	)

20 
	#CCA_UTLB
 0x00000001

	)

21 
	#CCA_CODE
 0x0000003¯

	)

22 
	#CCA_IRQS
 0x0000ff00

	)

23 
	#CCA_COPN
 0x30000000

	)

24 
	#CCA_JD
 0x80000000

	)

26 
	#CCA_CODESHIFT
 2

	)

31 
	#CIN_P
 0x80000000

	)

32 
	#CIN_INDEX
 0x00003f00

	)

34 
	#CIN_INDEXSHIFT
 8

	)

	@arch/mips/include/spl.h

1 #i‚de‡
_MACHINE_SPL_H_


2 
	#_MACHINE_SPL_H_


	)

50 
cur•l
;

51 
ö_öãºu±
;

53 
•lhigh
();

54 
•l0
();

55 
•lx
();

57 
˝u_idÀ
();

58 
˝u_hÆt
();

64 
	#SPL_HIGH
 15

	)

	@arch/mips/include/switchframe.h

1 #i‚de‡
_MIPS_SWITCHFRAME_H_


2 
	#_MIPS_SWITCHFRAME_H_


	)

10 
	sswôch‰ame
 {

11 
u_öt32_t
 
	msf_s0
;

12 
u_öt32_t
 
	msf_s1
;

13 
u_öt32_t
 
	msf_s2
;

14 
u_öt32_t
 
	msf_s3
;

15 
u_öt32_t
 
	msf_s4
;

16 
u_öt32_t
 
	msf_s5
;

17 
u_öt32_t
 
	msf_s6
;

18 
u_öt32_t
 
	msf_s7
;

19 
u_öt32_t
 
	msf_s8
;

20 
u_öt32_t
 
	msf_gp
;

21 
u_öt32_t
 
	msf_ø
;

	@arch/mips/include/tlb.h

1 #i‚de‡
_MACHINE_TLB_H_


2 
	#_MACHINE_TLB_H_


	)

29 
TLB_R™dom
(
u_öt32_t
 
íåyhi
, u_öt32_à
íåylo
);

30 
TLB_Wrôe
(
u_öt32_t
 
íåyhi
, u_öt32_à
íåylo
, u_öt32_à
ödex
);

31 
TLB_Ród
(
u_öt32_t
 *
íåyhi
, u_öt32_à*
íåylo
, u_öt32_à
ödex
);

32 
TLB_Probe
(
u_öt32_t
 
íåyhi
, u_öt32_à
íåylo
);

51 
	#TLBHI_VPAGE
 0xfffff000

	)

55 
	#TLBLO_PPAGE
 0xfffff000

	)

56 
	#TLBLO_NOCACHE
 0x00000800

	)

57 
	#TLBLO_DIRTY
 0x00000400

	)

58 
	#TLBLO_VALID
 0x00000200

	)

59 
	#PTE_LOCK
 0x00000100

	)

72 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

73 
	#TLBLO_INVALID
(Ë(0)

	)

79 
	#NUM_TLB
 64

	)

	@arch/mips/include/trapframe.h

1 #i‚de‡
_MIPS_TRAPFRAME_H_


2 
	#_MIPS_TRAPFRAME_H_


	)

11 
	så≠‰ame
 {

12 
u_öt32_t
 
	mtf_vaddr
;

13 
u_öt32_t
 
	mtf_°©us
;

14 
u_öt32_t
 
	mtf_ˇu£
;

15 
u_öt32_t
 
	mtf_lo
;

16 
u_öt32_t
 
	mtf_hi
;

17 
u_öt32_t
 
	mtf_ø
;

18 
u_öt32_t
 
	mtf_©
;

19 
u_öt32_t
 
	mtf_v0
;

20 
u_öt32_t
 
	mtf_v1
;

21 
u_öt32_t
 
	mtf_a0
;

22 
u_öt32_t
 
	mtf_a1
;

23 
u_öt32_t
 
	mtf_a2
;

24 
u_öt32_t
 
	mtf_a3
;

25 
u_öt32_t
 
	mtf_t0
;

26 
u_öt32_t
 
	mtf_t1
;

27 
u_öt32_t
 
	mtf_t2
;

28 
u_öt32_t
 
	mtf_t3
;

29 
u_öt32_t
 
	mtf_t4
;

30 
u_öt32_t
 
	mtf_t5
;

31 
u_öt32_t
 
	mtf_t6
;

32 
u_öt32_t
 
	mtf_t7
;

33 
u_öt32_t
 
	mtf_s0
;

34 
u_öt32_t
 
	mtf_s1
;

35 
u_öt32_t
 
	mtf_s2
;

36 
u_öt32_t
 
	mtf_s3
;

37 
u_öt32_t
 
	mtf_s4
;

38 
u_öt32_t
 
	mtf_s5
;

39 
u_öt32_t
 
	mtf_s6
;

40 
u_öt32_t
 
	mtf_s7
;

41 
u_öt32_t
 
	mtf_t8
;

42 
u_öt32_t
 
	mtf_t9
;

43 
u_öt32_t
 
	mtf_k0
;

44 
u_öt32_t
 
	mtf_k1
;

45 
u_öt32_t
 
	mtf_gp
;

46 
u_öt32_t
 
	mtf_•
;

47 
u_öt32_t
 
	mtf_s8
;

48 
u_öt32_t
 
	mtf_ïc
;

55 
	#EX_IRQ
 0

	)

56 
	#EX_MOD
 1

	)

57 
	#EX_TLBL
 2

	)

58 
	#EX_TLBS
 3

	)

59 
	#EX_ADEL
 4

	)

60 
	#EX_ADES
 5

	)

61 
	#EX_IBE
 6

	)

62 
	#EX_DBE
 7

	)

63 
	#EX_SYS
 8

	)

64 
	#EX_BP
 9

	)

65 
	#EX_RI
 10

	)

66 
	#EX_CPU
 11

	)

67 
	#EX_OVF
 12

	)

75 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

76 
md_f‹kíåy
(
å≠‰ame
 *
tf
);

	@arch/mips/include/types.h

1 #i‚de‡
_MIPS_TYPES_H_


2 
	#_MIPS_TYPES_H_


	)

21 
	töt8_t
;

22 
	töt16_t
;

23 
	töt32_t
;

24 
	töt64_t
;

26 
	tu_öt8_t
;

27 
	tu_öt16_t
;

28 
	tu_öt32_t
;

29 
	tu_öt64_t
;

39 
	tsize_t
;

41 
	tsize_t
;

44 
	töçå_t
;

45 
	tuöçå_t
;

51 
	#CHAR_BIT
 8

	)

57 #unde‡
NULL


58 
	#NULL
 ((*)0)

	)

65 #unde‡
_LITTLE_ENDIAN


66 
	#_BIG_ENDIAN


	)

	@arch/mips/include/vm.h

1 #i‚de‡
_MIPS_VM_H_


2 
	#_MIPS_VM_H_


	)

7 
	#PAGE_SIZE
 4096

	)

8 
	#PAGE_FRAME
 0xfffff000

	)

9 
	#SWAP_FRAME
 0xfff00000

	)

10 
	#PT_MASTER
 0xffc00000

	)

11 
	#PT_SECONDARY
 0x003ff000

	)

21 
	#MIPS_KUSEG
 0x00000000

	)

22 
	#MIPS_KSEG0
 0x80000000

	)

23 
	#MIPS_KSEG1
 0xa0000000

	)

24 
	#MIPS_KSEG2
 0xc0000000

	)

44 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

45 
	#KVADDR_TO_PADDR
(
vaddr
Ë((vaddr)-
MIPS_KSEG0
)

	)

51 
	#USERTOP
 
MIPS_KSEG0


	)

61 
	#USERSTACK
 
USERTOP


	)

78 
	~<addr•a˚.h
>

81 
øm_boŸ°øp
();

82 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

87 
∑ddr_t
 
øm_Ælocmem
(
≈ages
, 
°©us
);

88 
∑ddr_t
 
as_øm_Ælocmem
(
≈ages
, 
°©us
, 
addr•a˚
 *
as
);

90 
øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
);

95 
	#EM_MACHINE
 
EM_MIPS


	)

	@arch/mips/mips/cache_mips1.S

1 
	~<machöe/asmdefs.h
>

13 .
	gãxt


14 .
£t
 
	gn‹e‹dî


16 .
globl
 
	gmùs_Êushiˇche


17 .
ty≥
 
	gmùs_Êushiˇche
,@
	gfun˘i⁄


18 .
ít
 
mùs_Êushiˇche


19 
	gmùs_Êushiˇche
:

20 
j
 
ø


21 
n›


22 .
íd
 
mùs_Êushiˇche


	@arch/mips/mips/exception.S

5 
	~<machöe/asmdefs.h
>

6 
	~<machöe/•ecüÃeg.h
>

12 .
£t
 
	gnﬂt


13 .
£t
 
n‹e‹dî


26 .
	gãxt


27 .
globl
 
	guéb_ex˚±i⁄


28 .
ty≥
 
	guéb_ex˚±i⁄
,@
	gfun˘i⁄


29 .
ít
 
uéb_ex˚±i⁄


30 
	guéb_ex˚±i⁄
:

31 
move
 
k1
, 
•


32 
mfc0
 
	gk0
, 
c0_°©us


33 
™di
 
	gk0
, k0, 
CST_KUp


34 
beq
 
	gk0
, 
	g$0
, 1f

35 
n›


38 
œ
 
	gk0
, 
curk°ack


39 
lw
 
	g•
, 0(
	gk0
)

40 
	gn›


43 
mfc0
 
k0
, 
c0_ˇu£


44 
‹i
 
	gk0
, k0, 1

45 
j
 
comm⁄_ex˚±i⁄


46 
	gn›


47 .
globl
 
uéb_ex˚±i⁄_íd


48 
	guéb_ex˚±i⁄_íd
:

49 .
íd
 
uéb_ex˚±i⁄


60 .
ãxt


61 .
globl
 
ex˚±i⁄


62 .
ty≥
 
ex˚±i⁄
,@
	gfun˘i⁄


63 .
ít
 
ex˚±i⁄


64 
	gex˚±i⁄
:

65 
move
 
k1
, 
•


66 
mfc0
 
	gk0
, 
c0_°©us


67 
™di
 
	gk0
, k0, 
CST_KUp


68 
beq
 
	gk0
, 
	g$0
, 1f

69 
n›


72 
œ
 
	gk0
, 
curk°ack


73 
lw
 
	g•
, 0(
	gk0
)

74 
	gn›


77 
mfc0
 
k0
, 
c0_ˇu£


78 
j
 
comm⁄_ex˚±i⁄


79 
	gn›


81 .
globl
 
ex˚±i⁄_íd


82 
	gex˚±i⁄_íd
:

83 .
íd
 
ex˚±i⁄


86 
n›


95 .
ãxt


96 .
ty≥
 
comm⁄_ex˚±i⁄
,@
	gfun˘i⁄


97 .
ít
 
comm⁄_ex˚±i⁄


98 
	gcomm⁄_ex˚±i⁄
:

113 
addi
 
•
, 
	g•
, -164

141 
sw
 
	gø
, 160(
	g•
)

142 
sw
 
	gs8
, 156(
	g•
)

143 
sw
 
	g•
, 152(sp)

144 
sw
 
	ggp
, 148(
	g•
)

145 
sw
 
	gk1
, 144(
	g•
)

146 
sw
 
	gk0
, 140(
	g•
)

148 
sw
 
	gk1
, 152(
	g•
)

149 
n›


151 
mfc0
 
	gk1
, 
c0_ïc


152 
sw
 
	gk1
, 160(
	g•
)

154 
sw
 
	gt9
, 136(
	g•
)

155 
sw
 
	gt8
, 132(
	g•
)

156 
sw
 
	gs7
, 128(
	g•
)

157 
sw
 
	gs6
, 124(
	g•
)

158 
sw
 
	gs5
, 120(
	g•
)

159 
sw
 
	gs4
, 116(
	g•
)

160 
sw
 
	gs3
, 112(
	g•
)

161 
sw
 
	gs2
, 108(
	g•
)

162 
sw
 
	gs1
, 104(
	g•
)

163 
sw
 
	gs0
, 100(
	g•
)

164 
sw
 
	gt7
, 96(
	g•
)

165 
sw
 
	gt6
, 92(
	g•
)

166 
sw
 
	gt5
, 88(
	g•
)

167 
sw
 
	gt4
, 84(
	g•
)

168 
sw
 
	gt3
, 80(
	g•
)

169 
sw
 
	gt2
, 76(
	g•
)

170 
sw
 
	gt1
, 72(
	g•
)

171 
sw
 
	gt0
, 68(
	g•
)

172 
sw
 
	ga3
, 64(
	g•
)

173 
sw
 
	ga2
, 60(
	g•
)

174 
sw
 
	ga1
, 56(
	g•
)

175 
sw
 
	ga0
, 52(
	g•
)

176 
sw
 
	gv1
, 48(
	g•
)

177 
sw
 
	gv0
, 44(
	g•
)

178 
sw
 
	gAT
, 40(
	g•
)

180 
sw
 
	gø
, 36(
	g•
)

185 
mfhi
 
t0


186 
mÊo
 
t1


187 
sw
 
	gt0
, 32(
	g•
)

188 
sw
 
	gt1
, 28(
	g•
)

194 
sw
 
	gk0
, 24(
	g•
)

195 
mfc0
 
	gt1
, 
c0_°©us


196 
sw
 
	gt1
, 20(
	g•
)

197 
mfc0
 
	gt2
, 
c0_vaddr


198 
sw
 
	gt2
, 16(
	g•
)

203 
sw
 
	g$0
, 12(
	g•
)

209 
addiu
 
	ga0
, 
	g•
, 16

210 
jÆ
 
mùs_å≠


211 
n›


214 
n›


220 
	gex˚±i⁄_ªtu∫
:

223 
lw
 
t0
, 20(
	g•
)

224 
n›


225 
mtc0
 
	gt0
, 
c0_°©us


229 
lw
 
	gt1
, 28(
	g•
)

230 
lw
 
	gt0
, 32(
	g•
)

231 
méo
 
t1


232 
mthi
 
t0


235 
lw
 
	gø
, 36(
	g•
)

237 
lw
 
	gAT
, 40(
	g•
)

238 
lw
 
	gv0
, 44(
	g•
)

239 
lw
 
	gv1
, 48(
	g•
)

240 
lw
 
	ga0
, 52(
	g•
)

241 
lw
 
	ga1
, 56(
	g•
)

242 
lw
 
	ga2
, 60(
	g•
)

243 
lw
 
	ga3
, 64(
	g•
)

244 
lw
 
	gt0
, 68(
	g•
)

245 
lw
 
	gt1
, 72(
	g•
)

246 
lw
 
	gt2
, 76(
	g•
)

247 
lw
 
	gt3
, 80(
	g•
)

248 
lw
 
	gt4
, 84(
	g•
)

249 
lw
 
	gt5
, 88(
	g•
)

250 
lw
 
	gt6
, 92(
	g•
)

251 
lw
 
	gt7
, 96(
	g•
)

252 
lw
 
	gs0
, 100(
	g•
)

253 
lw
 
	gs1
, 104(
	g•
)

254 
lw
 
	gs2
, 108(
	g•
)

255 
lw
 
	gs3
, 112(
	g•
)

256 
lw
 
	gs4
, 116(
	g•
)

257 
lw
 
	gs5
, 120(
	g•
)

258 
lw
 
	gs6
, 124(
	g•
)

259 
lw
 
	gs7
, 128(
	g•
)

260 
lw
 
	gt8
, 132(
	g•
)

261 
lw
 
	gt9
, 136(
	g•
)

266 
lw
 
	ggp
, 148(
	g•
)

268 
lw
 
	gs8
, 156(
	g•
)

269 
lw
 
	gk0
, 160(
	g•
)

271 
lw
 
	g•
, 152(sp)

274 
jr
 
k0


275 
	gr„


276 .
íd
 
comm⁄_ex˚±i⁄


287 .
	gãxt


288 .
globl
 
	gasm_u£rmode


289 .
ty≥
 
	gasm_u£rmode
,@
	gfun˘i⁄


290 .
ít
 
asm_u£rmode


291 
	gasm_u£rmode
:

303 
j
 
ex˚±i⁄_ªtu∫


304 
addiu
 
•
, 
	ga0
, -16

305 .
íd
 
	gasm_u£rmode


	@arch/mips/mips/interrupt.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/bus.h
>

4 
	~<machöe/•l.h
>

5 
	~<machöe/pcb.h
>

8 
	gö_öãºu±
;

15 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

16 
	#LAMEBUS_NMI_BIT
 0x00000800

	)

19 
	$mùs_öãºu±
(
u_öt32_t
 
ˇu£
)

21 
ﬁd_ö
 = 
ö_öãºu±
;

22 
ö_öãºu±
 = 1;

25 
	`as£π
(
cur•l
>0);

27 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

28 
	`mùs_œmebus_öãºu±
();

30 i‡(
ˇu£
 & 
LAMEBUS_NMI_BIT
) {

31 
	`∑nic
("Received NMI\n");

34 
	`∑nic
("Unknow¿öãºu±; cau£Ñegi°î i†%08x\n", 
ˇu£
);

37 
ö_öãºu±
 = 
ﬁd_ö
;

38 
	}
}

	@arch/mips/mips/lamebus_mips.c

1 
	~<ty≥s.h
>

2 
	~<kîn/uni°d.h
>

3 
	~<lib.h
>

4 
	~<synch.h
>

5 
	~<machöe/•l.h
>

6 
	~<machöe/pcb.h
>

7 
	~<dev.h
>

8 
	~<machöe/bus.h
>

9 
	~<œmebus/œmebus.h
>

10 
	~"autoc⁄f.h
"

13 
œmebus_so·c
 *
	gœmebus
;

16 
	$machdï_dev_boŸ°øp
()

19 
	`as£π
(
cur•l
>0);

22 
œmebus
 = 
	`œmebus_öô
();

27 
	`k¥ötf
("lamebus0 (system main bus)\n");

34 
	`•l0
();

40 
	`autoc⁄f_œmebus
(
œmebus
, 0);

41 
	}
}

49 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
u_öt32_t
 
off£t
)

51 
u_öt32_t
 
addªss
;

53 ()
bus
;

55 
	`as£π
(
¶Ÿ
>=0 && slŸ<
LB_NSLOTS
);

57 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

58  (*)
addªss
;

59 
	}
}

64 
u_öt32_t


65 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
u_öt32_t
 
off£t
)

67 
u_öt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

69  *
±r
;

70 
	}
}

76 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

77 
u_öt32_t
 
off£t
, u_öt32_à
vÆ
)

79 
u_öt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

81 *
±r
 = 
vÆ
;

82 
	}
}

89 
	$md_powîoff
()

97 
	`œmebus_powîoff
(
œmebus
);

98 
	}
}

104 
	$md_ªboŸ
()

113 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

114 
	`md_powîoff
();

115 
	}
}

123 
	$md_hÆt
()

125 
	`˝u_hÆt
();

126 
	}
}

135 
	$md_∑nic
()

137 
	`md_powîoff
();

138 
	}
}

144 
u_öt32_t


145 
	$mùs_ømsize
()

147  
	`œmebus_ømsize
();

148 
	}
}

154 
	$mùs_œmebus_öãºu±
()

156 
	`œmebus_öãºu±
(
œmebus
);

157 
	}
}

	@arch/mips/mips/pcb.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/pcb.h
>

4 
	~<machöe/•l.h
>

5 
	~<machöe/swôch‰ame.h
>

6 
	~<thªad.h
>

9 
mùs_swôch
(
pcb
 *
ﬁd
, pcb *
nu
);

12 
mùs_thªad°¨t
( );

14 
u_öt32_t
 
	gcurk°ack
;

29 
	$md_öôpcb0
(
pcb
 *pcb)

31 
pcb
->
pcb_swôch°ack
 = 0;

32 
pcb
->
pcb_k°ack
 = 
curk°ack
;

33 
pcb
->
pcb_ööãºu±
 = 0;

35 
pcb
->
pcb_badÁu…func
 = 
NULL
;

36 
	}
}

52 
md_öôpcb
(
pcb
 *pcb, *
°ack
,

53 *
d©a1
, 
d©a2
,

54 (*
func
)(*, ))

60 
u_öt32_t
 
°ackt›
 = ((u_öt32_t)
°ack
Ë+ 
STACK_SIZE
;

65 
swôch‰ame
 *
sf
 = ((swôch‰amê*Ë
°ackt›
) - 1;

75 
pcb
->
pcb_badÁu…func
 = 
NULL
;

76 
pcb
->
pcb_k°ack
 = 
°ackt›
;

77 
pcb
->
pcb_swôch°ack
 = (
u_öt32_t
Ë
sf
;

78 
pcb
->
pcb_ööãºu±
 = 0;

83 
	`bzîo
(
sf
, (*sf));

104 
sf
->
sf_s0
 = (
u_öt32_t
)
d©a1
;

105 
sf
->
sf_s1
 = (
u_öt32_t
)
d©a2
;

106 
sf
->
sf_s2
 = (
u_öt32_t
)
func
;

107 
sf
->
sf_ø
 = (
u_öt32_t
)
mùs_thªad°¨t
;

108 
	}
}

118 
	$md_swôch
(
pcb
 *
ﬁd
, pcb *
nu
)

120 i‡(
ﬁd
==
nu
) {

129 
ﬁd
->
pcb_k°ack
 = 
curk°ack
;

130 
ﬁd
->
pcb_ööãºu±
 = 
ö_öãºu±
;

132 
curk°ack
 = 
nu
->
pcb_k°ack
;

133 
ö_öãºu±
 = 
nu
->
pcb_ööãºu±
;

135 
	`mùs_swôch
(
ﬁd
, 
nu
);

142 
	}
}

	@arch/mips/mips/ram.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<vm.h
>

4 
	~<addr•a˚.h
>

5 
	~<machöe/pcb.h
>

6 
	~<addr•a˚.h
>

7 
	~<vm_hñ≥r.h
>

9 
	#RAMSTEALMEM
 0

	)

10 
	#RAMDB
 0

	)

11 
	#EVICTDB
 0

	)

13 
u_öt32_t
 
	gfú°‰ì
;

15 
u_öt32_t
 
	gfú°∑ddr
;

16 
u_öt32_t
 
	gœ°∑ddr
;

18 
	$c‹em≠_boŸ°øp
() {

19 
øm_≈ages
 = (
œ°∑ddr
 - 
fú°∑ddr
)/
PAGE_SIZE
;

24 
øm_≈ages
 -- ;

25 
	`k¥ötf
("sizêo‡±r: %d\n", (
addr•a˚
 *));

26 
size
 = (Ë+ (
addr•a˚
 *Ë+ (
vaddr_t
);

32 
c‹em≠_íåy
 = (*)
	`kmÆloc_dumb
(
øm_≈ages
*
size
);

33 
cm≠_as_íåy
 = (
addr•a˚
 **)(
c‹em≠_íåy
 + 
øm_≈ages
);

34 
cm≠_±e_íåy
 = (
vaddr_t
 **)(
cm≠_as_íåy
 + 
øm_≈ages
);

36 
fú°∑ddr_öô
 = 
fú°∑ddr
;

38 
size_t
 
i
;

39 
	`k¥ötf
("øm_≈ages: %u\n", 
øm_≈ages
);

40 
i
 = 0; i < 
øm_≈ages
; i++) {

44 *(
c‹em≠_íåy
+
i
Ë
PPAGE_AVAILABLE
;

48 *(
cm≠_as_íåy
+
i
Ë
NULL
;

49 *(
cm≠_±e_íåy
+
i
Ë
NULL
;

52 
LRU_±r
 = 0;

53 #i‡
RAMDB


54 
	`k¥ötf
("cm≠ÅŸÆ size: %d\n", 
øm_≈ages
*
size
);

55 
	`k¥ötf
("c‹em≠_íåy: 0x%08x\n", 
c‹em≠_íåy
);

56 
	`k¥ötf
("cm≠_as_íåy: 0x%08x\n", 
cm≠_as_íåy
);

57 
	`k¥ötf
("fú°∑ddr_öô: 0x%08x\n", 
fú°∑ddr_öô
);

58 
	`k¥ötf
("fú°∑ddr: 0x%08x\n", 
fú°∑ddr
);

61 
	}
}

68 
	$øm_boŸ°øp
()

70 
u_öt32_t
 
ømsize
;

73 
ømsize
 = 
	`mùs_ømsize
();

82 i‡(
ømsize
 > 508*1024*1024) {

83 
ømsize
 = 508*1024*1024;

86 
œ°∑ddr
 = 
ømsize
;

92 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

94 
	`k¥ötf
("Cpu is MIPSÑ2000/r3000\n");

95 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

96 (
œ°∑ddr
-
fú°∑ddr
)/1024);

98 
	`c‹em≠_boŸ°øp
();

99 
	}
}

117 
∑ddr_t


118 
	$øm_°ólmem
(
≈ages
)

120 
u_öt32_t
 
size
 = 
≈ages
 * 
PAGE_SIZE
;

121 
u_öt32_t
 
∑ddr
;

123 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

127 
∑ddr
 = 
fú°∑ddr
;

128 
fú°∑ddr
 +
size
;

130  
∑ddr
;

131 
	}
}

138 
	$föd_c⁄tiguous_∑ges
(
≈ages
) {

139 
size_t
 
i
;

140 
i
 = 0; i < 
øm_≈ages
; i++) {

141 i‡(*(
c‹em≠_íåy
+
i
Ë=
PPAGE_AVAILABLE
) {

142 
size_t
 
j
;

143 
cou¡
 = 0;

144 
j
 = 
i
; j < 
øm_≈ages
; j++) {

145 i‡(*(
c‹em≠_íåy
+
j
Ë=
PPAGE_AVAILABLE
){

146 
cou¡
 ++ ;

151 
j
 = 
øm_≈ages
;

154 i‡(
cou¡
 >
≈ages
) {

159  ()
i
;

164 
	}
}

172 
∑ddr_t
 
	$øm_Ælocmem
(
≈ages
, 
°©us
) {

182 
	`as£π
(
cur•l
 > 0);

183 
∑ge_num
 = 
	`föd_c⁄tiguous_∑ges
(
≈ages
);

184 i‡(
∑ge_num
 < 0 && 
≈ages
 > 1) {

193 
	`k¥ötf
("******Ñam_Ælocmem (ö kmÆloc), faûedÅÿÆlo¯%luÖages\n", 
≈ages
);

195 } i‡(
∑ge_num
 < 0) {

197 
vi˘im
 = 
	`föd_vi˘im
();

198 
	`as£π
(
vi˘im
 >= 0);

199 #i‡
EVICTDB


200 
	`k¥ötf
("----- föd vi˘im %d\n", 
vi˘im
);

202 
∑ddr_t
 
pba£
 = 
	`evi˘i⁄
(
vi˘im
, 
PPAGE_K_FIXED
, 
NULL
);

203 i‡(
pba£
 == 0){

204 
	`k¥ötf
("****Éviction failure\n");

207 #i‡
EVICTDB


208 
	`k¥ötf
("-----Öba£ 0x%08x\n", 
pba£
);

210 
	`as£π
(
pba£
 > 
fú°∑ddr_öô
);

211 
∑ge_num
 = (
pba£
 - 
fú°∑ddr_öô
Ë/ 
PAGE_SIZE
;

214 
size_t
 
k
;

215 
k
 = 0; k < 
≈ages
; k++) {

216 
	`as£π
(
°©us
 =
PPAGE_K_FIXED
);

217 *(
c‹em≠_íåy
 + 
k
 + 
∑ge_num
Ë
°©us
;

218 *(
c‹em≠_íåy
 + 
k
 + 
∑ge_num
Ë+10 * (
≈ages
 - k);

220 #i‡
RAMDB


221 
	`k¥ötf
("n‹mÆ:áŒo˝age@0x%08x\n", 
fú°∑ddr_öô
 + 
∑ge_num
 * 
PAGE_SIZE
);

223  
fú°∑ddr_öô
 + 
∑ge_num
 * 
PAGE_SIZE
;

224 
	}
}

232 
∑ddr_t
 
	$as_øm_Ælocmem
(
≈ages
, 
°©us
, 
addr•a˚
 *
as
) {

236 
∑ge_num
 = 
	`föd_c⁄tiguous_∑ges
(
≈ages
);

237 i‡(
∑ge_num
 < 0 && 
≈ages
 > 1) {

241 
	`k¥ötf
("******Ñam_Ælocmem (ö u£∏mÆloc), faûedÅÿÆlo¯%luÖages\n", 
≈ages
);

243 } i‡(
∑ge_num
 < 0) {

245 
vi˘im
 = 
	`föd_vi˘im
();

246 
	`as£π
(
vi˘im
 >= 0);

248 
∑ddr_t
 
pba£
 = 
	`evi˘i⁄
(
vi˘im
, 
°©us
, 
as
);

249 i‡(
pba£
 == 0) {

250 
	`k¥ötf
("****Éviction failure\n");

253 
	`as£π
(
pba£
 > 
fú°∑ddr_öô
);

254 
∑ge_num
 = (
pba£
 - 
fú°∑ddr_öô
Ë/ 
PAGE_SIZE
;

256 
size_t
 
k
;

257 
k
 = 0; k < 
≈ages
; k++) {

258 *(
c‹em≠_íåy
 + 
k
 + 
∑ge_num
Ë
°©us
;

259 *(
c‹em≠_íåy
 + 
k
 + 
∑ge_num
Ë+10 * (
≈ages
 - k);

260 *(
cm≠_as_íåy
 + 
k
 + 
∑ge_num
Ë
as
;

262  
fú°∑ddr_öô
 + 
∑ge_num
 * 
PAGE_SIZE
;

263 
	}
}

273 
	$øm_gësize
(
u_öt32_t
 *
lo
, u_öt32_à*
hi
)

275 *
lo
 = 
fú°∑ddr
;

276 *
hi
 = 
œ°∑ddr
;

277 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

278 
	}
}

286 
	$øm_sim∂y_gësize
(
u_öt32_t
 *
lo
, u_öt32_à*
hi
)

288 *
lo
 = 
fú°∑ddr
;

289 *
hi
 = 
œ°∑ddr
;

290 
	}
}

	@arch/mips/mips/spl.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<machöe/•ecüÃeg.h
>

18 
	#gë_°©us
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

19 
	#£t_°©us
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

22 
ölöe


24 
	$öãºu±s_⁄
()

26 
u_öt32_t
 
x
;

27 
	`gë_°©us
(
x
);

28 
x
 |
CST_IEc
;

29 
	`£t_°©us
(
x
);

30 
	}
}

33 
ölöe


35 
	$öãºu±s_off
()

37 
u_öt32_t
 
x
;

38 
	`gë_°©us
(
x
);

39 
x
 &~(
u_öt32_t
Ë
CST_IEc
;

40 
	`£t_°©us
(
x
);

41 
	}
}

44 
ölöe


46 
	$öãºu±s_⁄off
()

48 
u_öt32_t
 
x
, 
x⁄
, 
xoff
;

49 
	`gë_°©us
(
x
);

50 
x⁄
 = 
x
 | 
CST_IEc
;

51 
xoff
 = 
x
 & ~(
u_öt32_t
Ë
CST_IEc
;

52 
	`£t_°©us
(
x⁄
);

53 
	`£t_°©us
(
xoff
);

54 
	}
}

64 
	gcur•l
 = 
SPL_HIGH
;

68 
	$•lx
(
√w•l
)

70 
ﬁd•l
;

97 i‡(
√w•l
>0) {

98 
	`öãºu±s_off
();

100 i‡(
√w•l
==0) {

101 
	`öãºu±s_⁄
();

104 
ﬁd•l
 = 
cur•l
;

105 
cur•l
 = 
√w•l
;

107  
ﬁd•l
;

108 
	}
}

112 
	$•lhigh
()

114  
	`•lx
(
SPL_HIGH
);

115 
	}
}

118 
	$•l0
()

120  
	`•lx
(0);

121 
	}
}

128 
	$˝u_idÀ
()

130 
	`as£π
(
cur•l
>0);

153 
__asm
 volatile(".long 0x42000020");

155 
	`öãºu±s_⁄off
();

156 
	}
}

162 
	$˝u_hÆt
()

168 
	`öãºu±s_off
();

171 
__asm
 volatile(".long 0x42000020");

173 
	}
}

	@arch/mips/mips/start.S

1 
	~<machöe/asmdefs.h
>

2 
	~<machöe/•ecüÃeg.h
>

4 .
£t
 
	gn‹e‹dî


6 .
	gãxt


7 .
globl
 
	g__°¨t


8 .
ty≥
 
	g__°¨t
,@
	gfun˘i⁄


9 .
ít
 
__°¨t


10 
	g__°¨t
:

22 .
‰ame
 
•
, 20, 
	g$0


23 .
	gmask
 0x80000000, -4

24 
addiu
 
	g•
, sp, -20

25 
sw
 
	gø
, 16(
	g•
)

59 
œ
 
	gs0
, 
_íd


61 
move
 
	ga1
, 
a0


62 
move
 
	ga0
, 
s0


63 
jÆ
 
°r˝y


64 
n›


66 
move
 
	ga0
, 
s0


67 
jÆ
 
°æí


68 
n›


70 
add
 
	gt0
, 
	gs0
, 
v0


71 
addi
 
	gt0
,Å0, 1

74 
addi
 
	gt0
,Å0, 4095

75 
li
 
	gt1
, 0xfffff000

76 
™d
 
	gt0
,Å0, 
t1


78 
addi
 
	gt0
,Å0, 4096

80 
move
 
	g•
, 
t0


81 
sw
 
	gt0
, 
curk°ack


83 
sw
 
	gt0
, 
fú°‰ì


96 
addiu
 
	g•
, sp, -20

97 
sw
 
	g$0
, 16(
	g•
)

103 
li
 
	ga0
, 0x80000000

104 
œ
 
	ga1
, 
uéb_ex˚±i⁄


105 
œ
 
	ga2
, 
uéb_ex˚±i⁄_íd


106 
sub
 
	ga2
,á2, 
a1


107 
jÆ
 
memmove


108 
n›


110 
li
 
	ga0
, 0x80000080

111 
œ
 
	ga1
, 
ex˚±i⁄


112 
œ
 
	ga2
, 
ex˚±i⁄_íd


113 
sub
 
	ga2
,á2, 
a1


114 
jÆ
 
memmove


115 
n›


121 
jÆ
 
mùs_Êushiˇche


122 
n›


127 
jÆ
 
TLB_Re£t


128 
n›


154 
li
 
	gt0
, 
CST_IRQMASK


155 
mtc0
 
	gt0
, 
c0_°©us


162 
jÆ
 
kmaö


163 
move
 
	ga0
, 
	gs0


171 
œ
 
a0
, 
∑nic°r


172 
jÆ
 
∑nic


173 
n›


174 
	gj
 1b

175 
	gn›


176 .
íd
 
	g__°¨t


178 .
rd©a


179 
	g∑nic°r
:

180 .
asciz
 "kmainÑeturned\n"

	@arch/mips/mips/switch.S

1 
	~<machöe/asmdefs.h
>

3 .
	gãxt


4 .
£t
 
	gn‹e‹dî


6 .
globl
 
	gmùs_swôch


7 .
ty≥
 
	gmùs_swôch
,@
	gfun˘i⁄


8 .
ít
 
mùs_swôch


9 
	gmùs_swôch
:

25 
addi
 
•
, 
	g•
, -44

28 
sw
 
	gø
, 40(
	g•
)

29 
sw
 
	ggp
, 36(
	g•
)

30 
sw
 
	gs8
, 32(
	g•
)

31 
sw
 
	gs7
, 28(
	g•
)

32 
sw
 
	gs6
, 24(
	g•
)

33 
sw
 
	gs5
, 20(
	g•
)

34 
sw
 
	gs4
, 16(
	g•
)

35 
sw
 
	gs3
, 12(
	g•
)

36 
sw
 
	gs2
, 8(
	g•
)

37 
sw
 
	gs1
, 4(
	g•
)

38 
sw
 
	gs0
, 0(
	g•
)

41 
sw
 
	g•
, 0(
	ga0
)

44 
lw
 
	g•
, 0(
	ga1
)

45 
n›


48 
lw
 
	gs0
, 0(
	g•
)

49 
lw
 
	gs1
, 4(
	g•
)

50 
lw
 
	gs2
, 8(
	g•
)

51 
lw
 
	gs3
, 12(
	g•
)

52 
lw
 
	gs4
, 16(
	g•
)

53 
lw
 
	gs5
, 20(
	g•
)

54 
lw
 
	gs6
, 24(
	g•
)

55 
lw
 
	gs7
, 28(
	g•
)

56 
lw
 
	gs8
, 32(
	g•
)

57 
lw
 
	ggp
, 36(
	g•
)

58 
lw
 
	gø
, 40(
	g•
)

59 
n›


62 
j
 
ø


63 
addi
 
	g•
, sp, 44

64 .
íd
 
	gmùs_swôch


	@arch/mips/mips/syscall.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<machöe/pcb.h
>

5 
	~<machöe/•l.h
>

6 
	~<machöe/å≠‰ame.h
>

7 
	~<kîn/ˇŒno.h
>

8 
	~<sysˇŒ.h
>

53 
	$mùs_sysˇŒ
(
å≠‰ame
 *
tf
)

56 
ˇŒno
;

57 
öt32_t
 
ªtvÆ
;

58 
îr
;

62 
	`as£π
(
cur•l
==0);

64 
ˇŒno
 = 
tf
->
tf_v0
;

75 
ªtvÆ
 = 0;

77 
ˇŒno
) {

78 
SYS_ªboŸ
:

79 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

81 
SYS_wrôe
:

87 
îr
 = 
	`sys_wrôe
(
tf
->
tf_a0
, (*)—f->
tf_a1
),Åf->
tf_a2
);

89 
SYS_ªad
:

91 
îr
 = 
	`sys_ªad
(
tf
->
tf_a0
, (*)—f->
tf_a1
),Åf->
tf_a2
, &
ªtvÆ
);

93 
SYS__exô
:

94 
	`sys__exô
(
tf
, &
ªtvÆ
,Åf->
tf_a0
);

96 
SYS_f‹k
:

97 
îr
 = 
	`sys_f‹k
(
tf
, &
ªtvÆ
);

99 
SYS_gëpid
:

100 
îr
 = 
	`sys_gëpid
(&
ªtvÆ
);

102 
SYS_waôpid
:

103 
îr
 = 
	`sys_waôpid
(
tf
->
tf_a0
,Åf, &
ªtvÆ
);

105 
SYS_execv
:

106 
îr
 = 
	`sys_execv
(
tf
->
tf_a0
,Åf->
tf_a1
, &
ªtvÆ
);

108 
SYS_sbrk
:

109 
îr
 = 
	`sys_sbrk
(
tf
->
tf_a0
, &
ªtvÆ
);

112 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

113 
îr
 = 
ENOSYS
;

118 i‡(
îr
) {

124 
tf
->
tf_v0
 = 
îr
;

125 
tf
->
tf_a3
 = 1;

129 
tf
->
tf_v0
 = 
ªtvÆ
;

130 
tf
->
tf_a3
 = 0;

138 
tf
->
tf_ïc
 += 4;

141 
	`as£π
(
cur•l
==0);

142 
	}
}

145 
	$md_f‹kíåy
(
å≠‰ame
 *
tf
)

154 ()
tf
;

155 
	}
}

	@arch/mips/mips/threadstart.S

1 
	~<machöe/asmdefs.h
>

3 .
	gãxt


4 .
£t
 
	gn‹e‹dî


6 .
globl
 
	gmùs_thªad°¨t


7 .
ty≥
 
	gmùs_thªad°¨t
,@
	gfun˘i⁄


8 .
ít
 
mùs_thªad°¨t


9 
	gmùs_thªad°¨t
:

26 
addiu
 
•
, 
	g•
, -16

28 
move
 
	gø
, 
$0


30 
move
 
	ga0
, 
s0


31 
move
 
	ga1
, 
s1


32 
j
 
mi_thªad°¨t


33 
move
 
	ga2
, 
	gs2


35 .
íd
 
	gmùs_thªad°¨t


	@arch/mips/mips/tlb_mips1.S

1 
	~<machöe/asmdefs.h
>

2 
	~<machöe/•ecüÃeg.h
>

4 .
	gãxt


5 .
£t
 
	gn‹e‹dî


11 .
globl
 
	gTLB_R™dom


12 .
ty≥
 
	gTLB_R™dom
,@
	gfun˘i⁄


13 .
ít
 
TLB_R™dom


14 
	gTLB_R™dom
:

15 
mtc0
 
a0
, 
c0_íåyhi


16 
mtc0
 
	ga1
, 
c0_íåylo


17 
ébwr


18 
j
 
ø


19 
	gn›


20 .
íd
 
	gTLB_R™dom


26 .
	gãxt


27 .
globl
 
	gTLB_Wrôe


28 .
ty≥
 
	gTLB_Wrôe
,@
	gfun˘i⁄


29 .
ít
 
TLB_Wrôe


30 
	gTLB_Wrôe
:

31 
mtc0
 
a0
, 
c0_íåyhi


32 
mtc0
 
	ga1
, 
c0_íåylo


33 
¶l
 
	gt0
, 
	ga2
, 
CIN_INDEXSHIFT


34 
mtc0
 
	gt0
, 
c0_ödex


35 
ébwi


36 
j
 
ø


37 
	gn›


38 .
íd
 
	gTLB_Wrôe


44 .
	gãxt


45 .
globl
 
	gTLB_Ród


46 .
ty≥
 
	gTLB_Ród
,@
	gfun˘i⁄


47 .
ít
 
TLB_Ród


48 
	gTLB_Ród
:

49 
¶l
 
t0
, 
	ga2
, 
CIN_INDEXSHIFT


50 
mtc0
 
	gt0
, 
c0_ödex


51 
ébr


52 
mfc0
 
	gt0
, 
c0_íåyhi


53 
mfc0
 
	gt1
, 
c0_íåylo


54 
sw
 
	gt0
, 0(
	ga0
)

55 
sw
 
	gt1
, 0(
	ga1
)

56 
j
 
ø


57 
	gn›


58 .
íd
 
	gTLB_Ród


64 .
	gãxt


65 .
globl
 
	gTLB_Probe


66 .
ty≥
 
	gTLB_Probe
,@
	gfun˘i⁄


67 .
ít
 
TLB_Probe


68 
	gTLB_Probe
:

69 
mtc0
 
a0
, 
c0_íåyhi


70 
mtc0
 
	ga1
, 
c0_íåylo


71 
ébp


72 
mfc0
 
	gt0
, 
c0_ödex


79 
bgez
 
	gt0
, 1f

80 
n›


81 
addi
 
	gv0
, 
	gz0
, -1

82 
j
 
ø


83 
	gn›


87 
™di
 
t1
, 
	gt0
, 
CIN_INDEX


88 
j
 
ø


89 
§a
 
	gv0
, 
	gt1
, 
	gCIN_INDEXSHIFT


90 .
íd
 
	gTLB_Probe


105 .
	gãxt


106 .
globl
 
	gTLB_Re£t


107 .
ty≥
 
	gTLB_Re£t
,@
	gfun˘i⁄


108 .
ít
 
TLB_Re£t


109 
	gTLB_Re£t
:

110 
li
 
t0
, 0

111 
li
 
	gt1
, 0x81000000

113 
mtc0
 
$0
, 
c0_íåylo


114 
mtc0
 
	gt1
, 
c0_íåyhi


115 
ébp


116 
mfc0
 
	gt2
, 
c0_ödex


117 
bgez
 
	gt2
, 1b

118 
addiu
 
	gt1
,Å1, 0x1000

119 
mtc0
 
	gt0
, 
c0_ödex


120 
addiu
 
	gt0
,Å0, 0x100

121 
b√
 
	gt0
, 0x4000, 1b

122 
ébwi


123 
j
 
ø


124 
	gn›


125 .
íd
 
	gTLB_Re£t


	@arch/mips/mips/trap.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/å≠‰ame.h
>

4 
	~<machöe/•ecüÃeg.h
>

5 
	~<machöe/pcb.h
>

6 
	~<machöe/•l.h
>

7 
	~<vm.h
>

8 
	~<thªad.h
>

9 
	~<cuπhªad.h
>

10 
	~<db-hñ≥r.h
>

12 
u_öt32_t
 
curk°ack
;

15 
asm_u£rmode
(
å≠‰ame
 *
tf
);

18 
	#NTRAPCODES
 13

	)

19 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

40 
	$kûl_cuπhªad
(
u_öt32_t
 
ïc
, 
code
, u_öt32_à
vaddr
)

42 
	`as£π
(
code
<
NTRAPCODES
);

44 
	`cmd_éb°©s
(1, 
NULL
);

45 
	`cmd_c‹em≠°©s
(1, 
NULL
);

47 
	`k¥ötf
("Fatal user modeÅrap %u (%s,Épc 0x%x, vaddr 0x%x)\n",

48 
code
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

54 
	`thªad_exô
();

56 
	`∑nic
("I don't know howÅo handleÅhis\n");

57 
	}
}

65 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

67 
u_öt32_t
 
code
, 
isuéb
, 
iskîn
;

68 
ßve•l
;

71 
	`as£π
((
å≠‰ame
)==(37*4));

74 
ßve•l
 = 
cur•l
;

83 
cur•l
 = 
SPL_HIGH
;

88 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

89 
isuéb
 = (
tf
->
tf_ˇu£
 & 
CCA_UTLB
);

90 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
)==0;

92 
	`as£π
(
code
<
NTRAPCODES
);

95 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

96 
	`as£π
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

97 
	`as£π
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack
+
STACK_SIZE
));

101 i‡(
code
 =
EX_IRQ
) {

102 
	`mùs_öãºu±
(
tf
->
tf_ˇu£
);

103 
d⁄e
;

111 
	`•lx
(
ßve•l
);

114 i‡(
code
 =
EX_SYS
) {

116 
	`as£π
(
cur•l
==0);

118 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

119 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

121 
	`mùs_sysˇŒ
(
tf
);

122 
d⁄e
;

130 
code
) {

131 
EX_MOD
:

132 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

133 
d⁄e
;

136 
EX_TLBL
:

137 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

139 
d⁄e
;

142 
EX_TLBS
:

143 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

144 
d⁄e
;

147 
EX_IBE
:

148 
EX_DBE
:

158 
	`cmd_éb°©s
(1, 
NULL
);

159 
	`cmd_c‹em≠°©s
(1, 
NULL
);

160 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

170 i‡(!
iskîn
) {

175 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

176 
d⁄e
;

200 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_pcb
.
pcb_badÁu…func
 != NULL) {

201 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_pcb
.
pcb_badÁu…func
;

202 
d⁄e
;

209 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

210 
å≠codíames
[
code
]);

211 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

212 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

214 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

216 
d⁄e
:

220 
	`•lhigh
();

228 
cur•l
 = 
ßve•l
;

239 
	`as£π
(
	`SAME_STACK
(
curk°ack
-1, (
vaddr_t
)
tf
));

240 
	}
}

258 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

268 
	`•lhigh
();

269 
cur•l
 = 0;

284 
	`as£π
(
	`SAME_STACK
(
curk°ack
-1, (
vaddr_t
)
tf
));

289 
	`asm_u£rmode
(
tf
);

290 
	}
}

299 
	$md_u£rmode
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack
, vaddr_à
íåy
)

301 
å≠‰ame
 
tf
;

303 
	`bzîo
(&
tf
, (tf));

305 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

306 
tf
.
tf_ïc
 = 
íåy
;

307 
tf
.
tf_a0
 = 
¨gc
;

308 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

309 
tf
.
tf_•
 = 
°ack
;

311 
	`mùs_u£rmode
(&
tf
);

312 
	}
}

	@asst1/catlock.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

19 
	~<ã°.h
>

20 
	~<thªad.h
>

33 
	#NFOODBOWLS
 2

	)

39 
	#NCATS
 6

	)

45 
	#NMICE
 2

	)

56 
	$lock_ót
(c⁄° *
who
, 
num
, 
bowl
, 
ôî©i⁄
)

58 
	`k¥ötf
("%s: %d sèπ†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

59 
bowl
, 
ôî©i⁄
);

60 
	`˛ock¶ìp
(1);

61 
	`k¥ötf
("%s: %dÉnd†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

62 
bowl
, 
ôî©i⁄
);

63 
	}
}

83 
	$ˇéock
(* 
unu£dpoöãr
,

84 
ˇäumbî
)

90 (Ë
unu£dpoöãr
;

91 (Ë
ˇäumbî
;

92 
	}
}

113 
	$mou£lock
(* 
unu£dpoöãr
,

114 
mou£numbî
)

120 (Ë
unu£dpoöãr
;

121 (Ë
mou£numbî
;

122 
	}
}

141 
	$ˇtmou£lock
(
«rgs
,

142 ** 
¨gs
)

144 
ödex
, 
îr‹
;

150 (Ë
«rgs
;

151 (Ë
¨gs
;

157 
ödex
 = 0; index < 
NCATS
; index++) {

159 
îr‹
 = 
	`thªad_f‹k
("catlockÅhread",

160 
NULL
,

161 
ödex
,

162 
ˇéock
,

163 
NULL


170 i‡(
îr‹
) {

172 
	`∑nic
("catlock:Åhread_fork failed: %s\n",

173 
	`°ªº‹
(
îr‹
)

182 
ödex
 = 0; index < 
NMICE
; index++) {

184 
îr‹
 = 
	`thªad_f‹k
("mouselockÅhread",

185 
NULL
,

186 
ödex
,

187 
mou£lock
,

188 
NULL


195 i‡(
îr‹
) {

197 
	`∑nic
("mouselock:Åhread_fork failed: %s\n",

198 
	`°ªº‹
(
îr‹
)

204 
	}
}

	@asst1/catsem.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

19 
	~<ã°.h
>

20 
	~<thªad.h
>

21 
	~<synch.h
>

22 
	~<scheduÀr.h
>

34 
	#NFOODBOWLS
 2

	)

40 
	#NCATS
 6

	)

46 
	#NMICE
 2

	)

52 
	#NEAT
 4

	)

54 c⁄° *
	g£m_«me
 = "cat_mice_mutex_sem";

55 c⁄° *
	gp_£m_«me
 = "print_mutex";

57 
	g•ecõs
;

59 
	gcou¡
;

60 
	gbowl°©us
[
NFOODBOWLS
];

61 
£m≠h‹e
 *
	gmuãx
;

62 
£m≠h‹e
 *
	gp_muãx
;

64 
	gˇtföishcou¡
;

65 
	gmou£föishcou¡
;

74 
	$öô_ˇt£m
() {

75 
i
;

76 
i
 = 0; i < 
NFOODBOWLS
; i++){

77 
bowl°©us
[
i
] = 0;

79 
•ecõs
 = -1;

80 
cou¡
 = 0;

81 
ˇtföishcou¡
 = 0;

82 
mou£föishcou¡
 = 0;

83 
muãx
 = 
	`£m_¸óã
(
£m_«me
, 1);

84 
p_muãx
 = 
	`£m_¸óã
(
p_£m_«me
, 1);

85 
	}
}

95 
	$£m_ót
(c⁄° *
who
, 
num
, 
bowl
, 
ôî©i⁄
)

97 
	`P
(
p_muãx
);

98 
	`k¥ötf
("%s: %d sèπ†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

99 
bowl
, 
ôî©i⁄
);

100 
	`V
(
p_muãx
);

102 
	`˛ock¶ìp
(1);

104 
	`P
(
p_muãx
);

105 
	`k¥ötf
("%s: %dÉnd†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

106 
bowl
, 
ôî©i⁄
);

107 
	`V
(
p_muãx
);

108 
	}
}

114 
	$gë_em±y_bowl
 () {

115 
i
;

116 
i
 = 0; i < 
NFOODBOWLS
; i++) {

117 i‡(
bowl°©us
[
i
] == 0) {

118 
bowl°©us
[
i
]=1;

119  (
i
+1);

123 
	}
}

128 
	$‰ì_bowl
 (
bowl_num
) {

129 
bowl°©us
[
bowl_num
-1] = 0;

130 
	}
}

149 
	$ˇt£m
(* 
unu£dpoöãr
,

150 
ˇäumbî
)

152 ()
unu£dpoöãr
;

153 
i
 = 0;

154 
bowl
;

155 
i
 < 
NEAT
) {

156 
	`P
(
muãx
);

157 i‡((
•ecõs
 =1 || s≥cõ†=-1Ë&& (
cou¡
 < 
NFOODBOWLS
)) {

158 
•ecõs
 = 1;

159 
cou¡
 ++ ;

160 
bowl
 = 
	`gë_em±y_bowl
();

162 
	`V
(
muãx
);

165 
	`V
(
muãx
);

171 
	`£m_ót
 ("ˇt", ()
ˇäumbî
, 
bowl
, 
i
);

173 
	`P
(
muãx
);

174 
cou¡
 -- ;

175 i‡(
cou¡
 == 0) {

176 
•ecõs
 = -1;

178 
	`‰ì_bowl
 (
bowl
);

179 
	`V
(
muãx
);

180 
i
++;

182 
	`P
(
muãx
);

183 
ˇtföishcou¡
 ++ ;

184 i‡(
ˇtföishcou¡
 == 6) {

185 
	`k¥ötf
("CAT FINISH!\n");

187 
	`V
(
muãx
);

191 
	}
}

212 
	$mou££m
(* 
unu£dpoöãr
,

213 
mou£numbî
)

215 ()
unu£dpoöãr
;

216 
i
 = 0;

217 
bowl
;

218 
i
 < 
NEAT
) {

219 
	`P
(
muãx
);

221 i‡((
•ecõs
 =0 || s≥cõ†=-1Ë&& 
cou¡
 < 
NFOODBOWLS
) {

222 
•ecõs
 = 0;

223 
cou¡
 ++ ;

224 
bowl
 = 
	`gë_em±y_bowl
();

226 
	`V
(
muãx
);

229 
	`V
(
muãx
);

235 
	`£m_ót
 ("mou£", ()
mou£numbî
, 
bowl
, 
i
);

237 
	`P
(
muãx
);

238 
cou¡
 -- ;

239 i‡(
cou¡
 == 0) {

240 
•ecõs
 = -1;

242 
	`‰ì_bowl
 (
bowl
);

243 
	`V
(
muãx
);

244 
i
 ++ ;

247 
	`P
(
muãx
);

248 
mou£föishcou¡
 ++ ;

249 i‡(
mou£föishcou¡
 == 2) {

250 
	`k¥ötf
("MOUSE FINISH!\n");

252 
	`V
(
muãx
);

253 
	}
}

272 
	$ˇtmou££m
(
«rgs
,

273 ** 
¨gs
)

275 
ödex
, 
îr‹
;

281 (Ë
«rgs
;

282 (Ë
¨gs
;

283 c⁄° *
tˇt
[6] = {"c0", "c1", "c2", "c3", "c4", "c5"};

284 c⁄° *
tmou£
[2] = {"m0", "m1"};

285 
	`öô_ˇt£m
();

286 
	`P
(
muãx
);

290 
ödex
 = 0; index < 
NCATS
; index++) {

292 
îr‹
 = 
	`thªad_f‹k
(
tˇt
[
ödex
],

293 
NULL
,

294 
ödex
,

295 
ˇt£m
,

296 
NULL


303 i‡(
îr‹
) {

305 
	`∑nic
("catsem:Åhread_fork failed: %s\n",

306 
	`°ªº‹
(
îr‹
)

314 
ödex
 = 0; index < 
NMICE
; index++) {

316 
îr‹
 = 
	`thªad_f‹k
(
tmou£
[
ödex
],

317 
NULL
,

318 
ödex
,

319 
mou££m
,

320 
NULL


327 i‡(
îr‹
) {

329 
	`∑nic
("mousesem:Åhread_fork failed: %s\n",

330 
	`°ªº‹
(
îr‹
)

338 
	`V
(
muãx
);

340 
	}
}

	@asst1/stoplight.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

19 
	~<ã°.h
>

20 
	~<thªad.h
>

21 
	~<synch.h
>

33 
	#NCARS
 20

	)

42 c⁄° *
	gdúe˘i⁄s
[] = { "N", "E", "S", "W" };

44 c⁄° *
	gmsgs
[] = {

53 íum { 
	mAPPROACHING
, 
	mREGION1
, 
	mREGION2
, 
	mREGION3
, 
	mLEAVING
 };

55 
	gnumˇrföished
;

58 
	$mesßge
(
msg_ƒ
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
de°dúe˘i⁄
)

60 
	`k¥ötf
("%s car = %2d, direction = %s, destination = %s\n",

61 
msgs
[
msg_ƒ
], 
ˇ∫umbî
,

62 
dúe˘i⁄s
[
ˇrdúe˘i⁄
], dúe˘i⁄s[
de°dúe˘i⁄
]);

63 
	}
}

69 
lock
 *
	gmuãx
;

74 
lock
 *
	gmesg
;

78 
lock
 *
	gqueue_muãx
[4];

86 
lock
 *
	gp‹ti⁄
[4];

88 
lock
 *
	gföish
;

97 
	gdódlockcheckî
;

100 
	$öô_°›light
() {

101 
p‹ti⁄
[0] = 
	`lock_¸óã
("NEÖortion");

102 
p‹ti⁄
[1] = 
	`lock_¸óã
("SEÖortion");

103 
p‹ti⁄
[2] = 
	`lock_¸óã
("SWÖortion");

104 
p‹ti⁄
[3] = 
	`lock_¸óã
("NWÖortion");

106 
muãx
 = 
	`lock_¸óã
("new car mutex");

107 
mesg
 = 
	`lock_¸óã
("synch mesg displaying");

109 
queue_muãx
[0] = 
	`lock_¸óã
("syncháddingÇew carÅo queue 0");

110 
queue_muãx
[1] = 
	`lock_¸óã
("syncháddingÇew carÅo queue 1");

111 
queue_muãx
[2] = 
	`lock_¸óã
("syncháddingÇew carÅo queue 2");

112 
queue_muãx
[3] = 
	`lock_¸óã
("syncháddingÇew carÅo queue 3");

114 
föish
 = 
	`lock_¸óã
("printÅhe finish mesg");

116 
dódlockcheckî
 = 0;

117 
numˇrföished
 = 0;

119 
	}
}

150 
	s≠¥ﬂchög_queue
 {

151 
	mˇ∫umbî
;

152 
	mˇrdúe˘i⁄
;

153 
≠¥ﬂchög_queue
* 
	m√xt
;

154 } *
	gqueue_hód
[4], *
	gqueue_èû
[4];

159 
≠¥ﬂchög_queue
 *
	g√xt_íå™˚
[4];

165 
	$öô_≠¥ﬂchög_queue
 () {

166 
i
;

167 
i
 = 0; i < 4; i ++ ) {

168 
queue_hód
[
i
] = (
≠¥ﬂchög_queue
*)
	`kmÆloc
( (approaching_queue));

169 
queue_hód
[
i
]->
ˇ∫umbî
 = -1;

170 
queue_èû
[
i
] = 
queue_hód
[i];

171 
√xt_íå™˚
[
i
] = 
queue_hód
[i];

173 
	}
}

184 
	$©ãm±_to_íãr
 (
ˇrdúe˘i⁄
, 
ˇ∫umbî
, 
mode
, 
tu∫off£t
) {

186 
	`lock_acquúe
(
muãx
);

187 i‡(
√xt_íå™˚
[
ˇrdúe˘i⁄
]->
ˇ∫umbî
 == carnumber) {

188 
	`lock_acquúe
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+3)%4]);

192 i‡(
mode
 =1 && 
dódlockcheckî
 == 3) {

193 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+3)%4]);

194 
	`lock_ªÀa£
(
muãx
);

197 
√xt_íå™˚
[
ˇrdúe˘i⁄
] =Çext_íå™˚[ˇrdúe˘i⁄]->
√xt
;

198 i‡(
mode
 == 1) {

199 
dódlockcheckî
 ++ ;

202 
	`lock_acquúe
(
mesg
);

203 
	`mesßge
(1, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (ˇrdúe˘i⁄+
tu∫off£t
)%4);

204 
	`lock_ªÀa£
(
mesg
);

205 
	`lock_ªÀa£
(
muãx
);

208 
	`lock_ªÀa£
(
muãx
);

211 
	}
}

232 
	$go°øight
(
ˇrdúe˘i⁄
,

233 
ˇ∫umbî
)

238 
	`©ãm±_to_íãr
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
, 1, 2);

242 
	`lock_acquúe
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+2)%4]);

243 
dódlockcheckî
 -- ;

244 
	`lock_acquúe
(
mesg
);

245 
	`mesßge
(2, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (cardirection+2)%4);

246 
	`lock_ªÀa£
(
mesg
);

247 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+3)%4]);

251 
	`lock_acquúe
(
mesg
);

252 
	`mesßge
(4, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (cardirection+2)%4);

253 
	`lock_ªÀa£
(
mesg
);

254 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+2)%4]);

256 
	`lock_acquúe
(
föish
);

257 
numˇrföished
 ++ ;

258 i‡(
numˇrföished
 =
NCARS
)

259 
	`k¥ötf
("ALL CARS FINISHED! \n");

260 
	`lock_ªÀa£
(
föish
);

261 
	}
}

283 
	$tu∫À·
(
ˇrdúe˘i⁄
,

284 
ˇ∫umbî
)

289 
	`©ãm±_to_íãr
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
, 1, 1);

293 
	`lock_acquúe
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+2)%4]);

295 
	`lock_acquúe
(
mesg
);

296 
	`mesßge
(2, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (cardirection+1)%4);

297 
	`lock_ªÀa£
(
mesg
);

298 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+3)%4]);

302 
	`lock_acquúe
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+1)%4]);

303 
dódlockcheckî
 -- ;

304 
	`lock_acquúe
(
mesg
);

305 
	`mesßge
(3, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (cardirection+1)%4);

306 
	`lock_ªÀa£
(
mesg
);

307 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+2)%4]);

311 
	`lock_acquúe
(
mesg
);

312 
	`mesßge
(4, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (cardirection+1)%4);

313 
	`lock_ªÀa£
(
mesg
);

314 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+1)%4]);

317 
	`lock_acquúe
(
föish
);

318 
numˇrföished
 ++ ;

319 i‡(
numˇrföished
 =
NCARS
)

320 
	`k¥ötf
("ALL CARS FINISHED! \n");

321 
	`lock_ªÀa£
(
föish
);

323 
	}
}

345 
	$tu∫right
(
ˇrdúe˘i⁄
,

346 
ˇ∫umbî
)

351 
	`©ãm±_to_íãr
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
, 0, 3);

355 
	`lock_acquúe
(
mesg
);

356 
	`mesßge
(4, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, (cardirection+3)%4);

357 
	`lock_ªÀa£
(
mesg
);

358 
	`lock_ªÀa£
(
p‹ti⁄
[(
ˇrdúe˘i⁄
+3)%4]);

361 
	`lock_acquúe
(
föish
);

362 
numˇrföished
 ++ ;

363 i‡(
numˇrföished
 =
NCARS
)

364 
	`k¥ötf
("ALL CARS FINISHED! \n");

365 
	`lock_ªÀa£
(
föish
);

367 
	}
}

392 
	$≠¥ﬂchöãr£˘i⁄
(* 
unu£dpoöãr
,

393 
ˇ∫umbî
)

395 (Ë
unu£dpoöãr
;

398 
ˇrdúe˘i⁄
 = 
	`øndom
() % 4;

400 
tu∫
 = 
	`øndom
() % 3;

401 
de°
;

402 i‡(
tu∫
 == 0) {

403 
de°
 = (
ˇrdúe˘i⁄
+2)%4;

404 } i‡(
tu∫
 == 1) {

405 
de°
 = (
ˇrdúe˘i⁄
+1)%4;

407 
de°
 = (
ˇrdúe˘i⁄
+3)%4;

415 
≠¥ﬂchög_queue
 *
√wdummy
 = (≠¥ﬂchög_queue*)
	`kmÆloc
( (approaching_queue));

416 
√wdummy
->
ˇ∫umbî
 = -1;

417 
√wdummy
->
ˇrdúe˘i⁄
 = -1;

418 
√wdummy
->
√xt
 = 
NULL
;

420 
	`lock_acquúe
(
queue_muãx
[
ˇrdúe˘i⁄
]);

444 
queue_èû
[
ˇrdúe˘i⁄
]->
√xt
 = 
√wdummy
;

448 
queue_èû
[
ˇrdúe˘i⁄
]->cardirection = cardirection;

449 
queue_èû
[
ˇrdúe˘i⁄
]->
ˇ∫umbî
 = carnumber;

450 
queue_èû
[
ˇrdúe˘i⁄
] = 
√wdummy
;

451 
	`lock_acquúe
(
mesg
);

452 
	`mesßge
(0, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
de°
);

453 
	`lock_ªÀa£
(
mesg
);

454 
	`lock_ªÀa£
(
queue_muãx
[
ˇrdúe˘i⁄
]);

456 i‡(
tu∫
 == 0) {

457 
	`go°øight
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
);

458 } i‡(
tu∫
 == 1) {

459 
	`tu∫À·
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
);

461 
	`tu∫right
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
);

463 
	}
}

482 
	$¸óãˇrs
(
«rgs
,

483 ** 
¨gs
)

485 
ödex
, 
îr‹
;

491 (Ë
«rgs
;

492 (Ë
¨gs
;

497 
	`öô_°›light
();

498 
	`öô_≠¥ﬂchög_queue
();

499 
ödex
 = 0; index < 
NCARS
; index++) {

501 
îr‹
 = 
	`thªad_f‹k
("approachintersectionÅhread",

502 
NULL
,

503 
ödex
,

504 
≠¥ﬂchöãr£˘i⁄
,

505 
NULL


512 i‡(
îr‹
) {

514 
	`∑nic
("approachintersection:Åhread_fork failed: %s\n",

515 
	`°ªº‹
(
îr‹
)

521 
	}
}

	@compile/ASST2/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *, );

15 
autoc⁄f_øndom
(
øndom_so·c
 *, );

16 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

17 
	g√xtunô_bìp
;

18 
	g√xtunô_c⁄
;

19 
	g√xtunô_emu
;

20 
	g√xtunô_lhd
;

21 
	g√xtunô_Ã™dom
;

22 
	g√xtunô_l£r
;

23 
	g√xtunô_…imî
;

24 
	g√xtunô_…ø˚
;

25 
	g√xtunô_øndom
;

26 
	g√xtunô_π˛ock
;

30 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

32 
emu_so·c
 *
dev
;

33 
ªsu…
;

35 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

36 i‡(
dev
==
NULL
) {

39 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

40 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

41 i‡(
ªsu…
 != 0) {

42 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

44  
ªsu…
;

46 
	`k¥ötf
("\n");

47 
√xtunô_emu
 = 
devunô
+1;

48 
	`autoc⁄f_emu
(
dev
, 
devunô
);

50 
	}
}

54 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

56 
…ø˚_so·c
 *
dev
;

57 
ªsu…
;

59 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

60 i‡(
dev
==
NULL
) {

63 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

64 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

65 i‡(
ªsu…
 != 0) {

66 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

68  
ªsu…
;

70 
	`k¥ötf
("\n");

71 
√xtunô_…ø˚
 = 
devunô
+1;

72 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

74 
	}
}

78 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

80 
…imî_so·c
 *
dev
;

81 
ªsu…
;

83 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

84 i‡(
dev
==
NULL
) {

87 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

88 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

89 i‡(
ªsu…
 != 0) {

90 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

92  
ªsu…
;

94 
	`k¥ötf
("\n");

95 
√xtunô_…imî
 = 
devunô
+1;

96 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

98 
	}
}

102 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

104 
Ã™dom_so·c
 *
dev
;

105 
ªsu…
;

107 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

108 i‡(
dev
==
NULL
) {

111 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

112 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

113 i‡(
ªsu…
 != 0) {

114 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

116  
ªsu…
;

118 
	`k¥ötf
("\n");

119 
√xtunô_Ã™dom
 = 
devunô
+1;

120 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

122 
	}
}

126 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

128 
lhd_so·c
 *
dev
;

129 
ªsu…
;

131 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

132 i‡(
dev
==
NULL
) {

135 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

136 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

137 i‡(
ªsu…
 != 0) {

138 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

140  
ªsu…
;

142 
	`k¥ötf
("\n");

143 
√xtunô_lhd
 = 
devunô
+1;

144 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

146 
	}
}

150 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

152 
l£r_so·c
 *
dev
;

153 
ªsu…
;

155 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

156 i‡(
dev
==
NULL
) {

159 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

160 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

161 i‡(
ªsu…
 != 0) {

162 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

164  
ªsu…
;

166 
	`k¥ötf
("\n");

167 
√xtunô_l£r
 = 
devunô
+1;

168 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

170 
	}
}

174 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

176 
bìp_so·c
 *
dev
;

177 
ªsu…
;

179 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

180 i‡(
dev
==
NULL
) {

183 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

184 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

185 i‡(
ªsu…
 != 0) {

186 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

188  
ªsu…
;

190 
	`k¥ötf
("\n");

191 
√xtunô_bìp
 = 
devunô
+1;

192 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

194 
	}
}

198 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

200 
c⁄_so·c
 *
dev
;

201 
ªsu…
;

203 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

204 i‡(
dev
==
NULL
) {

207 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

208 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

209 i‡(
ªsu…
 != 0) {

210 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

212  
ªsu…
;

214 
	`k¥ötf
("\n");

215 
√xtunô_c⁄
 = 
devunô
+1;

216 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

218 
	}
}

222 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

224 
π˛ock_so·c
 *
dev
;

225 
ªsu…
;

227 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

228 i‡(
dev
==
NULL
) {

231 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

232 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

233 i‡(
ªsu…
 != 0) {

234 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

236  
ªsu…
;

238 
	`k¥ötf
("\n");

239 
√xtunô_π˛ock
 = 
devunô
+1;

240 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

242 
	}
}

246 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

248 
øndom_so·c
 *
dev
;

249 
ªsu…
;

251 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

252 i‡(
dev
==
NULL
) {

255 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

256 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

257 i‡(
ªsu…
 != 0) {

258 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

260  
ªsu…
;

262 
	`k¥ötf
("\n");

263 
√xtunô_øndom
 = 
devunô
+1;

264 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

266 
	}
}

270 
	$åy©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
, 
busunô
)

272 
øndom_so·c
 *
dev
;

273 
ªsu…
;

275 
dev
 = 
	`©èch_øndom_to_p£ud‹™d
(
devunô
, 
bus
);

276 i‡(
dev
==
NULL
) {

279 
	`k¥ötf
("øndom%dáàp£ud‹™d%d", 
devunô
, 
busunô
);

280 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

281 i‡(
ªsu…
 != 0) {

282 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

284  
ªsu…
;

286 
	`k¥ötf
("\n");

287 
√xtunô_øndom
 = 
devunô
+1;

288 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

290 
	}
}

295 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

297 ()
bus
; ()
busunô
;

298 
	}
}

302 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

304 ()
bus
; ()
busunô
;

306 i‡(
√xtunô_c⁄
 <= 0) {

307 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

310 
	}
}

314 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

316 ()
bus
; ()
busunô
;

317 
	}
}

321 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

323 ()
bus
; ()
busunô
;

324 
	}
}

327 
	$autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *
bus
, 
busunô
)

329 ()
bus
; ()
busunô
;

330 i‡(
busunô
==0) {

331 i‡(
√xtunô_øndom
 <= 0) {

332 
	`åy©èch_øndom_to_p£ud‹™d
(0, 
bus
, 
busunô
);

335 
	}
}

339 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

341 ()
bus
; ()
busunô
;

342 
	}
}

346 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

348 ()
bus
; ()
busunô
;

350 i‡(
√xtunô_bìp
 <= 0) {

351 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

355 i‡(
√xtunô_π˛ock
 <= 0) {

356 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

359 
	}
}

362 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

364 ()
bus
; ()
busunô
;

366 
ªsu…
, 
devunô
=
√xtunô_emu
;

368 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

369 
devunô
++;

370 } 
ªsu…
==0);

373 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

375 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

376 
devunô
++;

377 } 
ªsu…
==0);

380 
ªsu…
, 
devunô
=
√xtunô_…imî
;

382 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

383 
devunô
++;

384 } 
ªsu…
==0);

387 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

389 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

390 
devunô
++;

391 } 
ªsu…
==0);

394 
ªsu…
, 
devunô
=
√xtunô_lhd
;

396 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

397 
devunô
++;

398 } 
ªsu…
==0);

401 
ªsu…
, 
devunô
=
√xtunô_l£r
;

403 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

404 
devunô
++;

405 } 
ªsu…
==0);

407 
	}
}

411 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

413 ()
bus
; ()
busunô
;

414 
	}
}

418 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

420 ()
bus
; ()
busunô
;

422 i‡(
√xtunô_øndom
 <= 0) {

423 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

426 
	}
}

430 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

432 ()
bus
; ()
busunô
;

433 
	}
}

437 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

439 ()
bus
; ()
busunô
;

440 
	}
}

443 
	$p£udoc⁄fig
()

446 
p£ud‹™d_so·c
 *
s
;

448 
s
 = 
	`p£udﬂâach_p£ud‹™d
(0);

449 i‡(
s
!=
NULL
) {

450 
	`k¥ötf
("pseudorand0 (virtual)\n");

451 
	`autoc⁄f_p£ud‹™d
(
s
, 0);

454 
	}
}

	@compile/ASST2/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

16 
	gp£ud‹™d_so·c
;

17 
	gøndom_so·c
;

19 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

21 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

26 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

27 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

29 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

30 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

31 
p£ud‹™d_so·c
 *
p£udﬂâach_p£ud‹™d
(
devunô
);

32 
øndom_so·c
 *
©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
);

34 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

35 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

36 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

37 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

38 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

39 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

40 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

41 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

42 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

43 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

44 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

46 
p£udoc⁄fig
();

	@compile/ASST2/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST2/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST2/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST2/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST2/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST2/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 138;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST2";

	@compile/ASST3/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *, );

15 
autoc⁄f_øndom
(
øndom_so·c
 *, );

16 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

17 
	g√xtunô_bìp
;

18 
	g√xtunô_c⁄
;

19 
	g√xtunô_emu
;

20 
	g√xtunô_lhd
;

21 
	g√xtunô_Ã™dom
;

22 
	g√xtunô_l£r
;

23 
	g√xtunô_…imî
;

24 
	g√xtunô_…ø˚
;

25 
	g√xtunô_øndom
;

26 
	g√xtunô_π˛ock
;

30 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

32 
emu_so·c
 *
dev
;

33 
ªsu…
;

35 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

36 i‡(
dev
==
NULL
) {

39 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

40 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

41 i‡(
ªsu…
 != 0) {

42 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

44  
ªsu…
;

46 
	`k¥ötf
("\n");

47 
√xtunô_emu
 = 
devunô
+1;

48 
	`autoc⁄f_emu
(
dev
, 
devunô
);

50 
	}
}

54 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

56 
…ø˚_so·c
 *
dev
;

57 
ªsu…
;

59 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

60 i‡(
dev
==
NULL
) {

63 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

64 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

65 i‡(
ªsu…
 != 0) {

66 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

68  
ªsu…
;

70 
	`k¥ötf
("\n");

71 
√xtunô_…ø˚
 = 
devunô
+1;

72 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

74 
	}
}

78 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

80 
…imî_so·c
 *
dev
;

81 
ªsu…
;

83 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

84 i‡(
dev
==
NULL
) {

87 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

88 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

89 i‡(
ªsu…
 != 0) {

90 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

92  
ªsu…
;

94 
	`k¥ötf
("\n");

95 
√xtunô_…imî
 = 
devunô
+1;

96 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

98 
	}
}

102 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

104 
Ã™dom_so·c
 *
dev
;

105 
ªsu…
;

107 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

108 i‡(
dev
==
NULL
) {

111 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

112 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

113 i‡(
ªsu…
 != 0) {

114 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

116  
ªsu…
;

118 
	`k¥ötf
("\n");

119 
√xtunô_Ã™dom
 = 
devunô
+1;

120 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

122 
	}
}

126 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

128 
lhd_so·c
 *
dev
;

129 
ªsu…
;

131 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

132 i‡(
dev
==
NULL
) {

135 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

136 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

137 i‡(
ªsu…
 != 0) {

138 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

140  
ªsu…
;

142 
	`k¥ötf
("\n");

143 
√xtunô_lhd
 = 
devunô
+1;

144 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

146 
	}
}

150 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

152 
l£r_so·c
 *
dev
;

153 
ªsu…
;

155 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

156 i‡(
dev
==
NULL
) {

159 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

160 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

161 i‡(
ªsu…
 != 0) {

162 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

164  
ªsu…
;

166 
	`k¥ötf
("\n");

167 
√xtunô_l£r
 = 
devunô
+1;

168 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

170 
	}
}

174 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

176 
bìp_so·c
 *
dev
;

177 
ªsu…
;

179 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

180 i‡(
dev
==
NULL
) {

183 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

184 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

185 i‡(
ªsu…
 != 0) {

186 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

188  
ªsu…
;

190 
	`k¥ötf
("\n");

191 
√xtunô_bìp
 = 
devunô
+1;

192 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

194 
	}
}

198 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

200 
c⁄_so·c
 *
dev
;

201 
ªsu…
;

203 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

204 i‡(
dev
==
NULL
) {

207 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

208 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

209 i‡(
ªsu…
 != 0) {

210 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

212  
ªsu…
;

214 
	`k¥ötf
("\n");

215 
√xtunô_c⁄
 = 
devunô
+1;

216 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

218 
	}
}

222 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

224 
π˛ock_so·c
 *
dev
;

225 
ªsu…
;

227 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

228 i‡(
dev
==
NULL
) {

231 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

232 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

233 i‡(
ªsu…
 != 0) {

234 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

236  
ªsu…
;

238 
	`k¥ötf
("\n");

239 
√xtunô_π˛ock
 = 
devunô
+1;

240 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

242 
	}
}

246 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

248 
øndom_so·c
 *
dev
;

249 
ªsu…
;

251 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

252 i‡(
dev
==
NULL
) {

255 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

256 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

257 i‡(
ªsu…
 != 0) {

258 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

260  
ªsu…
;

262 
	`k¥ötf
("\n");

263 
√xtunô_øndom
 = 
devunô
+1;

264 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

266 
	}
}

270 
	$åy©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
, 
busunô
)

272 
øndom_so·c
 *
dev
;

273 
ªsu…
;

275 
dev
 = 
	`©èch_øndom_to_p£ud‹™d
(
devunô
, 
bus
);

276 i‡(
dev
==
NULL
) {

279 
	`k¥ötf
("øndom%dáàp£ud‹™d%d", 
devunô
, 
busunô
);

280 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

281 i‡(
ªsu…
 != 0) {

282 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

284  
ªsu…
;

286 
	`k¥ötf
("\n");

287 
√xtunô_øndom
 = 
devunô
+1;

288 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

290 
	}
}

295 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

297 ()
bus
; ()
busunô
;

298 
	}
}

302 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

304 ()
bus
; ()
busunô
;

306 i‡(
√xtunô_c⁄
 <= 0) {

307 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

310 
	}
}

314 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

316 ()
bus
; ()
busunô
;

317 
	}
}

321 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

323 ()
bus
; ()
busunô
;

324 
	}
}

327 
	$autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *
bus
, 
busunô
)

329 ()
bus
; ()
busunô
;

330 i‡(
busunô
==0) {

331 i‡(
√xtunô_øndom
 <= 0) {

332 
	`åy©èch_øndom_to_p£ud‹™d
(0, 
bus
, 
busunô
);

335 
	}
}

339 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

341 ()
bus
; ()
busunô
;

342 
	}
}

346 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

348 ()
bus
; ()
busunô
;

350 i‡(
√xtunô_bìp
 <= 0) {

351 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

355 i‡(
√xtunô_π˛ock
 <= 0) {

356 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

359 
	}
}

362 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

364 ()
bus
; ()
busunô
;

366 
ªsu…
, 
devunô
=
√xtunô_emu
;

368 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

369 
devunô
++;

370 } 
ªsu…
==0);

373 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

375 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

376 
devunô
++;

377 } 
ªsu…
==0);

380 
ªsu…
, 
devunô
=
√xtunô_…imî
;

382 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

383 
devunô
++;

384 } 
ªsu…
==0);

387 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

389 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

390 
devunô
++;

391 } 
ªsu…
==0);

394 
ªsu…
, 
devunô
=
√xtunô_lhd
;

396 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

397 
devunô
++;

398 } 
ªsu…
==0);

401 
ªsu…
, 
devunô
=
√xtunô_l£r
;

403 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

404 
devunô
++;

405 } 
ªsu…
==0);

407 
	}
}

411 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

413 ()
bus
; ()
busunô
;

414 
	}
}

418 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

420 ()
bus
; ()
busunô
;

422 i‡(
√xtunô_øndom
 <= 0) {

423 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

426 
	}
}

430 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

432 ()
bus
; ()
busunô
;

433 
	}
}

437 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

439 ()
bus
; ()
busunô
;

440 
	}
}

443 
	$p£udoc⁄fig
()

446 
p£ud‹™d_so·c
 *
s
;

448 
s
 = 
	`p£udﬂâach_p£ud‹™d
(0);

449 i‡(
s
!=
NULL
) {

450 
	`k¥ötf
("pseudorand0 (virtual)\n");

451 
	`autoc⁄f_p£ud‹™d
(
s
, 0);

454 
	}
}

	@compile/ASST3/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

16 
	gp£ud‹™d_so·c
;

17 
	gøndom_so·c
;

19 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

21 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

26 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

27 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

29 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

30 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

31 
p£ud‹™d_so·c
 *
p£udﬂâach_p£ud‹™d
(
devunô
);

32 
øndom_so·c
 *
©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
);

34 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

35 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

36 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

37 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

38 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

39 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

40 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

41 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

42 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

43 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

44 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

46 
p£udoc⁄fig
();

	@compile/ASST3/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 0

	)

	@compile/ASST3/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST3/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST3/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST3/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST3/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 387;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST3";

	@dev/generic/beep.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<gíîic/bìp.h
>

5 
	~"autoc⁄f.h
"

18 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

21 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

24 i‡(
unô
!=0) {

25  
ENODEV
;

28 
	`as£π
(
the_bìp
==
NULL
);

29 
the_bìp
 = 
bs
;

31 
	}
}

34 
	$bìp
()

36 i‡(
the_bìp
!=
NULL
) {

37 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

40 
	`k¥ötf
("beep: Warning:Ço beep device\n");

42 
	}
}

	@dev/generic/beep.h

1 #i‚de‡
_GENERIC_BEEP_H_


2 
	#_GENERIC_BEEP_H_


	)

9 
	sbìp_so·c
 {

10 *
	mbs_devd©a
;

11 (*
	mbs_bìp
)(*
	mdevd©a
);

	@dev/generic/console.c

24 
	~<ty≥s.h
>

25 
	~<kîn/î∫o.h
>

26 
	~<lib.h
>

27 
	~<machöe/•l.h
>

28 
	~<synch.h
>

29 
	~<gíîic/c⁄sﬁe.h
>

30 
	~<dev.h
>

31 
	~<vfs.h
>

32 
	~<uio.h
>

33 
	~"autoc⁄f.h
"

38 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

44 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

45 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

54 
	#DELAYBUFSIZE
 1024

	)

55 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

56 
size_t
 
	gdñayed_outbuf_pos
=0;

60 
	$putch_dñayed
(
ch
)

67 
	`as£π
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

68 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

69 
	}
}

73 
	$Êush_dñay_buf
()

75 
size_t
 
i
;

76 
i
=0; i<
dñayed_outbuf_pos
; i++) {

77 
	`putch
(
dñayed_outbuf
[
i
]);

79 
dñayed_outbuf_pos
 = 0;

80 
	}
}

90 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

92 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

93 
	}
}

103 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

105 
	`P
(
cs
->
cs_w£m
);

106 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

107 
	}
}

115 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

117 
	`P
(
cs
->
cs_r£m
);

118  
cs
->
cs_gŸch¨
;

119 
	}
}

125 
	$c⁄_öput
(*
vcs
, 
ch
)

127 
c⁄_so·c
 *
cs
 = 
vcs
;

129 
cs
->
cs_gŸch¨
 = 
ch
;

130 
	`V
(
cs
->
cs_r£m
);

131 
	}
}

137 
	$c⁄_°¨t
(*
vcs
)

139 
c⁄_so·c
 *
cs
 = 
vcs
;

141 
	`V
(
cs
->
cs_w£m
);

142 
	}
}

155 
	$putch
(
ch
)

157 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

159 i‡(
cs
==
NULL
) {

160 
	`putch_dñayed
(
ch
);

162 i‡(
ö_öãºu±
 || 
cur•l
>0) {

163 
	`putch_pﬁÀd
(
cs
, 
ch
);

166 
	`putch_öå
(
cs
, 
ch
);

168 
	}
}

171 
	$gëch
()

173 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

174 
	`as£π
(
cs
!=
NULL
);

175 
	`as£π
(!
ö_öãºu±
 && 
cur•l
==0);

177  
	`gëch_öå
(
cs
);

178 
	}
}

188 
	$c⁄_›í
(
devi˚
 *
dev
, 
›íÊags
)

190 ()
dev
;

191 ()
›íÊags
;

193 
	}
}

197 
	$c⁄_˛o£
(
devi˚
 *
dev
)

199 ()
dev
;

201 
	}
}

205 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

207 
ªsu…
;

208 
ch
;

209 
lock
 *
lk
;

211 ()
dev
;

213 i‡(
uio
->
uio_rw
==
UIO_READ
) {

214 
lk
 = 
c⁄_u£æock_ªad
;

217 
lk
 = 
c⁄_u£æock_wrôe
;

220 
	`as£π
(
lk
 !
NULL
);

221 
	`lock_acquúe
(
lk
);

223 
uio
->
uio_ªsid
 > 0) {

224 i‡(
uio
->
uio_rw
==
UIO_READ
) {

225 
ch
 = 
	`gëch
();

226 i‡(
ch
=='\r') {

227 
ch
 = '\n';

229 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

230 i‡(
ªsu…
) {

231 
	`lock_ªÀa£
(
lk
);

232  
ªsu…
;

234 i‡(
ch
=='\n') {

239 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

240 i‡(
ªsu…
) {

241 
	`lock_ªÀa£
(
lk
);

242  
ªsu…
;

244 i‡(
ch
=='\n') {

245 
	`putch
('\r');

247 
	`putch
(
ch
);

250 
	`lock_ªÀa£
(
lk
);

252 
	}
}

256 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

259 ()
dev
;

260 ()
›
;

261 ()
d©a
;

262  
EINVAL
;

263 
	}
}

267 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

269 
devi˚
 *
dev
;

270 
ªsu…
;

272 
dev
 = 
	`kmÆloc
((*dev));

273 i‡(
dev
==
NULL
) {

274  
ENOMEM
;

277 
dev
->
d_›í
 = 
c⁄_›í
;

278 
dev
->
d_˛o£
 = 
c⁄_˛o£
;

279 
dev
->
d_io
 = 
c⁄_io
;

280 
dev
->
d_io˘l
 = 
c⁄_io˘l
;

281 
dev
->
d_blocks
 = 0;

282 
dev
->
d_blocksize
 = 1;

283 
dev
->
d_d©a
 = 
cs
;

285 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

286 i‡(
ªsu…
) {

287 
	`k‰ì
(
dev
);

288  
ªsu…
;

292 
	}
}

301 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

303 
£m≠h‹e
 *
r£m
, *
w£m
;

304 
lock
 *
æk
, *
wlk
;

313 i‡(
unô
>0) {

314 
	`as£π
(
the_c⁄sﬁe
!=
NULL
);

315  
ENODEV
;

317 
	`as£π
(
the_c⁄sﬁe
==
NULL
);

319 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

320 i‡(
r£m
 =
NULL
) {

321  
ENOMEM
;

323 
w£m
 = 
	`£m_¸óã
("console write", 1);

324 i‡(
w£m
 =
NULL
) {

325 
	`£m_de°roy
(
r£m
);

326  
ENOMEM
;

328 
æk
 = 
	`lock_¸óã
("console-lock-read");

329 i‡(
æk
 =
NULL
) {

330 
	`£m_de°roy
(
r£m
);

331 
	`£m_de°roy
(
w£m
);

332  
ENOMEM
;

334 
wlk
 = 
	`lock_¸óã
("console-lock-write");

335 i‡(
wlk
 =
NULL
) {

336 
	`lock_de°roy
(
æk
);

337 
	`£m_de°roy
(
r£m
);

338 
	`£m_de°roy
(
w£m
);

339  
ENOMEM
;

342 
cs
->
cs_r£m
 = 
r£m
;

343 
cs
->
cs_w£m
 = 
w£m
;

344 
cs
->
cs_gŸch¨
 = 0;

346 
the_c⁄sﬁe
 = 
cs
;

347 
c⁄_u£æock_ªad
 = 
æk
;

348 
c⁄_u£æock_wrôe
 = 
wlk
;

350 
	`Êush_dñay_buf
();

352  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

353 
	}
}

	@dev/generic/console.h

1 #i‚de‡
_GENERIC_CONSOLE_H_


2 
	#_GENERIC_CONSOLE_H_


	)

11 
	sc⁄_so·c
 {

13 *
	mcs_devd©a
;

14 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

15 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

18 
£m≠h‹e
 *
	mcs_r£m
;

19 
£m≠h‹e
 *
	mcs_w£m
;

20 
	mcs_gŸch¨
;

26 
c⁄_öput
–*
cs
, 
ch
);

27 
c⁄_°¨t
–*
cs
);

	@dev/generic/pseudorand.c

9 
	~<ty≥s.h
>

10 
	~<lib.h
>

11 
	~<uio.h
>

12 
	~<gíîic/p£ud‹™d.h
>

13 
	~"autoc⁄f.h
"

15 
	#MULTIPLIER
 16807

	)

16 
	#MODULUS
 0x7fffffff

	)

17 
	#K1
 127773

	)

18 
	#K2
 2836

	)

20 
u_öt32_t


21 
	$p£ud‹™d_øndom
(*
devd©a
)

23 
p£ud‹™d_so·c
 *
ps
 = 
devd©a
;

24 
öt32_t
 
hi
, 
lo
, 
tmp
;

26 
hi
 = 
ps
->
ps_£ed
 / 
K1
;

27 
lo
 = 
ps
->
ps_£ed
 % 
K1
;

28 
tmp
 = 
MULTIPLIER
 * 
lo
 - 
K2
 * 
hi
;

29 i‡(
tmp
 <= 0) {

30 
tmp
 +
MODULUS
;

32 
ps
->
ps_£ed
 = 
tmp
;

38  
ps
->
ps_£ed
 - 1;

39 
	}
}

41 
u_öt32_t


42 
	$p£ud‹™d_øndmax
(*
devd©a
)

44 ()
devd©a
;

47  
MODULUS
 - 2;

48 
	}
}

50 
p£ud‹™d_so·c
 *

51 
	$p£udﬂâach_p£ud‹™d
(
unô
)

53 
p£ud‹™d_so·c
 *
ps
 = 
	`kmÆloc
((pseudorand_softc));

54 i‡(
ps
==
NULL
) {

55  
NULL
;

58 (Ë
unô
;

66 
ps
->
ps_£ed
 = 305824;

68  
ps
;

69 
	}
}

79 
	$p£ud‹™d_ªad
(*
devd©a
, 
uio
 *uio)

81 
u_öt32_t
 
vÆ
;

82 
u_öt8_t
 
byãs
[3];

83 
ªsu…
;

85 
uio
->
uio_ªsid
 > 0) {

86 
vÆ
 = 
	`p£ud‹™d_øndom
(
devd©a
);

99 
byãs
[0] = (
vÆ
 & 0x00000ff0) >> 4;

100 
byãs
[1] = (
vÆ
 & 0x000ff000) >> 12;

101 
byãs
[2] = (
vÆ
 & 0x0ff00000) >> 20;

103 
ªsu…
 = 
	`uiomove
(
byãs
, (byãs), 
uio
);

104 i‡(
ªsu…
) {

105  
ªsu…
;

110 
	}
}

	@dev/generic/pseudorand.h

1 #i‚de‡
_GENERIC_PSEUDORAND_H_


2 
	#_GENERIC_PSEUDORAND_H_


	)

4 
	guio
;

6 
	sp£ud‹™d_so·c
 {

7 
u_öt32_t
 
	mps_£ed
;

10 
u_öt32_t
 
p£ud‹™d_øndom
–*
devd©a
);

11 
u_öt32_t
 
p£ud‹™d_øndmax
–*
devd©a
);

12 
p£ud‹™d_ªad
–*, 
uio
 *);

	@dev/generic/pseudorand_att.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/øndom.h
>

9 
	~<gíîic/p£ud‹™d.h
>

10 
	~"autoc⁄f.h
"

12 
øndom_so·c
 *

13 
	$©èch_øndom_to_p£ud‹™d
(
øndomno
, 
p£ud‹™d_so·c
 *
ls
)

15 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

16 i‡(
rs
==
NULL
) {

17  
NULL
;

20 ()
øndomno
;

22 
rs
->
rs_devd©a
 = 
ls
;

23 
rs
->
rs_øndom
 = 
p£ud‹™d_øndom
;

24 
rs
->
rs_øndmax
 = 
p£ud‹™d_øndmax
;

25 
rs
->
rs_ªad
 = 
p£ud‹™d_ªad
;

27  
rs
;

28 
	}
}

	@dev/generic/random.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<uio.h
>

6 
	~<vfs.h
>

7 
	~<gíîic/øndom.h
>

8 
	~"autoc⁄f.h
"

21 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

29 
	$ønd›í
(
devi˚
 *
dev
, 
›íÊags
)

31 ()
dev
;

33 i‡(
›íÊags
 !
O_RDONLY
) {

34  
EIO
;

38 
	}
}

45 
	$ønd˛o£
(
devi˚
 *
dev
)

47 ()
dev
;

49 
	}
}

56 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

58 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

60 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

61  
EIO
;

64  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

65 
	}
}

72 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

77 ()
dev
;

78 ()
›
;

79 ()
d©a
;

80  
EIOCTL
;

81 
	}
}

87 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

89 
ªsu…
;

92 i‡(
unô
!=0) {

93  
ENODEV
;

96 
	`as£π
(
the_øndom
==
NULL
);

97 
the_øndom
 = 
rs
;

99 
rs
->
rs_dev
.
d_›í
 = 
ønd›í
;

100 
rs
->
rs_dev
.
d_˛o£
 = 
ønd˛o£
;

101 
rs
->
rs_dev
.
d_io
 = 
øndio
;

102 
rs
->
rs_dev
.
d_io˘l
 = 
øndio˘l
;

103 
rs
->
rs_dev
.
d_blocks
 = 0;

104 
rs
->
rs_dev
.
d_blocksize
 = 1;

105 
rs
->
rs_dev
.
d_d©a
 =Ñs;

108 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

109 i‡(
ªsu…
) {

110  
ªsu…
;

114 
	}
}

121 
u_öt32_t


122 
	$øndom
()

124 i‡(
the_øndom
==
NULL
) {

125 
	`∑nic
("NoÑandom device\n");

127  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

128 
	}
}

130 
u_öt32_t


131 
	$øndmax
()

133 i‡(
the_øndom
==
NULL
) {

134 
	`∑nic
("NoÑandom device\n");

136  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

137 
	}
}

	@dev/generic/random.h

1 #i‚de‡
_GENERIC_RANDOM_H_


2 
	#_GENERIC_RANDOM_H_


	)

4 
	~<dev.h
>

5 
	guio
;

7 
	søndom_so·c
 {

9 *
	mrs_devd©a
;

10 
u_öt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

11 
u_öt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

12 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

14 
devi˚
 
	mrs_dev
;

	@dev/generic/rtclock.c

14 
	~<ty≥s.h
>

15 
	~<kîn/î∫o.h
>

16 
	~<lib.h
>

17 
	~<˛ock.h
>

18 
	~<gíîic/π˛ock.h
>

19 
	~"autoc⁄f.h
"

21 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

24 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

27 i‡(
unô
!=0) {

28  
ENODEV
;

31 
	`as£π
(
the_˛ock
==
NULL
);

32 
the_˛ock
 = 
πc
;

34 
	}
}

37 
	$gëtime
(
time_t
 *
£cs
, 
u_öt32_t
 *
n£cs
)

39 
	`as£π
(
the_˛ock
!=
NULL
);

40 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
£cs
, 
n£cs
);

41 
	}
}

	@dev/generic/rtclock.h

1 #i‚de‡
_GENERIC_RTCLOCK_H_


2 
	#_GENERIC_RTCLOCK_H_


	)

9 
	sπ˛ock_so·c
 {

10 *
	mπc_devd©a
;

11 (*
	mπc_gëtime
)(*
	mdevd©a
, 
time_t
 *
	m£cs
, 
u_öt32_t
 *
	mn£cs
);

	@dev/init.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<dev.h
>

5 
	~"autoc⁄f.h
"

18 
	$dev_boŸ°øp
()

21 
	`as£π
(
cur•l
>0);

23 
	`k¥ötf
("DeviceÖrobe...\n");

24 
	`machdï_dev_boŸ°øp
();

27 
	`as£π
(
cur•l
==0);

30 
	`p£udoc⁄fig
();

32 
	`k¥ötf
("\n");

33 
	}
}

	@dev/lamebus/beep_ltimer.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/bìp.h
>

9 
	~<œmebus/…imî.h
>

10 
	~"autoc⁄f.h
"

12 
bìp_so·c
 *

13 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

15 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

16 i‡(
bs
==
NULL
) {

17  
NULL
;

20 ()
bì≤o
;

22 
bs
->
bs_devd©a
 = 
ls
;

23 
bs
->
bs_bìp
 = 
…imî_bìp
;

25  
bs
;

26 
	}
}

	@dev/lamebus/con_lscreen.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/c⁄sﬁe.h
>

9 
	~<œmebus/ls¸ìn.h
>

10 
	~"autoc⁄f.h
"

12 
c⁄_so·c
 *

13 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

15 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

16 i‡(
cs
==
NULL
) {

17  
NULL
;

20 
cs
->
cs_devd©a
 = 
ls
;

21 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

22 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

24 
ls
->
ls_devd©a
 = 
cs
;

25 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

26 
ls
->
ls_öput
 = 
c⁄_öput
;

28  
cs
;

29 
	}
}

	@dev/lamebus/con_lser.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/c⁄sﬁe.h
>

9 
	~<œmebus/l£r.h
>

10 
	~"autoc⁄f.h
"

12 
c⁄_so·c
 *

13 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

15 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

16 i‡(
cs
==
NULL
) {

17  
NULL
;

20 ()
c⁄¢o
;

22 
cs
->
cs_devd©a
 = 
ls
;

23 
cs
->
cs_£nd
 = 
l£r_wrôe
;

24 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

26 
ls
->
ls_devd©a
 = 
cs
;

27 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

28 
ls
->
ls_öput
 = 
c⁄_öput
;

30  
cs
;

31 
	}
}

	@dev/lamebus/emu.c

14 
	~<ty≥s.h
>

15 
	~<kîn/î∫o.h
>

16 
	~<kîn/uni°d.h
>

17 
	~<kîn/°©.h
>

18 
	~<lib.h
>

19 
	~<synch.h
>

20 
	~<¨øy.h
>

21 
	~<uio.h
>

22 
	~<vfs.h
>

23 
	~<emufs.h
>

24 
	~<œmebus/emu.h
>

25 
	~<machöe/bus.h
>

26 
	~"autoc⁄f.h
"

29 
	#REG_HANDLE
 0

	)

30 
	#REG_OFFSET
 4

	)

31 
	#REG_IOLEN
 8

	)

32 
	#REG_OPER
 12

	)

33 
	#REG_RESULT
 16

	)

36 
	#EMU_BUFFER
 32768

	)

39 
	#EMU_OP_OPEN
 1

	)

40 
	#EMU_OP_CREATE
 2

	)

41 
	#EMU_OP_EXCLCREATE
 3

	)

42 
	#EMU_OP_CLOSE
 4

	)

43 
	#EMU_OP_READ
 5

	)

44 
	#EMU_OP_READDIR
 6

	)

45 
	#EMU_OP_WRITE
 7

	)

46 
	#EMU_OP_GETSIZE
 8

	)

47 
	#EMU_OP_TRUNC
 9

	)

50 
	#EMU_RES_SUCCESS
 1

	)

51 
	#EMU_RES_BADHANDLE
 2

	)

52 
	#EMU_RES_BADOP
 3

	)

53 
	#EMU_RES_BADPATH
 4

	)

54 
	#EMU_RES_BADSIZE
 5

	)

55 
	#EMU_RES_EXISTS
 6

	)

56 
	#EMU_RES_ISDIR
 7

	)

57 
	#EMU_RES_MEDIA
 8

	)

58 
	#EMU_RES_NOHANDLES
 9

	)

59 
	#EMU_RES_NOSPACE
 10

	)

60 
	#EMU_RES_NOTDIR
 11

	)

61 
	#EMU_RES_UNKNOWN
 12

	)

62 
	#EMU_RES_UNSUPP
 13

	)

73 
ölöe


74 
u_öt32_t


75 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
u_öt32_t
 
ªg
)

77  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

78 
	}
}

84 
ölöe


86 
	$emu_wªg
(
emu_so·c
 *
sc
, 
u_öt32_t
 
ªg
, u_öt32_à
vÆ
)

88 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

89 
	}
}

95 
	$emu_úq
(*
dev
)

97 
emu_so·c
 *
sc
 = 
dev
;

99 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

100 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

102 
	`V
(
sc
->
e_£m
);

103 
	}
}

110 
u_öt32_t


111 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
u_öt32_t
 
code
)

113 
code
) {

114 
EMU_RES_SUCCESS
:  0;

115 
EMU_RES_BADHANDLE
:

116 
EMU_RES_BADOP
:

117 
EMU_RES_BADSIZE
:

118 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

119 
EMU_RES_BADPATH
:  
ENOENT
;

120 
EMU_RES_EXISTS
:  
EEXIST
;

121 
EMU_RES_ISDIR
:  
EISDIR
;

122 
EMU_RES_MEDIA
:  
EIO
;

123 
EMU_RES_NOHANDLES
:  
ENFILE
;

124 
EMU_RES_NOSPACE
:  
ENOSPC
;

125 
EMU_RES_NOTDIR
:  
ENOTDIR
;

126 
EMU_RES_UNKNOWN
:  
EIO
;

127 
EMU_RES_UNSUPP
:  
EUNIMP
;

129 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

130  
EAGAIN
;

131 
	}
}

138 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

140 
	`P
(
sc
->
e_£m
);

141  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

142 
	}
}

152 
	$emu_›í
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, c⁄° *
«me
,

153 
¸óã
, 
ex˛
, 
u_öt32_t
 *
√wh™dÀ
, *
√wisdú
)

155 
u_öt32_t
 
›
;

156 
ªsu…
;

158 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

159  
ENAMETOOLONG
;

162 i‡(
¸óã
 && 
ex˛
) {

163 
›
 = 
EMU_OP_EXCLCREATE
;

165 i‡(
¸óã
) {

166 
›
 = 
EMU_OP_CREATE
;

169 
›
 = 
EMU_OP_OPEN
;

172 
	`lock_acquúe
(
sc
->
e_lock
);

174 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

175 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

176 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

177 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

178 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

180 i‡(
ªsu…
==0) {

181 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

182 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

185 
	`lock_ªÀa£
(
sc
->
e_lock
);

186  
ªsu…
;

187 
	}
}

196 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
)

198 
ªsu…
;

199 
möe
;

200 
ªåõs
=0;

202 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

203 i‡(!
möe
) {

204 
	`lock_acquúe
(
sc
->
e_lock
);

210 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

211 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

212 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

214 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

215 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

216 
sc
->
e_unô
);

217 
ªåõs
++;

223 i‡(!
möe
) {

224 
	`lock_ªÀa£
(
sc
->
e_lock
);

226  
ªsu…
;

227 
	}
}

234 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

235 
u_öt32_t
 
›
, 
uio
 *uio)

237 
ªsu…
;

239 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

241 
	`lock_acquúe
(
sc
->
e_lock
);

243 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

244 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

245 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

246 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

247 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

248 i‡(
ªsu…
) {

249 
out
;

252 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

254 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

256 
out
:

257 
	`lock_ªÀa£
(
sc
->
e_lock
);

258  
ªsu…
;

259 
	}
}

266 
	$emu_ªad
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

267 
uio
 *uio)

269  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

270 
	}
}

277 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

278 
uio
 *uio)

280  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

281 
	}
}

288 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

289 
uio
 *uio)

291 
ªsu…
;

293 
	`as£π
(
uio
->
uio_rw
 =
UIO_WRITE
);

295 
	`lock_acquúe
(
sc
->
e_lock
);

297 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

298 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

299 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

301 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

302 i‡(
ªsu…
) {

303 
out
;

306 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

307 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

309 
out
:

310 
	`lock_ªÀa£
(
sc
->
e_lock
);

311  
ªsu…
;

312 
	}
}

319 
	$emu_gësize
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

321 
ªsu…
;

323 
	`lock_acquúe
(
sc
->
e_lock
);

325 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

326 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

327 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

328 i‡(
ªsu…
==0) {

329 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

332 
	`lock_ªÀa£
(
sc
->
e_lock
);

333  
ªsu…
;

334 
	}
}

341 
	$emu_åunc
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, 
off_t
 
Àn
)

343 
ªsu…
;

345 
	`lock_acquúe
(
sc
->
e_lock
);

347 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

348 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

349 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

350 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

352 
	`lock_ªÀa£
(
sc
->
e_lock
);

353  
ªsu…
;

354 
	}
}

366 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
u_öt32_t
 
h™dÀ
, 
isdú
,

367 
emufs_vnode
 **
ªt
);

374 
	$emufs_›í
(
vnode
 *
v
, 
›íÊags
)

384 i‡(
›íÊags
 & 
O_APPEND
) {

385  
EUNIMP
;

388 ()
v
;

391 
	}
}

398 
	$emufs_›ídú
(
vnode
 *
v
, 
›íÊags
)

400 
›íÊags
 & 
O_ACCMODE
) {

401 
O_RDONLY
:

403 
O_WRONLY
:

404 
O_RDWR
:

406  
EISDIR
;

408 i‡(
›íÊags
 & 
O_APPEND
) {

409  
EISDIR
;

412 ()
v
;

414 
	}
}

421 
	$emufs_˛o£
(
vnode
 *
v
)

423 ()
v
;

425 
	}
}

434 
	$emufs_ª˛aim
(
vnode
 *
v
)

436 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

437 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

438 
ix
, 
i
, 
num
, 
ªsu…
;

440 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

441 
	`lock_acquúe
(
ev
->
ev_v
.
vn_cou¡lock
);

443 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 != 1) {

444 
	`lock_ªÀa£
(
ev
->
ev_v
.
vn_cou¡lock
);

445 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

446  
EBUSY
;

453 
	`lock_ªÀa£
(
ev
->
ev_v
.
vn_cou¡lock
);

456 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

457 i‡(
ªsu…
) {

458 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

459  
ªsu…
;

462 
ix
 = -1;

463 
num
 = 
	`¨øy_gënum
(
ef
->
ef_vnodes
);

464 
i
=0; i<
num
; i++) {

465 
emufs_vnode
 *
evx
 = 
	`¨øy_gëguy
(
ef
->
ef_vnodes
, 
i
);

466 i‡(
evx
==
ev
) {

467 
ix
 = 
i
;

471 i‡(
ix
<0) {

472 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

473 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

475 
	`¨øy_ªmove
(
ef
->
ef_vnodes
, 
ix
);

477 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

479 
	`VOP_KILL
(&
ev
->
ev_v
);

481 
	`k‰ì
(
ev
);

483 
	}
}

490 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

492 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

493 
u_öt32_t
 
amt
;

494 
size_t
 
ﬁdªsid
;

495 
ªsu…
;

497 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

499 
uio
->
uio_ªsid
 > 0) {

500 
amt
 = 
uio
->
uio_ªsid
;

501 i‡(
amt
 > 
EMU_MAXIO
) {

502 
amt
 = 
EMU_MAXIO
;

505 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

507 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

508 i‡(
ªsu…
) {

509  
ªsu…
;

512 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

519 
	}
}

526 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

528 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

529 
u_öt32_t
 
amt
;

531 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

533 
amt
 = 
uio
->
uio_ªsid
;

534 i‡(
amt
 > 
EMU_MAXIO
) {

535 
amt
 = 
EMU_MAXIO
;

538  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

539 
	}
}

546 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

548 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

549 
u_öt32_t
 
amt
;

550 
size_t
 
ﬁdªsid
;

551 
ªsu…
;

553 
	`as£π
(
uio
->
uio_rw
==
UIO_WRITE
);

555 
uio
->
uio_ªsid
 > 0) {

556 
amt
 = 
uio
->
uio_ªsid
;

557 i‡(
amt
 > 
EMU_MAXIO
) {

558 
amt
 = 
EMU_MAXIO
;

561 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

563 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

564 i‡(
ªsu…
) {

565  
ªsu…
;

568 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

575 
	}
}

582 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

588 ()
v
;

589 ()
›
;

590 ()
d©a
;

592  
EINVAL
;

593 
	}
}

600 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

602 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

603 
ªsu…
;

605 
	`bzîo
(
°©buf
, (
°©
));

607 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

608 i‡(
ªsu…
) {

609  
ªsu…
;

612 
°©buf
->
°_∆ök
 = 1;

614 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

615 i‡(
ªsu…
) {

616  
ªsu…
;

619 
°©buf
->
°_blocks
 = 0;

622 
	}
}

629 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªsu…
)

631 ()
v
;

632 *
ªsu…
 = 
S_IFREG
;

634 
	}
}

641 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªsu…
)

643 ()
v
;

644 *
ªsu…
 = 
S_IFDIR
;

646 
	}
}

653 
	$emufs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

655 i‡(
pos
<0) {

656  
EINVAL
;

660 ()
v
;

663 
	}
}

670 
	$emufs_fsync
(
vnode
 *
v
)

672 ()
v
;

674 
	}
}

681 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

683 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

684  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

685 
	}
}

692 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
ex˛
, vnodê**
ªt
)

694 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

695 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

696 
emufs_vnode
 *
√wguy
;

697 
u_öt32_t
 
h™dÀ
;

698 
ªsu…
;

699 
isdú
;

701 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 1, 
ex˛
,

702 &
h™dÀ
, &
isdú
);

703 i‡(
ªsu…
) {

704  
ªsu…
;

707 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

708 i‡(
ªsu…
) {

709 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

710  
ªsu…
;

713 *
ªt
 = &
√wguy
->
ev_v
;

715 
	}
}

722 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

724 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

725 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

726 
emufs_vnode
 *
√wguy
;

727 
u_öt32_t
 
h™dÀ
;

728 
ªsu…
;

729 
isdú
;

731 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 0, 0,

732 &
h™dÀ
, &
isdú
);

733 i‡(
ªsu…
) {

734  
ªsu…
;

737 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

738 i‡(
ªsu…
) {

739 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

740  
ªsu…
;

743 *
ªt
 = &
√wguy
->
ev_v
;

745 
	}
}

752 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

753 *
buf
, 
size_t
 
Àn
)

755 *
s
;

757 
s
 = 
	`°ºchr
(
∑th«me
, '/');

758 i‡(
s
==
NULL
) {

760 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

761  
ENAMETOOLONG
;

763 
	`VOP_INCREF
(
dú
);

764 *
ªt
 = 
dú
;

765 
	`°r˝y
(
buf
, 
∑th«me
);

769 *
s
 = 0;

770 
s
++;

771 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

772  
ENAMETOOLONG
;

774 
	`°r˝y
(
buf
, 
s
);

776  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

777 
	}
}

784 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

786 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

787 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

789 i‡(
ev
 =
ef
->
ef_roŸ
) {

796 ()
uio
;

798  
EUNIMP
;

799 
	}
}

809 
	$emufs_nŸdú
()

811  
ENOTDIR
;

812 
	}
}

816 
	$emufs_isdú
()

818  
EISDIR
;

819 
	}
}

823 
	$emufs_unimp
()

825  
EUNIMP
;

826 
	}
}

833 
	#ISDIR
 ((*)
emufs_isdú
)

	)

834 
	#NOTDIR
 ((*)
emufs_nŸdú
)

	)

835 
	#UNIMP
 ((*)
emufs_unimp
)

	)

840 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

841 
VOP_MAGIC
,

843 
emufs_›í
,

844 
emufs_˛o£
,

845 
emufs_ª˛aim
,

847 
emufs_ªad
,

848 
NOTDIR
,

849 
NOTDIR
,

850 
emufs_wrôe
,

851 
emufs_io˘l
,

852 
emufs_°©
,

853 
emufs_fûe_gëty≥
,

854 
emufs_åy£ek
,

855 
emufs_fsync
,

856 
UNIMP
,

857 
emufs_åunˇã
,

858 
NOTDIR
,

860 
NOTDIR
,

861 
NOTDIR
,

862 
NOTDIR
,

863 
NOTDIR
,

864 
NOTDIR
,

865 
NOTDIR
,

866 
NOTDIR
,

868 
NOTDIR
,

869 
NOTDIR
,

875 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

876 
VOP_MAGIC
,

878 
emufs_›ídú
,

879 
emufs_˛o£
,

880 
emufs_ª˛aim
,

882 
ISDIR
,

883 
ISDIR
,

884 
emufs_gëdúíåy
,

885 
ISDIR
,

886 
emufs_io˘l
,

887 
emufs_°©
,

888 
emufs_dú_gëty≥
,

889 
UNIMP
,

890 
ISDIR
,

891 
ISDIR
,

892 
ISDIR
,

893 
emufs_«mefûe
,

895 
emufs_¸ót
,

896 
UNIMP
,

897 
UNIMP
,

898 
UNIMP
,

899 
UNIMP
,

900 
UNIMP
,

901 
UNIMP
,

903 
emufs_lookup
,

904 
emufs_look∑ª¡
,

912 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
u_öt32_t
 
h™dÀ
, 
isdú
,

913 
emufs_vnode
 **
ªt
)

915 
emufs_vnode
 *
ev
;

916 
i
, 
num
, 
ªsu…
;

918 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

920 
num
 = 
	`¨øy_gënum
(
ef
->
ef_vnodes
);

921 
i
=0; i<
num
; i++) {

922 
ev
 = 
	`¨øy_gëguy
(
ef
->
ef_vnodes
, 
i
);

923 i‡(
ev
->
ev_h™dÀ
==
h™dÀ
) {

926 
	`VOP_INCREF
(&
ev
->
ev_v
);

928 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

929 *
ªt
 = 
ev
;

936 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

937 i‡(
ev
==
NULL
) {

938 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

939  
ENOMEM
;

942 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

943 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

945 
ªsu…
 = 
	`VOP_INIT
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

946 &
ef
->
ef_fs
, 
ev
);

947 i‡(
ªsu…
) {

948 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

949 
	`k‰ì
(
ev
);

950  
ªsu…
;

953 
ªsu…
 = 
	`¨øy_add
(
ef
->
ef_vnodes
, 
ev
);

954 i‡(
ªsu…
) {

955 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

957 
	`VOP_KILL
(&
ev
->
ev_v
);

958 
	`k‰ì
(
ev
);

959  
ªsu…
;

962 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

964 *
ªt
 = 
ev
;

966 
	}
}

981 
	$emufs_sync
(
fs
 *fs)

983 ()
fs
;

985 
	}
}

992 
	$emufs_gëvﬁ«me
(
fs
 *fs)

995 ()
fs
;

996  
NULL
;

997 
	}
}

1003 
vnode
 *

1004 
	$emufs_gëroŸ
(
fs
 *fs)

1006 
emufs_fs
 *
ef
;

1008 
	`as£π
(
fs
!=
NULL
);

1010 
ef
 = 
fs
->
fs_d©a
;

1012 
	`as£π
(
ef
!=
NULL
);

1013 
	`as£π
(
ef
->
ef_roŸ
!=
NULL
);

1015 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1016  &
ef
->
ef_roŸ
->
ev_v
;

1017 
	}
}

1024 
	$emufs_unmou¡
(
fs
 *fs)

1027 ()
fs
;

1028  
EBUSY
;

1029 
	}
}

1040 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1042 
emufs_fs
 *
ef
;

1043 
ªsu…
;

1045 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1046 i‡(
ef
==
NULL
) {

1047  
ENOMEM
;

1050 
ef
->
ef_fs
.
fs_sync
 = 
emufs_sync
;

1051 
ef
->
ef_fs
.
fs_gëvﬁ«me
 = 
emufs_gëvﬁ«me
;

1052 
ef
->
ef_fs
.
fs_gëroŸ
 = 
emufs_gëroŸ
;

1053 
ef
->
ef_fs
.
fs_unmou¡
 = 
emufs_unmou¡
;

1054 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1056 
ef
->
ef_emu
 = 
sc
;

1057 
ef
->
ef_roŸ
 = 
NULL
;

1058 
ef
->
ef_vnodes
 = 
	`¨øy_¸óã
();

1059 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1060 
	`k‰ì
(
ef
);

1061  
ENOMEM
;

1064 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1065 i‡(
ªsu…
) {

1066 
	`k‰ì
(
ef
);

1067  
ªsu…
;

1070 
	`as£π
(
ef
->
ef_roŸ
!=
NULL
);

1072 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1073 i‡(
ªsu…
) {

1074 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1075 
	`k‰ì
(
ef
);

1077  
ªsu…
;

1078 
	}
}

1092 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1094 
«me
[32];

1096 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1097 i‡(
sc
->
e_lock
 =
NULL
) {

1098  
ENOMEM
;

1100 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1101 i‡(
sc
->
e_£m
 =
NULL
) {

1102 
	`lock_de°roy
(
sc
->
e_lock
);

1103 
sc
->
e_lock
 = 
NULL
;

1104  
ENOMEM
;

1106 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1108 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1110  
	`emufs_addtovfs
(
sc
, 
«me
);

1111 
	}
}

	@dev/lamebus/emu.h

1 #i‚de‡
_LAMEBUS_EMU_H_


2 
	#_LAMEBUS_EMU_H_


	)

4 
	#EMU_MAXIO
 16384

	)

5 
	#EMU_ROOTHANDLE
 0

	)

13 
	semu_so·c
 {

15 *
	me_busd©a
;

16 
u_öt32_t
 
	me_bu•os
;

17 
	me_unô
;

20 
lock
 *
	me_lock
;

21 
£m≠h‹e
 *
	me_£m
;

22 *
	me_iobuf
;

25 
u_öt32_t
 
	me_ªsu…
;

29 
emu_úq
( *);

	@dev/lamebus/emu_att.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<œmebus/œmebus.h
>

8 
	~<œmebus/emu.h
>

9 
	~"autoc⁄f.h
"

12 
	#LOW_VERSION
 1

	)

14 
	#HIGH_VERSION
 1

	)

16 
emu_so·c
 *

17 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

19 
emu_so·c
 *
es
;

20 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

21 
LOW_VERSION
, 
HIGH_VERSION
);

22 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
es
 = 
	`kmÆloc
((
emu_so·c
));

27 i‡(
es
==
NULL
) {

28  
NULL
;

31 
es
->
e_busd©a
 = 
sc
;

32 
es
->
e_bu•os
 = 
¶Ÿ
;

33 
es
->
e_unô
 = 
emuno
;

35 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

36 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

38  
es
;

39 
	}
}

	@dev/lamebus/lamebus.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<machöe/•l.h
>

8 
	~<œmebus/œmebus.h
>

11 
	#CFGREG_VID
 0

	)

12 
	#CFGREG_DID
 4

	)

13 
	#CFGREG_DRL
 8

	)

16 
	#CTLREG_RAMSZ
 0x200

	)

17 
	#CTLREG_IRQS
 0x204

	)

18 
	#CTLREG_PWR
 0x208

	)

25 
ölöe


26 
u_öt32_t


27 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
u_öt32_t
 
off£t
)

30 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

31  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

32 
	}
}

38 
ölöe


40 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
u_öt32_t
 
off£t
,

41 
u_öt32_t
 
vÆ
)

43 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

44 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

45 
	}
}

51 
ölöe


52 
u_öt32_t


53 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
u_öt32_t
 
off£t
)

56  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

57 
	}
}

63 
ölöe


65 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
u_öt32_t
 
off£t
, u_öt32_à
vÆ
)

67 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

68 
	}
}

82 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

83 
u_öt32_t
 
víd‹id
, u_öt32_à
devi˚id
,

84 
u_öt32_t
 
lowvî
, u_öt32_à
highvî
)

86 
¶Ÿ
;

87 
u_öt32_t
 
vÆ
;

88 
•l
;

95 
•l
 = 
	`•lhigh
();

97 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

98 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

103 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

104 i‡(
vÆ
!=
víd‹id
) {

109 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

110 i‡(
vÆ
 !
devi˚id
) {

115 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

116 i‡(
vÆ
 < 
lowvî
 || vÆ > 
highvî
) {

123 
	`•lx
(
•l
);

124  
¶Ÿ
;

129 
	`•lx
(
•l
);

131 
	}
}

139 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

141 
•l
;

143 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

144 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

146 
•l
 = 
	`•lhigh
();

148 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

149 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

152 
sc
->
ls_¶Ÿsöu£
 |
mask
;

154 
	`•lx
(
•l
);

155 
	}
}

161 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

163 
•l
;

165 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

166 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

168 
•l
 = 
	`•lhigh
();

170 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

171 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

174 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

176 
	`•lx
(
•l
);

177 
	}
}

184 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

185 *
devd©a
,

186 (*
úqfunc
)(*
devd©a
))

188 
•l
;

190 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

191 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

193 
•l
 = 
	`•lhigh
();

195 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

196 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

197 
¶Ÿ
);

200 
	`as£π
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

201 
	`as£π
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

203 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

204 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

206 
	`•lx
(
•l
);

207 
	}
}

214 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

216 
•l
;

218 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

219 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

221 
•l
 = 
	`•lhigh
();

223 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

224 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

225 
¶Ÿ
);

228 
	`as£π
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

230 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

231 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

233 
	`•lx
(
•l
);

234 
	}
}

241 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

254 
¶Ÿ
;

255 
u_öt32_t
 
mask
;

256 
u_öt32_t
 
úqs
;

259 
duds
=0;

260 
duds_this_time
=0;

263 
	`as£π
(
cur•l
>0);

266 
	`as£π
(
œmebus
!=
NULL
);

272 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

274 i‡(
úqs
==0) {

278 
	`k¥ötf
("lamebus: stray interrupt\n");

279 
duds
++;

280 
duds_this_time
++;

301 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

302 i‡((
úqs
 & 
mask
)==0) {

311 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

315 
duds
++;

316 
duds_this_time
++;

320 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

325 
duds
++;

326 
duds_this_time
++;

335 
œmebus
->
ls_úqfuncs
[
¶Ÿ
]÷amebus->
ls_devd©a
[slot]);

342 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

364 i‡(
duds_this_time
==0 && 
duds
>0) {

365 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

366 
duds
 = 0;

369 i‡(
duds
 > 10000) {

370 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

372 
	}
}

378 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

384 
	`•lhigh
();

385 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

388 
	`˝u_hÆt
();

389 
	}
}

394 
u_öt32_t


395 
	$œmebus_ømsize
()

404  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

405 
	}
}

411 
œmebus_so·c
 *

412 
	$œmebus_öô
()

414 
œmebus_so·c
 *
œmebus
;

415 
i
;

418 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

419 i‡(
œmebus
==
NULL
) {

420 
	`∑nic
("lamebus_init: Out of memory\n");

426 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

428 
i
=0; i<
LB_NSLOTS
; i++) {

429 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

430 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

433  
œmebus
;

434 
	}
}

	@dev/lamebus/lamebus.h

1 #i‚de‡
_LAMEBUS_H_


2 
	#_LAMEBUS_H_


	)

10 
	#LB_VENDOR_CS161
 1

	)

13 
	#LBCS161_BUSCTL
 1

	)

14 
	#LBCS161_TIMER
 2

	)

15 
	#LBCS161_DISK
 3

	)

16 
	#LBCS161_SERIAL
 4

	)

17 
	#LBCS161_SCREEN
 5

	)

18 
	#LBCS161_NET
 6

	)

19 
	#LBCS161_EMUFS
 7

	)

20 
	#LBCS161_TRACE
 8

	)

21 
	#LBCS161_RANDOM
 9

	)

24 
	#LB_CONTROLLER_SLOT
 31

	)

27 
	#LB_NSLOTS
 32

	)

30 
	#LB_CONFIG_SIZE
 1024

	)

33 
	#LB_SLOT_SIZE
 65536

	)

36 (*
	tlb_úqfunc
)(*
	tdevd©a
);

41 
	sœmebus_so·c
 {

43 
u_öt32_t
 
ls_¶Ÿsöu£
;

44 *
ls_devd©a
[
LB_NSLOTS
];

45 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

51 
œmebus_so·c
 *
	`œmebus_öô
();

60 
	`œmebus_¥obe
(
œmebus_so·c
 *,

61 
u_öt32_t
 
víd‹id
, u_öt32_à
devi˚id
,

62 
u_öt32_t
 
lowvî
, u_öt32_à
highvî
);

69 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

70 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

75 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

76 *
devd©a
,

77 (*
úqfunc
)(*
devd©a
));

81 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

86 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

91 
	`œmebus_powîoff
(
œmebus_so·c
 *);

96 
u_öt32_t
 
	`œmebus_ømsize
();

102 
u_öt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

103 
u_öt32_t
 
off£t
);

104 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

105 
u_öt32_t
 
off£t
, u_öt32_à
vÆ
);

110 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

111 
u_öt32_t
 
off£t
);

	@dev/lamebus/lhd.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<synch.h
>

8 
	~<kîn/î∫o.h
>

9 
	~<machöe/bus.h
>

10 
	~<uio.h
>

11 
	~<vfs.h
>

12 
	~<œmebus/lhd.h
>

13 
	~"autoc⁄f.h
"

16 
	#LHD_REG_NSECT
 0

	)

17 
	#LHD_REG_STAT
 4

	)

18 
	#LHD_REG_SECT
 8

	)

19 
	#LHD_REG_RPM
 12

	)

22 
	#LHD_IDLE
 0

	)

23 
	#LHD_WORKING
 1

	)

24 
	#LHD_OK
 4

	)

25 
	#LHD_INVSECT
 12

	)

26 
	#LHD_MEDIA
 20

	)

27 
	#LHD_ISWRITE
 2

	)

28 
	#LHD_STATEMASK
 0x1d

	)

31 
	#LHD_BUFFER
 32768

	)

37 
ölöe


38 
u_öt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
u_öt32_t
 
ªg
)

40  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

41 
	}
}

47 
ölöe


48 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
u_öt32_t
 
ªg
, u_öt32_à
vÆ
)

50 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

51 
	}
}

57 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

59 
code
 & 
LHD_STATEMASK
) {

60 
LHD_OK
:  0;

61 
LHD_INVSECT
:  
EINVAL
;

62 
LHD_MEDIA
:  
EIO
;

64 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

65  
EAGAIN
;

66 
	}
}

74 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

76 
lh
->
lh_ªsu…
 = 
îr
;

77 
	`V
(
lh
->
lh_d⁄e
);

78 
	}
}

86 
	$lhd_úq
(*
vlh
)

88 
lhd_so·c
 *
lh
 = 
vlh
;

89 
u_öt32_t
 
vÆ
;

91 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

93 
vÆ
 & 
LHD_STATEMASK
) {

94 
LHD_IDLE
:

95 
LHD_WORKING
:

97 
LHD_OK
:

98 
LHD_INVSECT
:

99 
LHD_MEDIA
:

100 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

101 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

104 
	}
}

111 
	$lhd_›í
(
devi˚
 *
d
, 
›íÊags
)

116 ()
d
;

117 ()
›íÊags
;

120 
	}
}

127 
	$lhd_˛o£
(
devi˚
 *
d
)

132 ()
d
;

135 
	}
}

142 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

147 ()
d
;

148 ()
›
;

149 ()
d©a
;

150  
EIOCTL
;

151 
	}
}

161 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

163 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

164 
	}
}

172 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

174 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

176 
u_öt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

177 
u_öt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

178 
u_öt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

179 
u_öt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

180 
u_öt32_t
 
i
;

181 
u_öt32_t
 
°©vÆ
 = 
LHD_WORKING
;

182 
ªsu…
;

185 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

186  
EINVAL
;

190 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

191  
EINVAL
;

195 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

196 
°©vÆ
 |
LHD_ISWRITE
;

200 
i
=0; i<
Àn
; i++) {

203 
	`P
(
lh
->
lh_˛ór
);

209 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

210 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

211 i‡(
ªsu…
) {

212 
	`V
(
lh
->
lh_˛ór
);

213  
ªsu…
;

218 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

221 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

224 
	`P
(
lh
->
lh_d⁄e
);

227 
ªsu…
 = 
lh
->
lh_ªsu…
;

233 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

234 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

238 
	`V
(
lh
->
lh_˛ór
);

241 i‡(
ªsu…
) {

242  
ªsu…
;

247 
	}
}

253 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

255 
«me
[32];

258 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

261 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

264 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

265 i‡(
lh
->
lh_˛ór
 =
NULL
) {

266  
ENOMEM
;

268 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

269 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

270 
	`£m_de°roy
(
lh
->
lh_˛ór
);

271 
lh
->
lh_˛ór
 = 
NULL
;

272  
ENOMEM
;

276 
lh
->
lh_dev
.
d_›í
 = 
lhd_›í
;

277 
lh
->
lh_dev
.
d_˛o£
 = 
lhd_˛o£
;

278 
lh
->
lh_dev
.
d_io
 = 
lhd_io
;

279 
lh
->
lh_dev
.
d_io˘l
 = 
lhd_io˘l
;

280 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

281 
LHD_REG_NSECT
);

282 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

283 
lh
->
lh_dev
.
d_d©a
 =Üh;

286  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

287 
	}
}

	@dev/lamebus/lhd.h

1 #i‚de‡
_LAMEBUS_LHD_H_


2 
	#_LAMEBUS_LHD_H_


	)

4 
	~<dev.h
>

9 
	#LHD_SECTSIZE
 512

	)

14 
	slhd_so·c
 {

16 *
	mlh_busd©a
;

17 
u_öt32_t
 
	mlh_bu•os
;

18 
	mlh_unô
;

24 *
	mlh_buf
;

25 
	mlh_ªsu…
;

26 
£m≠h‹e
 *
	mlh_˛ór
;

27 
£m≠h‹e
 *
	mlh_d⁄e
;

29 
devi˚
 
	mlh_dev
;

33 
lhd_úq
( *);

	@dev/lamebus/lhd_att.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<œmebus/œmebus.h
>

7 
	~<œmebus/lhd.h
>

8 
	~"autoc⁄f.h
"

11 
	#LOW_VERSION
 2

	)

13 
	#HIGH_VERSION
 2

	)

15 
lhd_so·c
 *

16 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

18 
lhd_so·c
 *
lh
;

19 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

20 
LOW_VERSION
, 
HIGH_VERSION
);

21 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

27 i‡(
lh
==
NULL
) {

29  
NULL
;

33 
lh
->
lh_busd©a
 = 
sc
;

34 
lh
->
lh_bu•os
 = 
¶Ÿ
;

35 
lh
->
lh_unô
 = 
lhdno
;

38 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

39 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

41  
lh
;

42 
	}
}

	@dev/lamebus/lnet.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

7 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

9 ()
sc
;

11 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

13  
ENODEV
;

14 
	}
}

	@dev/lamebus/lnet_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~"autoc⁄f.h
"

7 
	#LOW_VERSION
 1

	)

9 
	#HIGH_VERSION
 1

	)

11 
 ë_so·c
 *

12 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

14 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

15 
LOW_VERSION
, 
HIGH_VERSION
);

16 i‡(
¶Ÿ
 < 0) {

17  
NULL
;

20 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

22  
NULL
;

23 
	}
}

	@dev/lamebus/lrandom.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<uio.h
>

7 
	~<machöe/bus.h
>

8 
	~<œmebus/Ã™dom.h
>

9 
	~"autoc⁄f.h
"

12 
	#LR_REG_RAND
 0

	)

15 
	#LR_RANDMAX
 0xffffffff

	)

18 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

20 ()
Ã™domno
;

21 ()
Ã
;

23 
	}
}

25 
u_öt32_t


26 
	$Ã™dom_øndom
(*
devd©a
)

28 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

29  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

30 
	}
}

32 
u_öt32_t


33 
	$Ã™dom_øndmax
(*
devd©a
)

35 ()
devd©a
;

36  
LR_RANDMAX
;

37 
	}
}

40 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

42 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

43 
ªsu…
;

45 
u_öt32_t
 
vÆ
;

46 
buf
[(
u_öt32_t
)];

47 } 
u
;

49 
uio
->
uio_ªsid
 > 0) {

50 
u
.
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

51 
LR_REG_RAND
);

52 
ªsu…
 = 
	`uiomove
(
u
.
buf
, (u.buf), 
uio
);

53 i‡(
ªsu…
) {

54  
ªsu…
;

59 
	}
}

	@dev/lamebus/lrandom.h

1 #i‚de‡
_LAMEBUS_LRANDOM_H_


2 
	#_LAMEBUS_LRANDOM_H_


	)

4 
	guio
;

6 
	sÃ™dom_so·c
 {

8 *
	mÃ_bus
;

9 
u_öt32_t
 
	mÃ_bu•os
;

13 
u_öt32_t
 
Ã™dom_øndom
–*
devd©a
);

14 
u_öt32_t
 
Ã™dom_øndmax
–*
devd©a
);

15 
Ã™dom_ªad
–*, 
uio
 *);

	@dev/lamebus/lrandom_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~<œmebus/Ã™dom.h
>

5 
	~"autoc⁄f.h
"

8 
	#LOW_VERSION
 1

	)

10 
	#HIGH_VERSION
 1

	)

12 
Ã™dom_so·c
 *

13 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

15 
Ã™dom_so·c
 *
Ã
;

16 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

17 
LOW_VERSION
, 
HIGH_VERSION
);

18 i‡(
¶Ÿ
 < 0) {

19  
NULL
;

22 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

23 i‡(
Ã
==
NULL
) {

24  
NULL
;

27 ()
Ã™domno
;

29 
Ã
->
Ã_bus
 = 
sc
;

30 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

32 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

34  
Ã
;

35 
	}
}

	@dev/lamebus/lscreen.c

7 
	~<ty≥s.h
>

8 
	~<lib.h
>

9 
	~<machöe/bus.h
>

10 
	~<machöe/•l.h
>

11 
	~<œmebus/ls¸ìn.h
>

12 
	~"autoc⁄f.h
"

15 
	#LSCR_REG_POSN
 0

	)

16 
	#LSCR_REG_SIZE
 4

	)

17 
	#LSCR_REG_CHAR
 8

	)

18 
	#LSCR_REG_RIRQ
 12

	)

21 
	#LSCR_IRQ_ENABLE
 1

	)

22 
	#LSCR_IRQ_ACTIVE
 2

	)

25 
	#LSCR_SCREEN
 32768

	)

29 
ölöe


31 
	$•lôxy
(
u_öt32_t
 
xy
, *
x
, *
y
)

33 *
x
 = 
xy
 >> 16;

34 *
y
 = 
xy
 & 0xffff;

35 
	}
}

39 
ölöe


40 
u_öt32_t


41 
	$mîgexy
(
x
, 
y
)

43 
u_öt32_t
 
vÆ
 = 
x
;

44  (
vÆ
 << 16Ë| 
y
;

45 
	}
}

53 
	$ls¸ìn_úq
(*
vsc
)

55 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

56 
u_öt32_t
 
ch
, 
x
;

58 
	`as£π
(
cur•l
>0);

59 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

60 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

61 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

62 
LSCR_REG_CHAR
);

63 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

64 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

66 i‡(
sc
->
ls_öput
) {

67 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

70 
	}
}

79 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

81 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

86 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

87 
sc
->
ls_width
 * (sc->
ls_height
-1));

88 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

89 
sc
->
ls_width
);

92 
sc
->
ls_cy
++;

94 
sc
->
ls_cx
=0;

95 
	}
}

102 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

104 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

105 
	`ls¸ìn_√wlöe
(
sc
);

108 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

109 
sc
->
ls_cx
++;

110 
	}
}

117 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

119 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

120 
ccx
, 
ccy
;

122 
ch
) {

123 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

124 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

132 
ccx
 = 
sc
->
ls_cx
;

133 
ccy
 = 
sc
->
ls_cy
;

134 i‡(
ccx
==
sc
->
ls_width
) {

135 
ccx
--;

139 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

140 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

141 
	}
}

149 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

151 
u_öt32_t
 
vÆ
;

153 ()
ls¸ì¬o
;

159 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

160 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

165 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

166 
LSCR_REG_SIZE
);

167 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

172 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

173 
LSCR_REG_POSN
);

174 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

179 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

180 
LSCR_SCREEN
);

183 
	}
}

	@dev/lamebus/lscreen.h

1 #i‚de‡
_LAMEBUS_LSCREEN_H_


2 
	#_LAMEBUS_LSCREEN_H_


	)

7 
	sls¸ìn_so·c
 {

9 
	mls_width
, 
	mls_height
;

10 
	mls_cx
, 
	mls_cy
;

11 *
	mls_s¸ìn
;

14 *
	mls_busd©a
;

15 
u_öt32_t
 
	mls_bu•os
;

18 *
	mls_devd©a
;

19 (*
	mls_°¨t
)(*
	mdevd©a
);

20 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

24 
ls¸ìn_úq
–*
sc
);

27 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@dev/lamebus/lscreen_att.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<œmebus/œmebus.h
>

7 
	~<œmebus/ls¸ìn.h
>

8 
	~"autoc⁄f.h
"

11 
	#LOW_VERSION
 1

	)

13 
	#HIGH_VERSION
 1

	)

15 
ls¸ìn_so·c
 *

16 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

18 
ls¸ìn_so·c
 *
ls
;

19 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

20 
LOW_VERSION
, 
HIGH_VERSION
);

21 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

27 i‡(
ls
==
NULL
) {

29  
NULL
;

33 
ls
->
ls_busd©a
 = 
sc
;

34 
ls
->
ls_bu•os
 = 
¶Ÿ
;

37 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

38 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

40  
ls
;

41 
	}
}

	@dev/lamebus/lser.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<machöe/bus.h
>

5 
	~<œmebus/l£r.h
>

6 
	~"autoc⁄f.h
"

9 
	#LSER_REG_CHAR
 0

	)

10 
	#LSER_REG_WIRQ
 4

	)

11 
	#LSER_REG_RIRQ
 8

	)

14 
	#LSER_IRQ_ENABLE
 1

	)

15 
	#LSER_IRQ_ACTIVE
 2

	)

18 
	$l£r_úq
(*
vsc
)

20 
l£r_so·c
 *
sc
 = 
vsc
;

21 
u_öt32_t
 
x
;

22 
˛ór_to_wrôe
=0;

23 
gŸ_a_ªad
=0;

24 
u_öt32_t
 
ch
 = 0;

26 
	`as£π
(
cur•l
>0);

28 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

29 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

30 
x
 = 
LSER_IRQ_ENABLE
;

31 
sc
->
ls_wbusy
 = 0;

32 
˛ór_to_wrôe
 = 1;

33 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

34 
LSER_REG_WIRQ
, 
x
);

37 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

38 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

39 
x
 = 
LSER_IRQ_ENABLE
;

40 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

41 
LSER_REG_CHAR
);

42 
gŸ_a_ªad
 = 1;

43 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

44 
LSER_REG_RIRQ
, 
x
);

47 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

48 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

50 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

51 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

53 
	}
}

56 
	$l£r_wrôe
(*
vls
, 
ch
)

58 
l£r_so·c
 *
ls
 = 
vls
;

59 
•l
 = 
	`•lhigh
();

61 i‡(
ls
->
ls_wbusy
) {

73 
	`∑nic
("lser: Not clearÅo write\n");

75 
ls
->
ls_wbusy
 = 1;

77 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

79 
	`•lx
(
•l
);

80 
	}
}

84 
	$l£r_•ö_u¡û_wrôe
(
l£r_so·c
 *
sc
)

86 
u_öt32_t
 
vÆ
;

87 
	`as£π
(
cur•l
>0);

89 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

90 
LSER_REG_WIRQ
);

92 (
vÆ
 & 
LSER_IRQ_ACTIVE
)==0);

93 
	}
}

96 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

98 
l£r_so·c
 *
sc
 = 
vsc
;

99 
•l
 = 
	`•lhigh
();

100 
úq≥ndög
=0;

102 i‡(
sc
->
ls_wbusy
) {

103 
úq≥ndög
 = 1;

104 
	`l£r_•ö_u¡û_wrôe
(
sc
);

106 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

107 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

111 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

114 
	`l£r_•ö_u¡û_wrôe
(
sc
);

121 i‡(!
úq≥ndög
) {

122 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

123 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

126 
	`•lx
(
•l
);

127 
	}
}

130 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

132 ()
l£∫o
;

138 
sc
->
ls_wbusy
 = 0;

140 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

141 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

142 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

143 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

146 
	}
}

	@dev/lamebus/lser.h

1 #i‚de‡
_LAMEBUS_LSER_H_


2 
	#_LAMEBUS_LSER_H_


	)

4 
	sl£r_so·c
 {

6 vﬁ©ûê
	mls_wbusy
;

9 *
	mls_busd©a
;

10 
u_öt32_t
 
	mls_bu•os
;

13 *
	mls_devd©a
;

14 (*
	mls_°¨t
)(*
	mdevd©a
);

15 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

19 
l£r_úq
–*
sc
);

22 
l£r_wrôe
–*
sc
, 
ch
);

23 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

	@dev/lamebus/lser_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~<œmebus/l£r.h
>

5 
	~"autoc⁄f.h
"

8 
	#LOW_VERSION
 1

	)

10 
	#HIGH_VERSION
 1

	)

12 
l£r_so·c
 *

13 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

15 
l£r_so·c
 *
ls
;

16 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

17 
LOW_VERSION
, 
HIGH_VERSION
);

18 i‡(
¶Ÿ
 < 0) {

19  
NULL
;

22 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

23 i‡(
ls
==
NULL
) {

24  
NULL
;

27 ()
l£∫o
;

29 
ls
->
ls_busd©a
 = 
sc
;

30 
ls
->
ls_bu•os
 = 
¶Ÿ
;

32 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

33 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

35  
ls
;

36 
	}
}

	@dev/lamebus/ltimer.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<˛ock.h
>

7 
	~<machöe/bus.h
>

8 
	~<œmebus/…imî.h
>

9 
	~"autoc⁄f.h
"

12 
	#LT_REG_SEC
 0

	)

13 
	#LT_REG_NSEC
 4

	)

14 
	#LT_REG_ROE
 8

	)

15 
	#LT_REG_IRQ
 12

	)

16 
	#LT_REG_COUNT
 16

	)

17 
	#LT_REG_SPKR
 20

	)

20 
	#LT_GRANULARITY
 1000000

	)

23 
	ghave˛ock
=0;

29 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

35 i‡(!
have˛ock
) {

36 
have˛ock
 = 1;

37 
…
->
…_h¨d˛ock
 = 1;

45 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

46 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

47 
LT_GRANULARITY
/
HZ
);

49 
	`k¥ötf
("\nh¨d˛ock o¿…imî%d (%u hz)", 
…imîno
, 
HZ
);

55 
…
->
…_h¨d˛ock
 = 0;

59 
	}
}

65 
	$…imî_úq
(*
v…
)

67 
…imî_so·c
 *
…
 = 
v…
;

68 
u_öt32_t
 
vÆ
;

70 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

71 i‡(
vÆ
) {

76 i‡(
…
->
…_h¨d˛ock
) {

77 
	`h¨d˛ock
();

80 
	}
}

88 
	$…imî_bìp
(*
v…
)

90 
…imî_so·c
 *
…
 = 
v…
;

92 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

93 
	}
}

101 
	$…imî_gëtime
(*
v…
, 
time_t
 *
£cs
, 
u_öt32_t
 *
n£cs
)

103 
…imî_so·c
 *
…
 = 
v…
;

104 
u_öt32_t
 
£cs1
, 
£cs2
;

117 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

118 
LT_REG_SEC
);

119 *
n£cs
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

120 
LT_REG_NSEC
);

121 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

122 
LT_REG_SEC
);

124 i‡(*
n£cs
 < 5000000) {

125 *
£cs
 = 
£cs2
;

128 *
£cs
 = 
£cs1
;

130 
	}
}

	@dev/lamebus/ltimer.h

1 #i‚de‡
_LAMEBUS_LTIMER_H_


2 
	#_LAMEBUS_LTIMER_H_


	)

7 
	s…imî_so·c
 {

9 
	m…_h¨d˛ock
;

12 *
	m…_bus
;

13 
u_öt32_t
 
	m…_bu•os
;

18 
…imî_úq
–*
…
);

21 
…imî_bìp
–*
devd©a
);

22 
…imî_gëtime
–*
devd©a
,

23 
time_t
 *
£cs
, 
u_öt32_t
 *
n£cs
);

	@dev/lamebus/ltimer_att.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<œmebus/œmebus.h
>

7 
	~<œmebus/…imî.h
>

8 
	~"autoc⁄f.h
"

11 
	#LOW_VERSION
 1

	)

13 
	#HIGH_VERSION
 1

	)

15 
…imî_so·c
 *

16 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

18 
…imî_so·c
 *
…
;

19 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

20 
LOW_VERSION
, 
HIGH_VERSION
);

21 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
…
 = 
	`kmÆloc
((
…imî_so·c
));

27 i‡(
…
==
NULL
) {

29  
NULL
;

32 ()
…imîno
;

35 
…
->
…_bus
 = 
sc
;

36 
…
->
…_bu•os
 = 
¶Ÿ
;

39 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

40 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

42  
…
;

43 
	}
}

	@dev/lamebus/ltrace.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/bus.h
>

4 
	~<œmebus/…ø˚.h
>

5 
	~"autoc⁄f.h
"

8 
	#LTRACE_REG_TRON
 0

	)

9 
	#LTRACE_REG_TROFF
 4

	)

10 
	#LTRACE_REG_DEBUG
 8

	)

11 
	#LTRACE_REG_DUMP
 12

	)

13 
…ø˚_so·c
 *
	gthe_åa˚
;

16 
	$…ø˚_⁄
(
u_öt32_t
 
code
)

18 i‡(
the_åa˚
 !
NULL
) {

19 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

20 
LTRACE_REG_TRON
, 
code
);

22 
	}
}

25 
	$…ø˚_off
(
u_öt32_t
 
code
)

27 i‡(
the_åa˚
 !
NULL
) {

28 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

29 
LTRACE_REG_TROFF
, 
code
);

31 
	}
}

34 
	$…ø˚_debug
(
u_öt32_t
 
code
)

36 i‡(
the_åa˚
 !
NULL
) {

37 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

38 
LTRACE_REG_DEBUG
, 
code
);

40 
	}
}

43 
	$…ø˚_dump
(
u_öt32_t
 
code
)

45 i‡(
the_åa˚
 !
NULL
) {

46 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

47 
LTRACE_REG_DUMP
, 
code
);

49 
	}
}

52 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

54 ()
…ø˚no
;

55 
the_åa˚
 = 
sc
;

57 
	}
}

	@dev/lamebus/ltrace.h

1 #i‚de‡
_LAMEBUS_LTRACE_H_


2 
	#_LAMEBUS_LTRACE_H_


	)

4 
	s…ø˚_so·c
 {

6 *
	m…_busd©a
;

7 
u_öt32_t
 
	m…_bu•os
;

33 
…ø˚_⁄
(
u_öt32_t
 
code
);

34 
…ø˚_off
(
u_öt32_t
 
code
);

35 
…ø˚_debug
(
u_öt32_t
 
code
);

36 
…ø˚_dump
(
u_öt32_t
 
code
);

	@dev/lamebus/ltrace_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~<œmebus/…ø˚.h
>

5 
	~"autoc⁄f.h
"

8 
	#LOW_VERSION
 1

	)

10 
	#HIGH_VERSION
 1

	)

12 
…ø˚_so·c
 *

13 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

15 
…ø˚_so·c
 *
…
;

16 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

17 
LOW_VERSION
, 
HIGH_VERSION
);

18 i‡(
¶Ÿ
 < 0) {

19  
NULL
;

22 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

23 i‡(
…
==
NULL
) {

24  
NULL
;

27 ()
…ø˚no
;

29 
…
->
…_busd©a
 = 
sc
;

30 
…
->
…_bu•os
 = 
¶Ÿ
;

32 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

34  
…
;

35 
	}
}

	@dev/lamebus/random_lrandom.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/øndom.h
>

9 
	~<œmebus/Ã™dom.h
>

10 
	~"autoc⁄f.h
"

12 
øndom_so·c
 *

13 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

15 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

16 i‡(
rs
==
NULL
) {

17  
NULL
;

20 ()
øndomno
;

22 
rs
->
rs_devd©a
 = 
ls
;

23 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

24 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

25 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

27  
rs
;

28 
	}
}

	@dev/lamebus/rtclock_ltimer.c

12 
	~<ty≥s.h
>

13 
	~<lib.h
>

14 
	~<gíîic/π˛ock.h
>

15 
	~<œmebus/…imî.h
>

16 
	~"autoc⁄f.h
"

18 
π˛ock_so·c
 *

19 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

25 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

26 i‡(
πc
==
NULL
) {

28  
NULL
;

31 ()
π˛ockno
;

33 
πc
->
πc_devd©a
 = 
ls
;

34 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

36  
πc
;

37 
	}
}

	@fs/sfs/sfs_fs.c

7 
	~<ty≥s.h
>

8 
	~<lib.h
>

9 
	~<kîn/î∫o.h
>

10 
	~<¨øy.h
>

11 
	~<bôm≠.h
>

12 
	~<uio.h
>

13 
	~<dev.h
>

14 
	~<sfs.h
>

15 
	~<vfs.h
>

18 
	#SFS_FS_BITMAPSIZE
(
sfs
Ë
	`SFS_BITMAPSIZE
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

19 
	#SFS_FS_BITBLOCKS
(
sfs
Ë
	`SFS_BITBLOCKS
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

41 
	$sfs_m≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

43 
u_öt32_t
 
j
, 
m≠size
;

44 *
bôd©a
;

45 
ªsu…
;

48 
m≠size
 = 
	`SFS_FS_BITBLOCKS
(
sfs
);

51 
bôd©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

54 
j
=0; j<
m≠size
; j++) {

57 *
±r
 = 
bôd©a
 + 
j
*
SFS_BLOCKSIZE
;

60 i‡(
rw
 =
UIO_READ
) {

61 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

64 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

68 i‡(
ªsu…
) {

69  
ªsu…
;

73 
	}
}

82 
	$sfs_sync
(
fs
 *fs)

84 
sfs_fs
 *
sfs
;

85 
i
, 
num
, 
ªsu…
;

117 
sfs
 = 
fs
->
fs_d©a
;

120 
num
 = 
	`¨øy_gënum
(
sfs
->
sfs_vnodes
);

121 
i
=0; i<
num
; i++) {

122 
sfs_vnode
 *
sv
 = 
	`¨øy_gëguy
(
sfs
->
sfs_vnodes
, 
i
);

123 
	`VOP_FSYNC
(&
sv
->
sv_v
);

127 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

128 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_WRITE
);

129 i‡(
ªsu…
) {

130  
ªsu…
;

132 
sfs
->
sfs_‰ìm≠dúty
 = 0;

136 i‡(
sfs
->
sfs_su≥rdúty
) {

137 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

138 i‡(
ªsu…
) {

139  
ªsu…
;

141 
sfs
->
sfs_su≥rdúty
 = 0;

145 
	}
}

154 
	$sfs_gëvﬁ«me
(
fs
 *fs)

156 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

157  
sfs
->
sfs_su≥r
.
•_vﬁ«me
;

158 
	}
}

167 
	$sfs_unmou¡
(
fs
 *fs)

169 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

172 i‡(
	`¨øy_gënum
(
sfs
->
sfs_vnodes
)>0) {

173  
EBUSY
;

177 
	`as£π
(
sfs
->
sfs_su≥rdúty
==0);

178 
	`as£π
(
sfs
->
sfs_‰ìm≠dúty
==0);

181 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

182 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

185 ()
sfs
->
sfs_devi˚
;

188 
	`k‰ì
(
sfs
);

192 
	}
}

210 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

212 
ªsu…
;

213 
sfs_fs
 *
sfs
;

216 ()
›ti⁄s
;

221 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

222 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

223 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

233 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

234  
ENXIO
;

238 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

239 i‡(
sfs
==
NULL
) {

240  
ENOMEM
;

244 
sfs
->
sfs_vnodes
 = 
	`¨øy_¸óã
();

245 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

246 
	`k‰ì
(
sfs
);

247  
ENOMEM
;

251 
sfs
->
sfs_devi˚
 = 
dev
;

254 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

255 i‡(
ªsu…
) {

256 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

257 
	`k‰ì
(
sfs
);

258  
ªsu…
;

263 i‡(
sfs
->
sfs_su≥r
.
•_magic
 !
SFS_MAGIC
) {

264 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

266 
sfs
->
sfs_su≥r
.
•_magic
,

267 
SFS_MAGIC
);

268 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

269 
	`k‰ì
(
sfs
);

270  
EINVAL
;

273 i‡(
sfs
->
sfs_su≥r
.
•_nblocks
 > 
dev
->
d_blocks
) {

274 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

275 
sfs
->
sfs_su≥r
.
•_nblocks
, 
dev
->
d_blocks
);

279 
sfs
->
sfs_su≥r
.
•_vﬁ«me
[(sfs->sfs_super.sp_volname)-1] = 0;

282 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_BITMAPSIZE
(sfs));

283 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

284 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

285 
	`k‰ì
(
sfs
);

286  
ENOMEM
;

288 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_READ
);

289 i‡(
ªsu…
) {

290 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

291 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

292 
	`k‰ì
(
sfs
);

293  
ªsu…
;

297 
sfs
->
sfs_absfs
.
fs_sync
 = 
sfs_sync
;

298 
sfs
->
sfs_absfs
.
fs_gëvﬁ«me
 = 
sfs_gëvﬁ«me
;

299 
sfs
->
sfs_absfs
.
fs_gëroŸ
 = 
sfs_gëroŸ
;

300 
sfs
->
sfs_absfs
.
fs_unmou¡
 = 
sfs_unmou¡
;

301 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

304 
sfs
->
sfs_su≥rdúty
 = 0;

305 
sfs
->
sfs_‰ìm≠dúty
 = 0;

308 *
ªt
 = &
sfs
->
sfs_absfs
;

311 
	}
}

318 
	$sfs_mou¡
(c⁄° *
devi˚
)

320  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

321 
	}
}

	@fs/sfs/sfs_io.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<uio.h
>

5 
	~<sfs.h
>

6 
	~<dev.h
>

18 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

20 
ªsu…
;

21 
åõs
=0;

23 
	`DEBUG
(
DB_SFS
, "sfs: %s %u\n",

24 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

25 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

27 
ªåy
:

28 
ªsu…
 = 
sfs
->
sfs_devi˚
->
	`d_io
(sfs->sfs_devi˚, 
uio
);

29 i‡(
ªsu…
 =
EINVAL
) {

35 
	`∑nic
("sfs: d_ioÑeturned EINVAL\n");

37 i‡(
ªsu…
 =
EIO
) {

38 i‡(
åõs
 == 0) {

39 
åõs
++;

40 
	`k¥ötf
("sfs: block %u I/OÉrror,Ñetrying\n",

41 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

42 
ªåy
;

44 i‡(
åõs
 < 10) {

45 
åõs
++;

46 
ªåy
;

49 
	`k¥ötf
("sfs: block %u I/OÉrror, giving upáfter "

51 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

54  
ªsu…
;

55 
	}
}

58 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
)

60 
uio
 
ku
;

61 
	`SFSUIO
(&
ku
, 
d©a
, 
block
, 
UIO_READ
);

62  
	`sfs_rwblock
(
sfs
, &
ku
);

63 
	}
}

66 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
)

68 
uio
 
ku
;

69 
	`SFSUIO
(&
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

70  
	`sfs_rwblock
(
sfs
, &
ku
);

71 
	}
}

	@fs/sfs/sfs_vnode.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<synch.h
>

9 
	~<¨øy.h
>

10 
	~<bôm≠.h
>

11 
	~<kîn/°©.h
>

12 
	~<kîn/î∫o.h
>

13 
	~<kîn/uni°d.h
>

14 
	~<uio.h
>

15 
	~<dev.h
>

16 
	~<sfs.h
>

20 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
öo
, 
ty≥
,

21 
sfs_vnode
 **
ªt
);

30 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
block
)

33 
zîos
[
SFS_BLOCKSIZE
];

34  
	`sfs_wblock
(
sfs
, 
zîos
, 
block
);

35 
	}
}

40 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

42 i‡(
sv
->
sv_dúty
) {

43 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

44 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &
sv
->
sv_i
, sv->
sv_öo
);

45 i‡(
ªsu…
) {

46  
ªsu…
;

48 
sv
->
sv_dúty
 = 0;

51 
	}
}

62 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
u_öt32_t
 *
diskblock
)

64 
ªsu…
;

66 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

67 i‡(
ªsu…
) {

68  
ªsu…
;

70 
sfs
->
sfs_‰ìm≠dúty
 = 1;

72 i‡(*
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

73 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

77  
	`sfs_˛órblock
(
sfs
, *
diskblock
);

78 
	}
}

85 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
diskblock
)

87 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

88 
sfs
->
sfs_‰ìm≠dúty
 = 1;

89 
	}
}

96 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
diskblock
)

98 i‡(
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

99 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

100 
diskblock
);

102  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

103 
	}
}

117 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
u_öt32_t
 
fûeblock
, 
dﬂŒoc
,

118 
u_öt32_t
 *
diskblock
)

127 
u_öt32_t
 
idbuf
[
SFS_DBPERIDB
];

129 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

130 
u_öt32_t
 
block
;

131 
u_öt32_t
 
idblock
;

132 
u_öt32_t
 
idnum
, 
idoff
;

133 
ªsu…
;

135 
	`as£π
((
idbuf
)==
SFS_BLOCKSIZE
);

140 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

144 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

149 i‡(
block
==0 && 
dﬂŒoc
) {

150 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

151 i‡(
ªsu…
) {

152  
ªsu…
;

156 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

157 
sv
->
sv_dúty
 = 1;

163 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

164 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

165 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

167 *
diskblock
 = 
block
;

177 
fûeblock
 -
SFS_NDIRECT
;

180 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

181 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

187 i‡(
idnum
 > 0) {

188  
EINVAL
;

192 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

194 i‡(
idblock
==0 && !
dﬂŒoc
) {

200 *
diskblock
 = 0;

203 i‡(
idblock
==0) {

210 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

211 i‡(
ªsu…
) {

212  
ªsu…
;

216 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

219 
sv
->
sv_dúty
 = 1;

222 
	`bzîo
(
idbuf
, (idbuf));

228 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

229 i‡(
ªsu…
) {

230  
ªsu…
;

235 
block
 = 
idbuf
[
idoff
];

238 i‡(
block
==0 && 
dﬂŒoc
) {

239 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 
idbuf
[
idoff
] = 
block
;

248 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

249 i‡(
ªsu…
) {

250  
ªsu…
;

255 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

256 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

257 
block
, 
fûeblock
, 
sv
->
sv_öo
);

259 *
diskblock
 = 
block
;

261 
	}
}

279 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

280 
u_öt32_t
 
skù°¨t
, u_öt32_à
Àn
)

289 
iobuf
[
SFS_BLOCKSIZE
];

291 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

292 
u_öt32_t
 
diskblock
;

293 
u_öt32_t
 
fûeblock
;

294 
ªsu…
;

297 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

299 
	`as£π
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

302 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

305 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

306 i‡(
ªsu…
) {

307  
ªsu…
;

310 i‡(
diskblock
 == 0) {

315 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

316 
	`bzîo
(
iobuf
, (iobuf));

322 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
iobuf
, 
diskblock
);

323 i‡(
ªsu…
) {

324  
ªsu…
;

331 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

332 i‡(
ªsu…
) {

333  
ªsu…
;

339 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

340 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
iobuf
, 
diskblock
);

341 i‡(
ªsu…
) {

342  
ªsu…
;

347 
	}
}

354 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

356 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

357 
u_öt32_t
 
diskblock
;

358 
u_öt32_t
 
fûeblock
;

359 
ªsu…
;

360 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

361 
off_t
 
ßveoff
;

362 
off_t
 
diskoff
;

363 
off_t
 
ßvîes
;

364 
off_t
 
diskªs
;

367 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

370 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

371 i‡(
ªsu…
) {

372  
ªsu…
;

375 i‡(
diskblock
 == 0) {

382 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

383  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

390 
ßveoff
 = 
uio
->
uio_off£t
;

391 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

392 
uio
->
uio_off£t
 = 
diskoff
;

397 
	`as£π
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

398 
ßvîes
 = 
uio
->
uio_ªsid
;

399 
diskªs
 = 
SFS_BLOCKSIZE
;

400 
uio
->
uio_ªsid
 = 
diskªs
;

402 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

408 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

409 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

411  
ªsu…
;

412 
	}
}

419 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

421 
u_öt32_t
 
blkoff
;

422 
u_öt32_t
 
nblocks
, 
i
;

423 
ªsu…
 = 0;

424 
u_öt32_t
 
exå¨esid
 = 0;

431 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

432 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

433 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

435 i‡(
uio
->
uio_off£t
 >
size
) {

440 i‡(
ídpos
 > 
size
) {

441 
exå¨esid
 = 
ídpos
 - 
size
;

442 
	`as£π
(
uio
->
uio_ªsid
 > 
exå¨esid
);

443 
uio
->
uio_ªsid
 -
exå¨esid
;

450 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

451 i‡(
blkoff
 != 0) {

453 
u_öt32_t
 
skù
 = 
blkoff
;

456 
u_öt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

459 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

460 
Àn
 = 
uio
->
uio_ªsid
;

464 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

465 i‡(
ªsu…
) {

466 
out
;

471 i‡(
uio
->
uio_ªsid
==0) {

472 
out
;

478 
	`as£π
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

479 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

480 
i
=0; i<
nblocks
; i++) {

481 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

482 i‡(
ªsu…
) {

483 
out
;

490 
	`as£π
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

492 i‡(
uio
->
uio_ªsid
 > 0) {

493 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

494 i‡(
ªsu…
) {

495 
out
;

499 
out
:

502 i‡(
uio
->
uio_rw
 =
UIO_WRITE
 &&

503 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

504 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

505 
sv
->
sv_dúty
 = 1;

509 
uio
->
uio_ªsid
 +
exå¨esid
;

512  
ªsu…
;

513 
	}
}

525 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

527 
uio
 
ku
;

528 
off_t
 
a˘uÆpos
;

529 
ªsu…
;

532 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

535 
	`mk_kuio
(&
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_READ
);

538 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

539 i‡(
ªsu…
) {

540  
ªsu…
;

544 i‡(
ku
.
uio_ªsid
 > 0) {

545 
	`∑nic
("sfs:Ñóddú: Sh‹àíåy (öodê%u)\n", 
sv
->
sv_öo
);

550 
	}
}

558 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

560 
uio
 
ku
;

561 
off_t
 
a˘uÆpos
;

562 
ªsu…
;

565 
	`as£π
(
¶Ÿ
>=0);

566 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

569 
	`mk_kuio
(&
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_WRITE
);

572 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

573 i‡(
ªsu…
) {

574  
ªsu…
;

578 i‡(
ku
.
uio_ªsid
 > 0) {

579 
	`∑nic
("sfs: wrôedú: Sh‹àwrôê(öÿ%u)\n", 
sv
->
sv_öo
);

584 
	}
}

593 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

595 
off_t
 
size
;

597 
	`as£π
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

599 
size
 = 
sv
->
sv_i
.
sfi_size
;

600 i‡(
size
 % (
sfs_dú
) != 0) {

601 
	`∑nic
("sfs: directory %u: Invalid size %u\n",

602 
sv
->
sv_öo
, 
size
);

605  
size
 / (
sfs_dú
);

606 
	}
}

616 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

617 
u_öt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

619 
sfs_dú
 
tsd
;

620 
found
 = 0;

621 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

622 
i
, 
ªsu…
;

625 
i
=0; i<
√¡rõs
; i++) {

628 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, &
tsd
, 
i
);

629 i‡(
ªsu…
) {

630  
ªsu…
;

632 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

634 i‡(
em±y¶Ÿ
 !
NULL
) {

635 *
em±y¶Ÿ
 = 
i
;

640 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

641 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

644 
	`as£π
(
found
==0);

646 
found
 = 1;

647 i‡(
¶Ÿ
 !
NULL
) {

648 *
¶Ÿ
 = 
i
;

650 i‡(
öo
 !
NULL
) {

651 *
öo
 = 
tsd
.
sfd_öo
;

657  
found
 ? 0 : 
ENOENT
;

658 
	}
}

666 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
u_öt32_t
 
öo
, *
¶Ÿ
)

668 
em±y¶Ÿ
 = -1;

669 
ªsu…
;

670 
sfs_dú
 
sd
;

673 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

674 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

675  
ªsu…
;

677 i‡(
ªsu…
==0) {

678  
EEXIST
;

681 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

682  
ENAMETOOLONG
;

686 i‡(
em±y¶Ÿ
 < 0) {

687 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

691 
	`bzîo
(&
sd
, (sd));

692 
sd
.
sfd_öo
 = 
öo
;

693 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

696 i‡(
¶Ÿ
) {

697 *
¶Ÿ
 = 
em±y¶Ÿ
;

701  
	`sfs_wrôedú
(
sv
, &
sd
, 
em±y¶Ÿ
);

703 
	}
}

710 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

712 
sfs_dú
 
sd
;

715 
	`bzîo
(&
sd
, (sd));

716 
sd
.
sfd_öo
 = 
SFS_NOINO
;

719  
	`sfs_wrôedú
(
sv
, &
sd
, 
¶Ÿ
);

720 
	}
}

728 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

729 
sfs_vnode
 **
ªt
,

730 *
¶Ÿ
)

732 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

733 
u_öt32_t
 
öo
;

734 
ªsu…
;

736 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

737 i‡(
ªsu…
) {

738  
ªsu…
;

741 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

742 i‡(
ªsu…
) {

743  
ªsu…
;

746 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

747 
	`∑nic
("sfs: Link count of file %u found in dir %u is 0\n",

748 (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

752 
	}
}

763 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

765 
u_öt32_t
 
öo
;

766 
ªsu…
;

773 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

774 i‡(
ªsu…
) {

775  
ªsu…
;

782  
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

783 
	}
}

794 
	$sfs_›í
(
vnode
 *
v
, 
›íÊags
)

804 i‡(
›íÊags
 & 
O_APPEND
) {

805  
EUNIMP
;

808 ()
v
;

811 
	}
}

819 
	$sfs_›ídú
(
vnode
 *
v
, 
›íÊags
)

821 
›íÊags
 & 
O_ACCMODE
) {

822 
O_RDONLY
:

824 
O_WRONLY
:

825 
O_RDWR
:

827  
EISDIR
;

829 i‡(
›íÊags
 & 
O_APPEND
) {

830  
EISDIR
;

833 ()
v
;

835 
	}
}

845 
	$sfs_˛o£
(
vnode
 *
v
)

848  
	`VOP_FSYNC
(
v
);

849 
	}
}

858 
	$sfs_ª˛aim
(
vnode
 *
v
)

860 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

861 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

862 
ix
, 
i
, 
num
, 
ªsu…
;

869 
	`lock_acquúe
(
v
->
vn_cou¡lock
);

870 i‡(
v
->
vn_ªfcou¡
 != 1) {

873 
	`as£π
(
v
->
vn_ªfcou¡
>1);

874 
v
->
vn_ªfcou¡
--;

876 
	`lock_ªÀa£
(
v
->
vn_cou¡lock
);

877  
EBUSY
;

879 
	`lock_ªÀa£
(
v
->
vn_cou¡lock
);

883 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

884 
ªsu…
 = 
	`VOP_TRUNCATE
(&
sv
->
sv_v
, 0);

885 i‡(
ªsu…
) {

886  
ªsu…
;

891 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

892 i‡(
ªsu…
) {

893  
ªsu…
;

897 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

898 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

902 
ix
 = -1;

903 
num
 = 
	`¨øy_gënum
(
sfs
->
sfs_vnodes
);

904 
i
=0; i<
num
; i++) {

905 
sfs_vnode
 *
sv2
 = 
	`¨øy_gëguy
(
sfs
->
sfs_vnodes
, 
i
);

906 i‡(
sv2
==
sv
) {

907 
ix
 = 
i
;

911 i‡(
ix
<0) {

912 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

913 
sv
->
sv_öo
);

915 
	`¨øy_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

917 
	`VOP_KILL
(&
sv
->
sv_v
);

920 
	`k‰ì
(
sv
);

924 
	}
}

931 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

933 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

934 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

935  
	`sfs_io
(
sv
, 
uio
);

936 
	}
}

943 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

945 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

946 
	`as£π
(
uio
->
uio_rw
==
UIO_WRITE
);

947  
	`sfs_io
(
sv
, 
uio
);

948 
	}
}

955 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

961 ()
v
;

962 ()
›
;

963 ()
d©a
;

965  
EINVAL
;

966 
	}
}

973 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

975 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

976 
ªsu…
;

979 
	`bzîo
(
°©buf
, (
°©
));

981 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

982 i‡(
ªsu…
) {

983  
ªsu…
;

986 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

989 
°©buf
->
°_∆ök
 = 0;

990 
°©buf
->
°_blocks
 = 0;

993 
	}
}

1000 
	$sfs_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªt
)

1002 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1003 
sv
->
sv_i
.
sfi_ty≥
) {

1004 
SFS_TYPE_FILE
:

1005 *
ªt
 = 
S_IFREG
;

1007 
SFS_TYPE_DIR
:

1008 *
ªt
 = 
S_IFDIR
;

1011 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

1012 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

1013  
EINVAL
;

1014 
	}
}

1025 
	$sfs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

1027 i‡(
pos
<0) {

1028  
EINVAL
;

1032 ()
v
;

1035 
	}
}

1043 
	$sfs_fsync
(
vnode
 *
v
)

1045 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1046  
	`sfs_sync_öode
(
sv
);

1047 
	}
}

1054 
	$sfs_mm≠
(
vnode
 *
v
 )

1056 ()
v
;

1057  
EUNIMP
;

1058 
	}
}

1065 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

1074 
u_öt32_t
 
idbuf
[
SFS_DBPERIDB
];

1076 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1077 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

1080 
u_öt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

1082 
u_öt32_t
 
i
, 
j
, 
block
;

1083 
u_öt32_t
 
idblock
, 
ba£block
, 
highblock
;

1084 
ªsu…
;

1085 
ha¢⁄zîo
, 
iddúty
;

1087 
	`as£π
((
idbuf
)==
SFS_BLOCKSIZE
);

1093 
i
=0; i<
SFS_NDIRECT
; i++) {

1094 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

1095 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

1096 
	`sfs_b‰ì
(
sfs
, 
block
);

1097 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

1098 
sv
->
sv_dúty
 = 1;

1103 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

1106 
ba£block
 = 
SFS_NDIRECT
;

1109 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

1111 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

1115 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

1116 i‡(
ªsu…
) {

1117  
ªsu…
;

1120 
ha¢⁄zîo
 = 0;

1121 
iddúty
 = 0;

1122 
j
=0; j<
SFS_DBPERIDB
; j++) {

1124 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

1125 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

1126 
idbuf
[
j
] = 0;

1127 
iddúty
 = 1;

1130 i‡(
idbuf
[
j
]!=0) {

1131 
ha¢⁄zîo
=1;

1135 i‡(!
ha¢⁄zîo
) {

1137 
	`sfs_b‰ì
(
sfs
, 
idblock
);

1138 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

1139 
sv
->
sv_dúty
 = 1;

1141 i‡(
iddúty
) {

1143 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

1144 i‡(
ªsu…
) {

1145  
ªsu…
;

1151 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

1154 
sv
->
sv_dúty
 = 1;

1157 
	}
}

1167 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

1169 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

1170 
	`as£π
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1174 ()
uio
;

1177 
	}
}

1185 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
ex˛
, vnodê**
ªt
)

1187 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

1188 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1189 
sfs_vnode
 *
√wguy
;

1190 
u_öt32_t
 
öo
;

1191 
ªsu…
;

1194 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

1195 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

1196  
ªsu…
;

1200 i‡(
ªsu…
==0 && 
ex˛
) {

1201  
EEXIST
;

1204 i‡(
ªsu…
==0) {

1206 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

1207 i‡(
ªsu…
) {

1208  
ªsu…
;

1210 *
ªt
 = &
√wguy
->
sv_v
;

1215 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

1216 i‡(
ªsu…
) {

1217  
ªsu…
;

1221 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

1222 i‡(
ªsu…
) {

1223 
	`VOP_DECREF
(&
√wguy
->
sv_v
);

1224  
ªsu…
;

1228 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

1231 
√wguy
->
sv_dúty
 = 1;

1233 *
ªt
 = &
√wguy
->
sv_v
;

1236 
	}
}

1245 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

1247 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1248 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

1249 
ªsu…
;

1251 
	`as£π
(
fûe
->
vn_fs
 =
dú
->vn_fs);

1254 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

1255 i‡(
ªsu…
) {

1256  
ªsu…
;

1260 
f
->
sv_i
.
sfi_lökcou¡
++;

1261 
f
->
sv_dúty
 = 1;

1264 
	}
}

1271 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

1273 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1274 
sfs_vnode
 *
vi˘im
;

1275 
¶Ÿ
;

1276 
ªsu…
;

1279 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

1280 i‡(
ªsu…
) {

1281  
ªsu…
;

1285 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1286 i‡(
ªsu…
==0) {

1288 
	`as£π
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

1289 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

1290 
vi˘im
->
sv_dúty
 = 1;

1294 
	`VOP_DECREF
(&
vi˘im
->
sv_v
);

1296  
ªsu…
;

1297 
	}
}

1307 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

1308 
vnode
 *
d2
, c⁄° *
n2
)

1310 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

1311 
sfs_vnode
 *
g1
;

1312 
¶Ÿ1
, 
¶Ÿ2
;

1313 
ªsu…
, 
ªsu…2
;

1315 
	`as£π
(
d1
==
d2
);

1316 
	`as£π
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1319 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

1320 i‡(
ªsu…
) {

1321  
ªsu…
;

1325 
	`as£π
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

1335 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

1336 i‡(
ªsu…
) {

1337 
puke
;

1341 
g1
->
sv_i
.
sfi_lökcou¡
++;

1342 
g1
->
sv_dúty
 = 1;

1345 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

1346 i‡(
ªsu…
) {

1347 
puke_h¨dî
;

1354 
	`as£π
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

1355 
g1
->
sv_i
.
sfi_lökcou¡
--;

1356 
g1
->
sv_dúty
 = 1;

1359 
	`VOP_DECREF
(&
g1
->
sv_v
);

1363 
puke_h¨dî
:

1367 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

1368 i‡(
ªsu…2
) {

1369 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

1370 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

1371 
	`°ªº‹
(
ªsu…2
));

1372 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

1374 
g1
->
sv_i
.
sfi_lökcou¡
--;

1375 
puke
:

1377 
	`VOP_DECREF
(&
g1
->
sv_v
);

1378  
ªsu…
;

1379 
	}
}

1390 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1391 *
buf
, 
size_t
 
buÊí
)

1393 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1395 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1396  
ENOTDIR
;

1399 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1400  
ENAMETOOLONG
;

1402 
	`°r˝y
(
buf
, 
∑th
);

1404 
	`VOP_INCREF
(&
sv
->
sv_v
);

1405 *
ªt
 = &
sv
->
sv_v
;

1408 
	}
}

1418 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1420 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1421 
sfs_vnode
 *
föÆ
;

1422 
ªsu…
;

1424 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1425  
ENOTDIR
;

1428 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

1429 i‡(
ªsu…
) {

1430  
ªsu…
;

1433 *
ªt
 = &
föÆ
->
sv_v
;

1436 
	}
}

1442 
	$sfs_nŸdú
()

1444  
ENOTDIR
;

1445 
	}
}

1449 
	$sfs_isdú
()

1451  
EISDIR
;

1452 
	}
}

1456 
	$sfs_unimp
()

1458  
EUNIMP
;

1459 
	}
}

1467 
	#ISDIR
 ((*)
sfs_isdú
)

	)

1468 
	#NOTDIR
 ((*)
sfs_nŸdú
)

	)

1469 
	#UNIMP
 ((*)
sfs_unimp
)

	)

1474 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1475 
VOP_MAGIC
,

1477 
sfs_›í
,

1478 
sfs_˛o£
,

1479 
sfs_ª˛aim
,

1481 
sfs_ªad
,

1482 
NOTDIR
,

1483 
NOTDIR
,

1484 
sfs_wrôe
,

1485 
sfs_io˘l
,

1486 
sfs_°©
,

1487 
sfs_gëty≥
,

1488 
sfs_åy£ek
,

1489 
sfs_fsync
,

1490 
sfs_mm≠
,

1491 
sfs_åunˇã
,

1492 
NOTDIR
,

1494 
NOTDIR
,

1495 
NOTDIR
,

1496 
NOTDIR
,

1497 
NOTDIR
,

1498 
NOTDIR
,

1499 
NOTDIR
,

1500 
NOTDIR
,

1502 
NOTDIR
,

1503 
NOTDIR
,

1509 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1510 
VOP_MAGIC
,

1512 
sfs_›ídú
,

1513 
sfs_˛o£
,

1514 
sfs_ª˛aim
,

1516 
ISDIR
,

1517 
ISDIR
,

1518 
UNIMP
,

1519 
ISDIR
,

1520 
sfs_io˘l
,

1521 
sfs_°©
,

1522 
sfs_gëty≥
,

1523 
UNIMP
,

1524 
sfs_fsync
,

1525 
ISDIR
,

1526 
ISDIR
,

1527 
sfs_«mefûe
,

1529 
sfs_¸ót
,

1530 
UNIMP
,

1531 
UNIMP
,

1532 
sfs_lök
,

1533 
sfs_ªmove
,

1534 
UNIMP
,

1535 
sfs_ª«me
,

1537 
sfs_lookup
,

1538 
sfs_look∑ª¡
,

1547 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
öo
, 
f‹˚ty≥
,

1548 
sfs_vnode
 **
ªt
)

1550 
sfs_vnode
 *
sv
;

1551 c⁄° 
vnode_›s
 *
›s
 = 
NULL
;

1552 
i
, 
num
;

1553 
ªsu…
;

1556 
num
 = 
	`¨øy_gënum
(
sfs
->
sfs_vnodes
);

1559 
i
=0; i<
num
; i++) {

1560 
sv
 = 
	`¨øy_gëguy
(
sfs
->
sfs_vnodes
, 
i
);

1563 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

1564 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

1565 
sv
->
sv_öo
);

1568 i‡(
sv
->
sv_öo
==
öo
) {

1572 
	`as£π
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

1574 
	`VOP_INCREF
(&
sv
->
sv_v
);

1575 *
ªt
 = 
sv
;

1582 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

1583 i‡(
sv
==
NULL
) {

1584  
ENOMEM
;

1588 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

1589 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

1590 
öo
);

1594 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &
sv
->
sv_i
, 
öo
);

1595 i‡(
ªsu…
) {

1596 
	`k‰ì
(
sv
);

1597  
ªsu…
;

1601 
sv
->
sv_dúty
 = 0;

1608 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

1609 
	`as£π
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

1610 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

1611 
sv
->
sv_dúty
 = 1;

1617 
sv
->
sv_i
.
sfi_ty≥
) {

1618 
SFS_TYPE_FILE
:

1619 
›s
 = &
sfs_fûe›s
;

1621 
SFS_TYPE_DIR
:

1622 
›s
 = &
sfs_dú›s
;

1625 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

1627 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

1631 
ªsu…
 = 
	`VOP_INIT
(&
sv
->
sv_v
, 
›s
, &
sfs
->
sfs_absfs
, sv);

1632 i‡(
ªsu…
) {

1633 
	`k‰ì
(
sv
);

1634  
ªsu…
;

1638 
sv
->
sv_öo
 = 
öo
;

1641 
ªsu…
 = 
	`¨øy_add
(
sfs
->
sfs_vnodes
, 
sv
);

1642 i‡(
ªsu…
) {

1643 
	`VOP_KILL
(&
sv
->
sv_v
);

1644 
	`k‰ì
(
sv
);

1645  
ªsu…
;

1649 *
ªt
 = 
sv
;

1651 
	}
}

1657 
vnode
 *

1658 
	$sfs_gëroŸ
(
fs
 *fs)

1660 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

1661 
sfs_vnode
 *
sv
;

1662 
ªsu…
;

1664 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOT_LOCATION
, 
SFS_TYPE_INVAL
, &
sv
);

1665 i‡(
ªsu…
) {

1666 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

1669  &
sv
->
sv_v
;

1670 
	}
}

	@fs/vfs/device.c

7 
	~<ty≥s.h
>

8 
	~<lib.h
>

9 
	~<synch.h
>

10 
	~<kîn/î∫o.h
>

11 
	~<kîn/uni°d.h
>

12 
	~<kîn/°©.h
>

13 
	~<vnode.h
>

14 
	~<uio.h
>

15 
	~<dev.h
>

24 
	$dev_›í
(
vnode
 *
v
, 
Êags
)

26 
devi˚
 *
d
 = 
v
->
vn_d©a
;

28 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

29  
EINVAL
;

32  
d
->
	`d_›í
(d, 
Êags
);

33 
	}
}

41 
	$dev_˛o£
(
vnode
 *
v
)

43 
devi˚
 *
d
 = 
v
->
vn_d©a
;

44  
d
->
	`d_˛o£
(d);

45 
	}
}

53 
	$dev_ª˛aim
(
vnode
 *
v
)

55 ()
v
;

58 
	}
}

65 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

67 
devi˚
 *
d
 = 
v
->
vn_d©a
;

68 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

69  
d
->
	`d_io
(d, 
uio
);

70 
	}
}

78 
	$nuŒ_io
(
vnode
 *
v
, 
uio
 *uio)

80 ()
v
;

81 ()
uio
;

82  
EINVAL
;

83 
	}
}

90 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

92 
devi˚
 *
d
 = 
v
->
vn_d©a
;

93 
	`as£π
(
uio
->
uio_rw
 =
UIO_WRITE
);

94  
d
->
	`d_io
(d, 
uio
);

95 
	}
}

102 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

104 
devi˚
 *
d
 = 
v
->
vn_d©a
;

105  
d
->
	`d_io˘l
(d, 
›
, 
d©a
);

106 
	}
}

115 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

117 
devi˚
 *
d
 = 
v
->
vn_d©a
;

118 
ªsu…
;

120 
	`bzîo
(
°©buf
, (
°©
));

122 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

123 i‡(
ªsu…
) {

124  
ªsu…
;

127 
°©buf
->
°_∆ök
 = 1;

128 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

130 i‡(
d
->
d_blocks
 > 0) {

131 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

134 
°©buf
->
°_size
 = 0;

138 
	}
}

147 
	$dev_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªt
)

149 
devi˚
 *
d
 = 
v
->
vn_d©a
;

150 i‡(
d
->
d_blocks
 > 0) {

151 *
ªt
 = 
S_IFBLK
;

154 *
ªt
 = 
S_IFCHR
;

157 
	}
}

166 
	$dev_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

168 
devi˚
 *
d
 = 
v
->
vn_d©a
;

169 i‡(
d
->
d_blocks
 > 0) {

170 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

172  
EINVAL
;

174 i‡(
pos
 < 0) {

181  
EINVAL
;

183 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

185  
EINVAL
;

189  
ESPIPE
;

192 
	}
}

199 
	$nuŒ_fsync
(
vnode
 *
v
)

201 ()
v
;

203 
	}
}

211 
	$dev_mm≠
(
vnode
 *
v
 )

213 ()
v
;

214  
EUNIMP
;

215 
	}
}

222 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

224 
devi˚
 *
d
 = 
v
->
vn_d©a
;

229 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

233  
EINVAL
;

234 
	}
}

244 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

252 ()
v
;

253 ()
uio
;

256 
	}
}

264 
	$nuŒ_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
ex˛
, vnodê**
ªsu…
)

266 ()
v
;

267 ()
«me
;

268 ()
ex˛
;

269 ()
ªsu…
;

270  
ENOTDIR
;

271 
	}
}

275 
	$nuŒ_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

277 ()
v
;

278 ()
c⁄ã¡s
;

279 ()
«me
;

280  
ENOTDIR
;

281 
	}
}

285 
	$nuŒ_«me›
(
vnode
 *
v
, c⁄° *
«me
)

287 ()
v
;

288 ()
«me
;

289  
ENOTDIR
;

290 
	}
}

294 
	$nuŒ_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
fûe
)

296 ()
v
;

297 ()
«me
;

298 ()
fûe
;

299  
ENOTDIR
;

300 
	}
}

304 
	$nuŒ_ª«me
(
vnode
 *
v
, c⁄° *
n1
, vnodê*
v2
, c⁄° *
n2
)

306 ()
v
;

307 ()
n1
;

308 ()
v2
;

309 ()
n2
;

310  
ENOTDIR
;

311 
	}
}

328 
	$dev_lookup
(
vnode
 *
dú
,

329 *
∑th«me
, 
vnode
 **
ªsu…
)

336 i‡(
	`°æí
(
∑th«me
)>0) {

337  
ENOENT
;

339 
	`VOP_INCREF
(
dú
);

340 *
ªsu…
 = 
dú
;

342 
	}
}

346 
	$dev_look∑ª¡
(
vnode
 *
dú
,

347 *
∑th«me
, 
vnode
 **
ªsu…
,

348 *
«mebuf
, 
size_t
 
buÊí
)

353 ()
dú
;

354 ()
∑th«me
;

355 ()
ªsu…
;

356 ()
«mebuf
;

357 ()
buÊí
;

359  
ENOTDIR
;

360 
	}
}

365 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

366 
VOP_MAGIC
,

368 
dev_›í
,

369 
dev_˛o£
,

370 
dev_ª˛aim
,

371 
dev_ªad
,

372 
nuŒ_io
,

373 
nuŒ_io
,

374 
dev_wrôe
,

375 
dev_io˘l
,

376 
dev_°©
,

377 
dev_gëty≥
,

378 
dev_åy£ek
,

379 
nuŒ_fsync
,

380 
dev_mm≠
,

381 
dev_åunˇã
,

382 
dev_«mefûe
,

383 
nuŒ_¸ót
,

384 
nuŒ_symlök
,

385 
nuŒ_«me›
,

386 
nuŒ_lök
,

387 
nuŒ_«me›
,

388 
nuŒ_«me›
,

389 
nuŒ_ª«me
,

390 
dev_lookup
,

391 
dev_look∑ª¡
,

397 
vnode
 *

398 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

400 
ªsu…
;

401 
vnode
 *
v
;

403 
v
 = 
	`kmÆloc
((
vnode
));

404 i‡(
v
==
NULL
) {

405  
NULL
;

408 
ªsu…
 = 
	`VOP_INIT
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

409 i‡(
ªsu…
 != 0) {

410 
	`∑nic
("While creating vnode for device: VOP_INIT: %s\n",

411 
	`°ªº‹
(
ªsu…
));

414  
v
;

415 
	}
}

	@fs/vfs/devnull.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<vfs.h
>

9 
	~<dev.h
>

10 
	~<uio.h
>

15 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

17 ()
dev
;

18 ()
›íÊags
;

21 
	}
}

26 
	$nuŒ˛o£
(
devi˚
 *
dev
)

28 ()
dev
;

30 
	}
}

35 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

42 ()
dev
;

44 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

45 
uio
->
uio_ªsid
 = 0;

49 
	}
}

54 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

60 ()
dev
;

61 ()
›
;

62 ()
d©a
;

64  
EINVAL
;

65 
	}
}

71 
	$devnuŒ_¸óã
()

73 
ªsu…
;

74 
devi˚
 *
dev
;

76 
dev
 = 
	`kmÆloc
((*dev));

77 i‡(
dev
==
NULL
) {

78 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

82 
dev
->
d_›í
 = 
nuŒ›í
;

83 
dev
->
d_˛o£
 = 
nuŒ˛o£
;

84 
dev
->
d_io
 = 
nuŒio
;

85 
dev
->
d_io˘l
 = 
nuŒio˘l
;

87 
dev
->
d_blocks
 = 0;

88 
dev
->
d_blocksize
 = 1;

90 
dev
->
d_d©a
 = 
NULL
;

92 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

93 i‡(
ªsu…
) {

94 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

96 
	}
}

	@fs/vfs/vfscwd.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/°©.h
>

8 
	~<lib.h
>

9 
	~<vfs.h
>

10 
	~<fs.h
>

11 
	~<vnode.h
>

12 
	~<uio.h
>

13 
	~<thªad.h
>

14 
	~<cuπhªad.h
>

23 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

25 
rv
 = 0;

27 i‡(
cuπhªad
->
t_cwd
!=
NULL
) {

28 
	`VOP_INCREF
(
cuπhªad
->
t_cwd
);

29 *
ªt
 = 
cuπhªad
->
t_cwd
;

32 
rv
 = 
ENOENT
;

35  
rv
;

36 
	}
}

43 
	$vfs_£tcurdú
(
vnode
 *
dú
)

45 
vnode
 *
ﬁd
;

46 
u_öt32_t
 
vty≥
;

47 
ªsu…
;

49 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

50 i‡(
ªsu…
) {

51  
ªsu…
;

53 i‡(!
	`S_ISDIR
(
vty≥
)) {

54  
ENOTDIR
;

57 
	`VOP_INCREF
(
dú
);

59 
ﬁd
 = 
cuπhªad
->
t_cwd
;

60 
cuπhªad
->
t_cwd
 = 
dú
;

62 i‡(
ﬁd
!=
NULL
) {

63 
	`VOP_DECREF
(
ﬁd
);

67 
	}
}

73 
	$vfs_˛órcurdú
()

75 
vnode
 *
ﬁd
;

77 
ﬁd
 = 
cuπhªad
->
t_cwd
;

78 
cuπhªad
->
t_cwd
 = 
NULL
;

80 i‡(
ﬁd
!=
NULL
) {

81 
	`VOP_DECREF
(
ﬁd
);

85 
	}
}

92 
	$vfs_chdú
(*
∑th
)

94 
vnode
 *
vn
;

95 
ªsu…
;

97 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

98 i‡(
ªsu…
) {

99  
ªsu…
;

101 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

102 
	`VOP_DECREF
(
vn
);

103  
ªsu…
;

104 
	}
}

112 
	$vfs_gëcwd
(
uio
 *uio)

114 
vnode
 *
cwd
;

115 
ªsu…
;

116 c⁄° *
«me
;

117 
cﬁ⁄
=':';

119 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

121 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

122 i‡(
ªsu…
) {

123  
ªsu…
;

127 
	`as£π
(
cwd
->
vn_fs
 !
NULL
);

129 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

130 i‡(
«me
==
NULL
) {

131 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

133 
	`as£π
(
«me
 !
NULL
);

135 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

136 i‡(
ªsu…
) {

137 
out
;

139 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

140 i‡(
ªsu…
) {

141 
out
;

144 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

146 
out
:

148 
	`VOP_DECREF
(
cwd
);

149  
ªsu…
;

150 
	}
}

	@fs/vfs/vfslist.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<synch.h
>

9 
	~<¨øy.h
>

10 
	~<kîn/î∫o.h
>

11 
	~<vfs.h
>

12 
	~<vnode.h
>

13 
	~<fs.h
>

14 
	~<dev.h
>

46 
	sknowndev
 {

47 *
	mkd_«me
;

48 *
	mkd_øw«me
;

49 
devi˚
 *
	mkd_devi˚
;

50 
vnode
 *
	mkd_vnode
;

51 
fs
 *
	mkd_fs
;

54 
¨øy
 *
	gknowndevs
;

55 
lock
 *
	gknowndevs_lock
;

61 
	$vfs_boŸ°øp
()

63 
knowndevs
 = 
	`¨øy_¸óã
();

64 i‡(
knowndevs
==
NULL
) {

65 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

67 
knowndevs_lock
 = 
	`lock_¸óã
("knowndevs");

68 i‡(
knowndevs_lock
==
NULL
) {

69 
	`∑nic
("vfs: CouldÇot create knowndevsÜock\n");

72 
	`vfs_öôboŸfs
();

73 
	`devnuŒ_¸óã
();

76 
	}
}

82 
	$vfs_sync
()

84 
knowndev
 *
dev
;

85 
i
, 
num
;

87 
	`lock_acquúe
(
knowndevs_lock
);

89 
num
 = 
	`¨øy_gënum
(
knowndevs
);

90 
i
=0; i<
num
; i++) {

91 
dev
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

92 i‡(
dev
->
kd_fs
 !
NULL
) {

93  
	`FSOP_SYNC
(
dev
->
kd_fs
);

97 
	`lock_ªÀa£
(
knowndevs_lock
);

100 
	}
}

107 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

109 
knowndev
 *
kd
;

110 
i
, 
num
;

111 
îr
=0;

113 
	`lock_acquúe
(
knowndevs_lock
);

115 
num
 = 
	`¨øy_gënum
(
knowndevs
);

116 
i
=0; i<
num
; i++) {

117 
kd
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

128 i‡(
kd
->
kd_fs
!=
NULL
) {

129 c⁄° *
vﬁ«me
;

130 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

132 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

133 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

134 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

135 
out
;

139 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

140 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

141 
îr
 = 
ENXIO
;

142 
out
;

151 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

152 
	`as£π
(
kd
->
kd_fs
==
NULL
);

153 
	`as£π
(
kd
->
kd_øw«me
==
NULL
);

154 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

155 
	`VOP_INCREF
(
kd
->
kd_vnode
);

156 *
ªsu…
 = 
kd
->
kd_vnode
;

157 
out
;

164 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

165 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

166 
	`VOP_INCREF
(
kd
->
kd_vnode
);

167 *
ªsu…
 = 
kd
->
kd_vnode
;

168 
out
;

181 
îr
 = 
ENODEV
;

183 
out
:

184 
	`lock_ªÀa£
(
knowndevs_lock
);

186  
îr
;

187 
	}
}

193 
	$vfs_gëdev«me
(
fs
 *fs)

195 
knowndev
 *
kd
;

196 
i
, 
num
;

198 
	`as£π
(
fs
 !
NULL
);

200 
	`lock_acquúe
(
knowndevs_lock
);

202 
num
 = 
	`¨øy_gënum
(
knowndevs
);

203 
i
=0; i<
num
; i++) {

204 
kd
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

206 i‡(
kd
->
kd_fs
 =
fs
) {

207 
	`lock_ªÀa£
(
knowndevs_lock
);

214  
kd
->
kd_«me
;

218 
	`lock_ªÀa£
(
knowndevs_lock
);

220  
NULL
;

221 
	}
}

228 
	$mkøw«me
(c⁄° *
«me
)

230 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

231 i‡(!
s
) {

232  
NULL
;

234 
	`°r˝y
(
s
, 
«me
);

235 
	`°rˇt
(
s
, "raw");

236  
s
;

237 
	}
}

245 
ölöe


247 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

249 i‡(
a
==
NULL
 || 
b
==NULL) {

252  !
	`°rcmp
(
a
, 
b
);

253 
	}
}

260 
ölöe


262 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

264  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

265 
	}
}

274 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

276 c⁄° *
vﬁ«me
;

277 
i
, 
num
;

278 
knowndev
 *
kd
;

280 
	`as£π
(
	`lock_do_i_hﬁd
(
knowndevs_lock
));

282 
num
 = 
	`¨øy_gënum
(
knowndevs
);

283 
i
=0; i<
num
; i++) {

284 
kd
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

286 i‡(
kd
->
kd_fs
) {

287 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

288 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

293 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

294 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

300 
	}
}

311 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

313 *
«me
=
NULL
, *
øw«me
=NULL;

314 
knowndev
 *
kd
=
NULL
;

315 
vnode
 *vnode=
NULL
;

316 c⁄° *
vﬁ«me
=
NULL
;

317 
îr
=0;

319 
«me
 = 
	`k°rdup
(
d«me
);

320 i‡(
«me
==
NULL
) {

321 
puke
;

323 i‡(
mou¡abÀ
) {

324 
øw«me
 = 
	`mkøw«me
(
«me
);

325 i‡(
øw«me
==
NULL
) {

326 
puke
;

330 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

331 i‡(
vnode
==
NULL
) {

332 
puke
;

335 
kd
 = 
	`kmÆloc
((
knowndev
));

336 i‡(
kd
==
NULL
) {

337 
puke
;

340 
kd
->
kd_«me
 = 
«me
;

341 
kd
->
kd_øw«me
 = 
øw«me
;

342 
kd
->
kd_devi˚
 = 
dev
;

343 
kd
->
kd_vnode
 = 
vnode
;

344 
kd
->
kd_fs
 = 
fs
;

346 i‡(
fs
!=
NULL
) {

347 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

350 
	`lock_acquúe
(
knowndevs_lock
);

352 i‡(!
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

353 
îr
 = 
	`¨øy_add
(
knowndevs
, 
kd
);

356 
îr
 = 
EEXIST
;

359 
	`lock_ªÀa£
(
knowndevs_lock
);

361  
îr
;

363 
puke
:

365 i‡(
«me
) {

366 
	`k‰ì
(
«me
);

368 i‡(
øw«me
) {

369 
	`k‰ì
(
øw«me
);

371 i‡(
vnode
) {

372 
	`k‰ì
(
vnode
);

374 i‡(
kd
) {

375 
	`k‰ì
(
kd
);

378  
ENOMEM
;

379 
	}
}

386 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

388  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

389 
	}
}

397 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

399  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

400 
	}
}

410 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

412 
knowndev
 *
dev
;

413 
i
, 
num
, 
found
=0;

415 
	`as£π
(
	`lock_do_i_hﬁd
(
knowndevs_lock
));

417 
num
 = 
	`¨øy_gënum
(
knowndevs
);

418 
i
=0; !
found
 && i<
num
; i++) {

419 
dev
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

420 i‡(
dev
->
kd_øw«me
==
NULL
) {

425 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

426 *
ªsu…
 = 
dev
;

427 
found
 = 1;

431  
found
 ? 0 : 
ENODEV
;

432 
	}
}

442 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

443 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

445 c⁄° *
vﬁ«me
;

446 
knowndev
 *
kd
;

447 
fs
 *fs;

448 
ªsu…
;

450 
	`lock_acquúe
(
knowndevs_lock
);

453 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

454 i‡(
ªsu…
) {

455 
puke
;

458 i‡(
kd
->
kd_fs
 !
NULL
) {

459 
ªsu…
 = 
EBUSY
;

460 
puke
;

462 
	`as£π
(
kd
->
kd_øw«me
 !
NULL
);

463 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

465 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

466 i‡(
ªsu…
) {

467 
puke
;

470 
	`as£π
(
fs
!=
NULL
);

472 
kd
->
kd_fs
 = 
fs
;

474 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

475 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

476 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

478 
	`as£π
(
ªsu…
==0);

480 
puke
:

481 
	`lock_ªÀa£
(
knowndevs_lock
);

482  
ªsu…
;

483 
	}
}

490 
	$vfs_unmou¡
(c⁄° *
dev«me
)

492 
knowndev
 *
kd
;

493 
ªsu…
;

495 
	`lock_acquúe
(
knowndevs_lock
);

498 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

499 i‡(
ªsu…
) {

500 
puke
;

503 i‡(
kd
->
kd_fs
 =
NULL
) {

504 
ªsu…
 = 
EINVAL
;

505 
puke
;

507 
	`as£π
(
kd
->
kd_øw«me
 !
NULL
);

508 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

510 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

511 i‡(
ªsu…
) {

512 
puke
;

515 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

516 i‡(
ªsu…
) {

517 
puke
;

520 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

523 
kd
->
kd_fs
 = 
NULL
;

525 
	`as£π
(
ªsu…
==0);

527 
puke
:

528 
	`lock_ªÀa£
(
knowndevs_lock
);

529  
ªsu…
;

530 
	}
}

536 
	$vfs_unmou¡Æl
()

538 
knowndev
 *
dev
;

539 
i
, 
num
, 
ªsu…
;

541 
	`lock_acquúe
(
knowndevs_lock
);

543 
num
 = 
	`¨øy_gënum
(
knowndevs
);

544 
i
=0; i<
num
; i++) {

545 
dev
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

546 i‡(
dev
->
kd_øw«me
 =
NULL
) {

550 i‡(
dev
->
kd_fs
 =
NULL
) {

555 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

557 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

558 i‡(
ªsu…
) {

559 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

560 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

562 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

563 i‡(
ªsu…
) {

564 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

566 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

571 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

572 i‡(
ªsu…
==
EBUSY
) {

573 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

574 
dev
->
kd_«me
);

577 i‡(
ªsu…
) {

578 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

580 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

585 
dev
->
kd_fs
 = 
NULL
;

588 
	`lock_ªÀa£
(
knowndevs_lock
);

591 
	}
}

	@fs/vfs/vfslookup.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/limôs.h
>

8 
	~<lib.h
>

9 
	~<synch.h
>

10 
	~<vfs.h
>

11 
	~<vnode.h
>

12 
	~<fs.h
>

14 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

15 
lock
 *
	gboŸfs_lock
 = 
NULL
;

18 
	$vfs_öôboŸfs
()

20 
boŸfs_lock
 = 
	`lock_¸óã
("bootfs_lock");

21 i‡(
boŸfs_lock
 =
NULL
) {

22 
	`∑nic
("vfs: CouldÇot create bootfsÜock\n");

24 
	}
}

31 
	$ch™ge_boŸfs
(
vnode
 *
√wguy
)

33 
vnode
 *
ﬁdguy
;

35 
	`lock_acquúe
(
boŸfs_lock
);

36 
ﬁdguy
 = 
boŸfs_vnode
;

37 
boŸfs_vnode
 = 
√wguy
;

38 
	`lock_ªÀa£
(
boŸfs_lock
);

41 i‡(
ﬁdguy
 !
NULL
) {

42 
	`VOP_DECREF
(
ﬁdguy
);

44 
	}
}

55 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

57 
tmp
[
NAME_MAX
+1];

58 *
s
;

59 
ªsu…
;

60 
vnode
 *
√wguy
;

62 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

63 
s
 = 
	`°rchr
(
tmp
, ':');

64 i‡(
s
) {

66 i‡(
	`°æí
(
s
)>0) {

67  
EINVAL
;

71 
	`°rˇt
(
tmp
, ":");

74 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

75 i‡(
ªsu…
) {

76  
ªsu…
;

79 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

80 i‡(
ªsu…
) {

81  
ªsu…
;

84 
	`ch™ge_boŸfs
(
√wguy
);

87 
	}
}

93 
	$vfs_˛órboŸfs
()

95 
	`ch™ge_boŸfs
(
NULL
);

96 
	}
}

106 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

108 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

109 
vnode
 *
vn
;

110 
ªsu…
;

116 
i
=0; 
∑th
[i]; i++) {

117 i‡(
∑th
[
i
]==':') {

118 
cﬁ⁄
 = 
i
;

121 i‡(
∑th
[
i
]=='/') {

122 
¶ash
 = 
i
;

127 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

135 *
sub∑th
 = 
∑th
;

136  
	`vfs_gëcurdú
(
°¨tvn
);

139 i‡(
cﬁ⁄
>0) {

141 
∑th
[
cﬁ⁄
]=0;

142 
∑th
[
cﬁ⁄
+1]=='/') {

144 
cﬁ⁄
++;

146 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

148 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

149 i‡(
ªsu…
) {

150  
ªsu…
;

162 
	`as£π
(
cﬁ⁄
==0 || 
¶ash
==0);

164 i‡(
∑th
[0]=='/') {

165 
	`lock_acquúe
(
boŸfs_lock
);

166 i‡(
boŸfs_vnode
==
NULL
) {

167 
	`lock_ªÀa£
(
boŸfs_lock
);

168  
ENOENT
;

170 
	`VOP_INCREF
(
boŸfs_vnode
);

171 *
°¨tvn
 = 
boŸfs_vnode
;

172 
	`lock_ªÀa£
(
boŸfs_lock
);

175 
	`as£π
(
∑th
[0]==':');

177 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

178 i‡(
ªsu…
) {

179  
ªsu…
;

186 
	`as£π
(
vn
->
vn_fs
!=
NULL
);

188 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

190 
	`VOP_DECREF
(
vn
);

193 
∑th
[1]=='/') {

195 
∑th
++;

198 *
sub∑th
 = 
∑th
+1;

201 
	}
}

209 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

210 *
buf
, 
size_t
 
buÊí
)

212 
vnode
 *
°¨tvn
;

213 
ªsu…
;

215 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

216 i‡(
ªsu…
) {

217  
ªsu…
;

220 i‡(
	`°æí
(
∑th
)==0) {

226 
ªsu…
 = 
EINVAL
;

229 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

232 
	`VOP_DECREF
(
°¨tvn
);

233  
ªsu…
;

234 
	}
}

237 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

239 
vnode
 *
°¨tvn
;

240 
ªsu…
;

242 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

243 i‡(
ªsu…
) {

244  
ªsu…
;

247 i‡(
	`°æí
(
∑th
)==0) {

248 *
ªtvÆ
 = 
°¨tvn
;

252 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

254 
	`VOP_DECREF
(
°¨tvn
);

255  
ªsu…
;

256 
	}
}

	@fs/vfs/vfspath.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/limôs.h
>

8 
	~<kîn/uni°d.h
>

9 
	~<vfs.h
>

10 
	~<vnode.h
>

11 
	~<lib.h
>

16 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
vnode
 **
ªt
)

18 
how
;

19 
ªsu…
;

20 
ˇnwrôe
;

21 
vnode
 *
vn
 = 
NULL
;

23 
how
 = 
›íÊags
 & 
O_ACCMODE
;

25 
how
) {

26 
O_RDONLY
:

27 
ˇnwrôe
=0;

29 
O_WRONLY
:

30 
O_RDWR
:

31 
ˇnwrôe
=1;

34  
EINVAL
;

37 i‡(
›íÊags
 & 
O_CREAT
) {

38 
«me
[
NAME_MAX
+1];

39 
vnode
 *
dú
;

40 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

42 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

43 i‡(
ªsu…
) {

44  
ªsu…
;

47 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, &
vn
);

49 
	`VOP_DECREF
(
dú
);

52 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

55 i‡(
ªsu…
) {

56  
ªsu…
;

59 
	`as£π
(
vn
 !
NULL
);

61 
ªsu…
 = 
	`VOP_OPEN
(
vn
, 
›íÊags
);

62 i‡(
ªsu…
) {

63 
	`VOP_DECREF
(
vn
);

64  
ªsu…
;

67 
	`VOP_INCOPEN
(
vn
);

69 i‡(
›íÊags
 & 
O_TRUNC
) {

70 i‡(
ˇnwrôe
==0) {

71 
ªsu…
 = 
EINVAL
;

74 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

76 i‡(
ªsu…
) {

77 
	`VOP_DECOPEN
(
vn
);

78 
	`VOP_DECREF
(
vn
);

79  
ªsu…
;

83 *
ªt
 = 
vn
;

86 
	}
}

90 
	$vfs_˛o£
(
vnode
 *
vn
)

106 
	`VOP_DECOPEN
(
vn
);

107 
	`VOP_DECREF
(
vn
);

108 
	}
}

112 
	$vfs_ªmove
(*
∑th
)

114 
vnode
 *
dú
;

115 
«me
[
NAME_MAX
+1];

116 
ªsu…
;

118 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

119 i‡(
ªsu…
) {

120  
ªsu…
;

123 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

124 
	`VOP_DECREF
(
dú
);

126  
ªsu…
;

127 
	}
}

131 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

133 
vnode
 *
ﬁddú
;

134 
ﬁd«me
[
NAME_MAX
+1];

135 
vnode
 *
√wdú
;

136 
√w«me
[
NAME_MAX
+1];

137 
ªsu…
;

139 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

140 i‡(
ªsu…
) {

141  
ªsu…
;

143 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

144 i‡(
ªsu…
) {

145 
	`VOP_DECREF
(
ﬁddú
);

146  
ªsu…
;

149 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

150 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

151 
	`VOP_DECREF
(
√wdú
);

152 
	`VOP_DECREF
(
ﬁddú
);

153  
EXDEV
;

156 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

158 
	`VOP_DECREF
(
√wdú
);

159 
	`VOP_DECREF
(
ﬁddú
);

161  
ªsu…
;

162 
	}
}

166 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

168 
vnode
 *
ﬁdfûe
;

169 
vnode
 *
√wdú
;

170 
√w«me
[
NAME_MAX
+1];

171 
ªsu…
;

173 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

174 i‡(
ªsu…
) {

175  
ªsu…
;

177 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

178 i‡(
ªsu…
) {

179 
	`VOP_DECREF
(
ﬁdfûe
);

180  
ªsu…
;

183 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

184 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

185 
	`VOP_DECREF
(
√wdú
);

186 
	`VOP_DECREF
(
ﬁdfûe
);

187  
EXDEV
;

190 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

192 
	`VOP_DECREF
(
√wdú
);

193 
	`VOP_DECREF
(
ﬁdfûe
);

195  
ªsu…
;

196 
	}
}

206 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

208 
vnode
 *
√wdú
;

209 
√w«me
[
NAME_MAX
+1];

210 
ªsu…
;

212 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

213 i‡(
ªsu…
) {

214  
ªsu…
;

217 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

218 
	`VOP_DECREF
(
√wdú
);

220  
ªsu…
;

221 
	}
}

231 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

233 
vnode
 *
vn
;

234 
ªsu…
;

236 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

237 i‡(
ªsu…
) {

238  
ªsu…
;

241 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

243 
	`VOP_DECREF
(
vn
);

245  
ªsu…
;

246 
	}
}

252 
	$vfs_mkdú
(*
∑th
)

254 
vnode
 *
∑ª¡
;

255 
«me
[
NAME_MAX
+1];

256 
ªsu…
;

258 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

259 i‡(
ªsu…
) {

260  
ªsu…
;

263 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
);

265 
	`VOP_DECREF
(
∑ª¡
);

267  
ªsu…
;

268 
	}
}

274 
	$vfs_rmdú
(*
∑th
)

276 
vnode
 *
∑ª¡
;

277 
«me
[
NAME_MAX
+1];

278 
ªsu…
;

280 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

281 i‡(
ªsu…
) {

282  
ªsu…
;

285 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

287 
	`VOP_DECREF
(
∑ª¡
);

289  
ªsu…
;

290 
	}
}

	@fs/vfs/vnode.c

4 
	~<ty≥s.h
>

5 
	~<kîn/î∫o.h
>

6 
	~<lib.h
>

7 
	~<synch.h
>

8 
	~<vnode.h
>

15 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

16 
fs
 *fs, *
fsd©a
)

18 
	`as£π
(
vn
!=
NULL
);

19 
	`as£π
(
›s
!=
NULL
);

21 
vn
->
vn_›s
 = 
›s
;

22 
vn
->
vn_ªfcou¡
 = 1;

23 
vn
->
vn_›ícou¡
 = 0;

24 
vn
->
vn_cou¡lock
 = 
	`lock_¸óã
("vnode-countlock");

25 i‡(
vn
->
vn_cou¡lock
 =
NULL
) {

26  
ENOMEM
;

28 
vn
->
vn_fs
 = 
fs
;

29 
vn
->
vn_d©a
 = 
fsd©a
;

31 
	}
}

38 
	$vnode_kûl
(
vnode
 *
vn
)

40 
	`as£π
(
vn
->
vn_ªfcou¡
==1);

41 
	`as£π
(
vn
->
vn_›ícou¡
==0);

42 
	`as£π
(
vn
->
vn_cou¡lock
!=
NULL
);

44 
	`lock_de°roy
(
vn
->
vn_cou¡lock
);

46 
vn
->
vn_›s
 = 
NULL
;

47 
vn
->
vn_ªfcou¡
 = 0;

48 
vn
->
vn_›ícou¡
 = 0;

49 
vn
->
vn_cou¡lock
 = 
NULL
;

50 
vn
->
vn_fs
 = 
NULL
;

51 
vn
->
vn_d©a
 = 
NULL
;

52 
	}
}

60 
	$vnode_ö¸ef
(
vnode
 *
vn
)

62 
	`as£π
(
vn
!=
NULL
);

63 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

64 
vn
->
vn_ªfcou¡
++;

65 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

66 
	}
}

74 
	$vnode_de¸ef
(
vnode
 *
vn
)

76 
ªsu…
, 
a˘uÆly_do_ô
 = 0;

78 
	`as£π
(
vn
!=
NULL
);

80 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

81 
	`as£π
(
vn
->
vn_ªfcou¡
>0);

82 i‡(
vn
->
vn_ªfcou¡
>1) {

83 
vn
->
vn_ªfcou¡
--;

86 
a˘uÆly_do_ô
 = 1;

88 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

90 i‡(
a˘uÆly_do_ô
) {

91 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

92 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

94 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

95 
	`°ªº‹
(
ªsu…
));

98 
	}
}

105 
	$vnode_öc›í
(
vnode
 *
vn
)

107 
	`as£π
(
vn
!=
NULL
);

108 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

109 
vn
->
vn_›ícou¡
++;

110 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

111 
	}
}

118 
	$vnode_dec›í
(
vnode
 *
vn
)

120 
›ícou¡
, 
ªsu…
;

122 
	`as£π
(
vn
!=
NULL
);

123 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

124 
	`as£π
(
vn
->
vn_›ícou¡
>0);

125 
vn
->
vn_›ícou¡
--;

126 
›ícou¡
 = 
vn
->
vn_›ícou¡
;

127 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

129 i‡(
›ícou¡
 > 0) {

133 
ªsu…
 = 
	`VOP_CLOSE
(
vn
);

134 i‡(
ªsu…
) {

138 
	`k¥ötf
("vfs: W¨nög: VOP_CLOSE: %s\n", 
	`°ªº‹
(
ªsu…
));

140 
	}
}

147 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

149 i‡(
v
 =
NULL
) {

150 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

152 i‡(
v
 == (*)0xdeadbeef) {

153 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

156 i‡(
v
->
vn_›s
 =
NULL
) {

157 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

159 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

160 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

163 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

164 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

165 
›°r
, 
v
->
vn_›s
->
v›_magic
);

172 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

173 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

176 
	`lock_acquúe
(
v
->
vn_cou¡lock
);

178 i‡(
v
->
vn_ªfcou¡
 < 0) {

179 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

180 
v
->
vn_ªfcou¡
);

182 i‡(
v
->
vn_ªfcou¡
 =0 && 
	`°rcmp
(
›°r
, "reclaim")) {

183 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

185 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

186 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

187 
›°r
, 
v
->
vn_ªfcou¡
);

190 i‡(
v
->
vn_›ícou¡
 < 0) {

191 
	`∑nic
("vnode_check: v›_%s:Çeg©ivê›ícou¡ %d\n", 
›°r
,

192 
v
->
vn_›ícou¡
);

194 i‡(
v
->
vn_›ícou¡
 > 0x100000) {

195 
	`k¥ötf
("vnode_check: vop_%s: warning:Üarge opencount %d\n",

196 
›°r
, 
v
->
vn_›ícou¡
);

199 
	`lock_ªÀa£
(
v
->
vn_cou¡lock
);

200 
	}
}

	@include/addrspace.h

1 #i‚de‡
_ADDRSPACE_H_


2 
	#_ADDRSPACE_H_


	)

4 
	~<vm.h
>

5 
	~<synch.h
>

6 
	~<vnode.h
>

7 
	~"›t-dumbvm.h
"

9 
	#DUMBVM_STACKPAGES
 12

	)

11 
	#GETPAGE
 1

	)

12 
	#GETENTRY
 0

	)

32 
	s£c⁄d¨y_±
 {

34 
∑ddr_t
 
	m±_íåy
[1024];

37 
	saddr•a˚
 {

51 
£c⁄d¨y_±
 *
	m±_íåy
[512];

65 
addr•a˚
 *
	mchûd
;

67 
lock
 *
	mfûñock
;

69 
size_t
 
	msw≠fûecou¡
;

71 
size_t
 
	msw≠fûesize
;

73 
vaddr_t
 
	mhóp_°¨t
;

74 
vaddr_t
 
	mhóp_íd
;

111 
addr•a˚
 *
as_¸óã
();

112 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

113 
as_a˘iv©e
(
addr•a˚
 *);

114 
as_de°roy
(
addr•a˚
 *);

116 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
,

117 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

118 
ªadabÀ
,

119 
wrôóbÀ
,

120 
execuèbÀ
,

121 
°©us
,

122 
mode
);

123 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
, 
°©us
, 
ma°î_i
, 
£c⁄d¨y_i
);

124 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

133 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@include/array.h

1 #i‚de‡
_ARRAY_H_


2 
	#_ARRAY_H_


	)

31 
	g¨øy
;

33 
¨øy
 *
¨øy_¸óã
();

34 
¨øy_¥óŒoˇã
(
¨øy
 *, 
nguys
);

35 
¨øy_gënum
(
¨øy
 *);

36 *
¨øy_gëguy
(
¨øy
 *, 
ödex
);

37 
¨øy_£tsize
(
¨øy
 *, 
nguys
);

38 
¨øy_£tguy
(
¨øy
 *, 
ödex
, *
±r
);

39 
¨øy_add
(
¨øy
 *, *
guy
);

40 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

41 
¨øy_de°roy
(
¨øy
 *);

	@include/bitmap.h

1 #i‚de‡
_BITMAP_H_


2 
	#_BITMAP_H_


	)

18 
	gbôm≠
;

20 
bôm≠
 *
bôm≠_¸óã
(
u_öt32_t
 
nbôs
);

21 *
bôm≠_gëd©a
(
bôm≠
 *);

22 
bôm≠_Æloc
(
bôm≠
 *, 
u_öt32_t
 *
ödex
);

23 
bôm≠_m¨k
(
bôm≠
 *, 
u_öt32_t
 
ödex
);

24 
bôm≠_unm¨k
(
bôm≠
 *, 
u_öt32_t
 
ödex
);

25 
bôm≠_is£t
(
bôm≠
 *, 
u_öt32_t
 
ödex
);

26 
bôm≠_de°roy
(
bôm≠
 *);

	@include/clock.h

1 #i‚de‡
_CLOCK_H_


2 
	#_CLOCK_H_


	)

4 
	~"›t-synch¥obs.h
"

15 #i‡
OPT_SYNCHPROBS


17 
	#HZ
 10000

	)

20 
	#HZ
 100

	)

23 
h¨d˛ock
();

25 
gëtime
(
time_t
 *
£c⁄ds
, 
u_öt32_t
 *
«no£c⁄ds
);

27 
gëöãrvÆ
(
time_t
 
£cs1
, 
u_öt32_t
 
n£cs
,

28 
time_t
 
£cs2
, 
u_öt32_t
 
n£cs2
,

29 
time_t
 *
r£cs
, 
u_öt32_t
 *
∫£cs
);

	@include/curthread.h

1 #i‚de‡
_CURTHREAD_H_


2 
	#_CURTHREAD_H_


	)

11 
	gthªad
;

13 
thªad
 *
cuπhªad
;

	@include/db-helper.h

1 #i‚de‡
_DB_HELPER_H_


2 
	#_DB_HELPER_H_


	)

3 
cmd_éb°©s
(
«rgs
, **
¨gs
);

4 
cmd_c‹em≠°©s
(
«rgs
, **
¨gs
);

	@include/dev.h

1 #i‚de‡
_DEV_H_


2 
	#_DEV_H_


	)

4 
	guio
;

10 
	sdevi˚
 {

11 (*
	md_›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

12 (*
	md_˛o£
)(
	mdevi˚
 *);

13 (*
	md_io
)(
	mdevi˚
 *, 
	muio
 *);

14 (*
	md_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

16 
u_öt32_t
 
	md_blocks
;

17 
u_öt32_t
 
	md_blocksize
;

19 *
	md_d©a
;

23 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

27 
devnuŒ_¸óã
();

39 
dev_boŸ°øp
();

41 
machdï_dev_boŸ°øp
();

	@include/elf.h

1 #i‚de‡
_ELF_H_


2 
	#_ELF_H_


	)

18 
	#ELF_NIDENT
 16

	)

20 
	me_idít
[
ELF_NIDENT
];

21 
u_öt16_t
 
	me_ty≥
;

22 
u_öt16_t
 
	me_machöe
;

23 
u_öt32_t
 
	me_vîsi⁄
;

24 
u_öt32_t
 
	me_íåy
;

25 
u_öt32_t
 
	me_phoff
;

26 
u_öt32_t
 
	me_shoff
;

27 
u_öt32_t
 
	me_Êags
;

28 
u_öt16_t
 
	me_ehsize
;

29 
u_öt16_t
 
	me_phítsize
;

30 
u_öt16_t
 
	me_phnum
;

31 
u_öt16_t
 
	me_shítsize
;

32 
u_öt16_t
 
	me_shnum
;

33 
u_öt16_t
 
	me_sh°∫dx
;

34 } 
	tElf32_Ehdr
;

37 
	#EI_MAG0
 0

	)

38 
	#EI_MAG1
 1

	)

39 
	#EI_MAG2
 2

	)

40 
	#EI_MAG3
 3

	)

41 
	#EI_CLASS
 4

	)

42 
	#EI_DATA
 5

	)

43 
	#EI_VERSION
 6

	)

44 
	#EI_OSABI
 7

	)

45 
	#EI_ABIVERSION
 8

	)

46 
	#EI_PAD
 9

	)

51 
	#ELFMAG0
 0x7f

	)

52 
	#ELFMAG1
 'E'

	)

53 
	#ELFMAG2
 'L'

	)

54 
	#ELFMAG3
 'F'

	)

57 
	#ELFCLASSNONE
 0

	)

58 
	#ELFCLASS32
 1

	)

59 
	#ELFCLASS64
 2

	)

62 
	#ELFDATANONE
 0

	)

63 
	#ELFDATA2LSB
 1

	)

64 
	#ELFDATA2MSB
 2

	)

67 
	#EV_NONE
 0

	)

68 
	#EV_CURRENT
 1

	)

71 
	#ELFOSABI_SYSV
 0

	)

72 
	#ELFOSABI_HPUX
 1

	)

73 
	#ELFOSABI_STANDALONE
 255

	)

79 
	#ET_NONE
 0

	)

80 
	#ET_REL
 1

	)

81 
	#ET_EXEC
 2

	)

82 
	#ET_DYN
 3

	)

83 
	#ET_CORE
 4

	)

84 
	#ET_NUM
 5

	)

89 
	#EM_NONE
 0

	)

90 
	#EM_M32
 1

	)

91 
	#EM_SPARC
 2

	)

92 
	#EM_386
 3

	)

93 
	#EM_68K
 4

	)

94 
	#EM_88K
 5

	)

95 
	#EM_486
 6

	)

96 
	#EM_860
 7

	)

97 
	#EM_MIPS
 8

	)

98 
	#EM_S370
 9

	)

99 
	#EM_MIPS_RS3_LE
 10

	)

100 
	#EM_RS6000
 11

	)

101 
	#EM_PARISC
 15

	)

102 
	#EM_NCUBE
 16

	)

103 
	#EM_VPP500
 17

	)

104 
	#EM_SPARC32PLUS
 18

	)

105 
	#EM_960
 19

	)

106 
	#EM_PPC
 20

	)

107 
	#EM_V800
 36

	)

108 
	#EM_FR20
 37

	)

109 
	#EM_RH32
 38

	)

110 
	#EM_RCE
 39

	)

111 
	#EM_ARM
 40

	)

112 
	#EM_ALPHA
 41

	)

113 
	#EM_SH
 42

	)

114 
	#EM_SPARCV9
 43

	)

115 
	#EM_TRICORE
 44

	)

116 
	#EM_ARC
 45

	)

117 
	#EM_H8_300
 46

	)

118 
	#EM_H8_300H
 47

	)

119 
	#EM_H8S
 48

	)

120 
	#EM_H8_500
 49

	)

121 
	#EM_IA_64
 50

	)

122 
	#EM_MIPS_X
 51

	)

123 
	#EM_COLDFIRE
 52

	)

124 
	#EM_68HC12
 53

	)

125 
	#EM_VAX
 75

	)

126 
	#EM_ALPHA_EXP
 36902

	)

127 
	#EM_NUM
 36903

	)

137 
u_öt32_t
 
	mp_ty≥
;

138 
u_öt32_t
 
	mp_off£t
;

139 
u_öt32_t
 
	mp_vaddr
;

140 
u_öt32_t
 
	mp_∑ddr
;

141 
u_öt32_t
 
	mp_fûesz
;

142 
u_öt32_t
 
	mp_memsz
;

143 
u_öt32_t
 
	mp_Êags
;

144 
u_öt32_t
 
	mp_Æign
;

145 } 
	tElf32_Phdr
;

148 
	#PT_NULL
 0

	)

149 
	#PT_LOAD
 1

	)

150 
	#PT_DYNAMIC
 2

	)

151 
	#PT_INTERP
 3

	)

152 
	#PT_NOTE
 4

	)

153 
	#PT_SHLIB
 5

	)

154 
	#PT_PHDR
 6

	)

155 
	#PT_NUM
 7

	)

156 
	#PT_MIPS_REGINFO
 0x70000000

	)

159 
	#PF_R
 0x4

	)

160 
	#PF_W
 0x2

	)

161 
	#PF_X
 0x1

	)

164 
Elf32_Ehdr
 
	tElf_Ehdr
;

165 
Elf32_Phdr
 
	tElf_Phdr
;

	@include/emufs.h

1 #i‚de‡
_EMUFS_H_


2 
	#_EMUFS_H_


	)

7 
	~<vnode.h
>

8 
	~<fs.h
>

14 
	semufs_vnode
 {

15 
vnode
 
	mev_v
;

16 
emu_so·c
 *
	mev_emu
;

17 
u_öt32_t
 
	mev_h™dÀ
;

20 
	semufs_fs
 {

21 
fs
 
	mef_fs
;

22 
emu_so·c
 *
	mef_emu
;

23 
emufs_vnode
 *
	mef_roŸ
;

24 
¨øy
 *
	mef_vnodes
;

	@include/fs.h

1 #i‚de‡
_FS_H_


2 
	#_FS_H_


	)

33 
	sfs
 {

34 (*
	mfs_sync
)(
	mfs
 *);

35 c⁄° *(*
	mfs_gëvﬁ«me
)(
	mfs
 *);

36 
	mvnode
 *(*
	mfs_gëroŸ
)(
	mfs
 *);

37 (*
	mfs_unmou¡
)(
	mfs
 *);

39 *
	mfs_d©a
;

45 
	#FSOP_SYNC
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

46 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
	`fs_gëvﬁ«me
(fs))

	)

47 
	#FSOP_GETROOT
(
fs
Ë((fs)->
	`fs_gëroŸ
(fs))

	)

48 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

	@include/kern/callno.h

1 #i‚de‡
_KERN_CALLNO_H_


2 
	#_KERN_CALLNO_H_


	)

11 
	#SYS__exô
 0

	)

12 
	#SYS_execv
 1

	)

13 
	#SYS_f‹k
 2

	)

14 
	#SYS_waôpid
 3

	)

15 
	#SYS_›í
 4

	)

16 
	#SYS_ªad
 5

	)

17 
	#SYS_wrôe
 6

	)

18 
	#SYS_˛o£
 7

	)

19 
	#SYS_ªboŸ
 8

	)

20 
	#SYS_sync
 9

	)

21 
	#SYS_sbrk
 10

	)

22 
	#SYS_gëpid
 11

	)

23 
	#SYS_io˘l
 12

	)

24 
	#SYS_l£ek
 13

	)

25 
	#SYS_fsync
 14

	)

26 
	#SYS_·runˇã
 15

	)

27 
	#SYS_f°©
 16

	)

28 
	#SYS_ªmove
 17

	)

29 
	#SYS_ª«me
 18

	)

30 
	#SYS_lök
 19

	)

31 
	#SYS_mkdú
 20

	)

32 
	#SYS_rmdú
 21

	)

33 
	#SYS_chdú
 22

	)

34 
	#SYS_gëdúíåy
 23

	)

35 
	#SYS_symlök
 24

	)

36 
	#SYS_ªadlök
 25

	)

37 
	#SYS_dup2
 26

	)

38 
	#SYS_pùe
 27

	)

39 
	#SYS___time
 28

	)

40 
	#SYS___gëcwd
 29

	)

41 
	#SYS_°©
 30

	)

42 
	#SYS_l°©
 31

	)

	@include/kern/errmsg.h

1 #i‚de‡
_KERN_ERRMSG_H_


2 
	#_KERN_ERRMSG_H_


	)

12 c⁄° *c⁄° 
	gsys_îæi°
[] = {

45 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@include/kern/errno.h

1 #i‚de‡
_KERN_ERRNO_H_


2 
	#_KERN_ERRNO_H_


	)

13 
	#EINVAL
 1

	)

14 
	#EFAULT
 2

	)

15 
	#ENAMETOOLONG
 3

	)

16 
	#ENOMEM
 4

	)

17 
	#EIO
 5

	)

18 
	#ENOENT
 6

	)

19 
	#ENOTDIR
 7

	)

20 
	#EISDIR
 8

	)

21 
	#EEXIST
 9

	)

22 
	#EXDEV
 10

	)

23 
	#EAGAIN
 11

	)

24 
	#ESPIPE
 12

	)

25 
	#EUNIMP
 13

	)

26 
	#ENXIO
 14

	)

27 
	#ENODEV
 15

	)

28 
	#EBUSY
 16

	)

29 
	#EIOCTL
 17

	)

30 
	#ENOTEMPTY
 18

	)

31 
	#ERANGE
 19

	)

32 
	#ENOSPC
 20

	)

33 
	#EMFILE
 21

	)

34 
	#ENFILE
 22

	)

35 
	#ENOSYS
 23

	)

36 
	#ENOEXEC
 24

	)

37 
	#E2BIG
 25

	)

38 
	#EBADF
 26

	)

	@include/kern/ioctl.h

1 #i‚de‡
_KERN_IOCTL_H_


2 
	#_KERN_IOCTL_H_


	)

	@include/kern/limits.h

1 #i‚de‡
_KERN_LIMITS_H_


2 
	#_KERN_LIMITS_H_


	)

5 
	#NAME_MAX
 255

	)

8 
	#PATH_MAX
 1024

	)

	@include/kern/sfs.h

1 #i‚de‡
_KERN_SFS_H_


2 
	#_KERN_SFS_H_


	)

4 
	#SFS_MAGIC
 0xabadf001

	)

5 
	#SFS_BLOCKSIZE
 512

	)

6 
	#SFS_VOLNAME_SIZE
 32

	)

7 
	#SFS_NDIRECT
 15

	)

8 
	#SFS_DBPERIDB
 128

	)

9 
	#SFS_NAMELEN
 60

	)

10 
	#SFS_SB_LOCATION
 0

	)

11 
	#SFS_ROOT_LOCATION
 1

	)

12 
	#SFS_MAP_LOCATION
 2

	)

13 
	#SFS_NOINO
 0

	)

16 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

19 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

22 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

25 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

28 
	#SFS_TYPE_INVAL
 0

	)

29 
	#SFS_TYPE_FILE
 1

	)

30 
	#SFS_TYPE_DIR
 2

	)

35 
	ssfs_su≥r
 {

36 
u_öt32_t
 
	m•_magic
;

37 
u_öt32_t
 
	m•_nblocks
;

38 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

39 
u_öt32_t
 
	mª£rved
[118];

45 
	ssfs_öode
 {

46 
u_öt32_t
 
	msfi_size
;

47 
u_öt16_t
 
	msfi_ty≥
;

48 
u_öt16_t
 
	msfi_lökcou¡
;

49 
u_öt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

50 
u_öt32_t
 
	msfi_ödúe˘
;

51 
u_öt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

57 
	ssfs_dú
 {

58 
u_öt32_t
 
	msfd_öo
;

59 
	msfd_«me
[
SFS_NAMELEN
];

	@include/kern/stat.h

1 #i‚de‡
_KERN_STAT_H_


2 
	#_KERN_STAT_H_


	)

8 
	s°©
 {

9 
u_öt32_t
 
	m°_mode
;

10 
u_öt32_t
 
	m°_∆ök
;

11 
off_t
 
	m°_size
;

12 
u_öt32_t
 
	m°_blocks
;

22 
	#S_IFMT
 070000

	)

23 
	#S_IFREG
 010000

	)

24 
	#S_IFDIR
 020000

	)

25 
	#S_IFLNK
 030000

	)

26 
	#S_IFCHR
 040000

	)

27 
	#S_IFBLK
 050000

	)

32 
	#S_ISREG
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFREG
Ë

	)

33 
	#S_ISDIR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFDIR
Ë

	)

34 
	#S_ISLNK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFLNK
Ë

	)

35 
	#S_ISCHR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFCHR
Ë

	)

36 
	#S_ISBLK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFBLK
Ë

	)

	@include/kern/types.h

1 #i‚de‡
_KERN_TYPES_H_


2 
	#_KERN_TYPES_H_


	)

10 
öt32_t
 
	toff_t
;

11 
öt32_t
 
	tpid_t
;

12 
öt32_t
 
	ttime_t
;

	@include/kern/unistd.h

1 #i‚de‡
_KERN_UNISTD_H_


2 
	#_KERN_UNISTD_H_


	)

9 
	#O_RDONLY
 0

	)

10 
	#O_WRONLY
 1

	)

11 
	#O_RDWR
 2

	)

13 
	#O_CREAT
 4

	)

14 
	#O_EXCL
 8

	)

15 
	#O_TRUNC
 16

	)

16 
	#O_APPEND
 32

	)

19 
	#O_ACCMODE
 3

	)

23 
	#STDIN_FILENO
 0

	)

24 
	#STDOUT_FILENO
 1

	)

25 
	#STDERR_FILENO
 2

	)

28 
	#RB_REBOOT
 0

	)

29 
	#RB_HALT
 1

	)

30 
	#RB_POWEROFF
 2

	)

33 
	#SEEK_SET
 0

	)

34 
	#SEEK_CUR
 1

	)

35 
	#SEEK_END
 2

	)

	@include/lib.h

1 #i‚de‡
_LIB_H_


2 
	#_LIB_H_


	)

9 
	~<machöe/£tjmp.h
>

14 #ifde‡
__GNUC__


15 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

17 
	#__PF
(
a
,
b
)

	)

23 #i‚de‡
__GNUC__


24 
	#__PRETTY_FUNCTION__
 "<unknow¿fun˘i⁄>"

	)

30 
	#as£π
(
x
) { \

31 i‡(!(
x
)) { \

32 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n", #x, \

33 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
); \

35 }

	)

40 
	#DB_LOCORE
 0x001

	)

41 
	#DB_SYSCALL
 0x002

	)

42 
	#DB_INTERRUPT
 0x004

	)

43 
	#DB_DEVICE
 0x008

	)

44 
	#DB_THREADS
 0x010

	)

45 
	#DB_VM
 0x020

	)

46 
	#DB_EXEC
 0x040

	)

47 
	#DB_VFS
 0x080

	)

48 
	#DB_SFS
 0x100

	)

49 
	#DB_NET
 0x200

	)

50 
	#DB_NETFS
 0x400

	)

51 
	#DB_KMALLOC
 0x800

	)

53 
u_öt32_t
 
dbÊags
;

74 
	#DEBUG
(
d
, 
fmt
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(fmt, 
__VA_ARGS__
Ë: 0)

	)

76 
	#DEBUG
(
d
, 
fmt
, 
¨gs
...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(fmt, ##¨gsË: 0)

	)

79 
hñlo
();

83 
	#RAND_MAX
 (
	`øndmax
())

	)

84 
u_öt32_t
 
øndmax
();

85 
u_öt32_t
 
øndom
();

91 *
kmÆloc
(
size_t
 
sz
);

92 *
kmÆloc_dumb
(
size_t
 
sz
);

93 
k‰ì
(*
±r
);

94 
khóp_¥öt°©s
();

102 
size_t
 
°æí
(const *);

103 
°rcmp
(const *, const *);

104 *
°r˝y
(*, const *);

105 *
°rˇt
(*, const *);

106 *
k°rdup
(const *);

107 *
°rchr
(const *, );

108 *
°ºchr
(const *, );

109 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

111 *
mem˝y
(*, c⁄° *, 
size_t
);

112 *
memmove
(*, c⁄° *, 
size_t
);

113 
bzîo
(*, 
size_t
);

114 
©oi
(const *);

116 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

118 c⁄° *
	`°ªº‹
(
îrcode
);

124 
	`£tjmp
(
jmp_buf
 
jb
);

125 
	`l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

130 
	`putch
(
ch
);

131 
	`gëch
();

132 
	`bìp
();

145 
	$k¥ötf
(c⁄° *
fmt
, ...Ë
	`__PF
(1,2);

146 
	$∑nic
(c⁄° *
fmt
, ...Ë
	`__PF
(1,2);

148 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
, size_à*
ªad_Àn
);

149 
	`kgës_sysˇŒ
(*
buf
, 
size_t
 
maxbuÊí
, size_à*
ªad_Àn
);

151 
	`k¥ötf_boŸ°øp
();

156 
u_öt16_t
 
	`¡ohs
(u_int16_t);

157 
u_öt16_t
 
	`ht⁄s
(u_int16_t);

158 
u_öt32_t
 
	`¡ohl
(u_int32_t);

159 
u_öt32_t
 
	`ht⁄l
(u_int32_t);

160 
u_öt64_t
 
	`¡ohŒ
(u_int64_t);

161 
u_öt64_t
 
	`ht⁄Œ
(u_int64_t);

192 
	`c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

193 
	`c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

194 
	`c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

195 
	`c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

205 
lbﬁt
;

206 
	`˛ock¶ìp
(
£c⁄ds
);

212 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

213 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@include/process_helper.h

1 #i‚de‡
_PROCESS_HELPER_H_


2 
	#_PROCESS_HELPER_H_


	)

4 
	~<ty≥s.h
>

5 
	~<thªad.h
>

6 
	~<addr•a˚.h
>

7 
	~<machöe/å≠‰ame.h
>

9 
	sf‹k_∑ª¡_öfo
 {

10 
pid_t
 
	mchûd_µid
;

11 
pid_t
 
	mchûd_pid
;

12 
å≠‰ame
 *
	m∑ª¡_tf_˝
;

13 
addr•a˚
 *
	mchûd_as
;

18 
add_chûd
(
chûd_li°
 **
hódî
, 
thªad
 *
√w_chûd
, 
pid_t
 
chûd_pid
,Öid_à
∑ª¡_pid
);

24 
pid_t
 
Æloc_√w_pid
 ();

32 
f‹k_chûd_£tup
(*
∑ª¡_öfo
, 
unu£d
);

34 
upd©e_pid_occupõd_li°
();

36 
˛órup_zombõs
(
chûd_li°
 *
zombõ_li°
);

38 
míu_waôpid
();

40 
vaddr_t
 
å™¶©e_¨gs_vaddr
(vaddr_à
u£rv
, 
addr•a˚
 *
as
, *
ödex
);

45 
öô_hóp_°¨t
(
addr•a˚
 *
as
);

	@include/queue.h

1 #i‚de‡
_QUEUE_H_


2 
	#_QUEUE_H_


	)

22 
	gqueue
;

24 
queue
 *
q_¸óã
(
size
);

25 
q_¥óŒoˇã
(
queue
 *, 
size
);

26 
q_em±y
(
queue
 *);

27 
q_addèû
(
queue
 *, *
±r
);

28 *
q_ªmhód
(
queue
 *);

29 
q_de°roy
(
queue
 *);

51 
q_gë°¨t
(
queue
 *);

52 
q_gëíd
(
queue
 *);

53 
q_gësize
(
queue
 *);

54 *
q_gëguy
(
queue
 *, 
ödex
);

	@include/scheduler.h

1 #i‚de‡
_SCHEDULER_H_


2 
	#_SCHEDULER_H_


	)

21 
	gthªad
;

23 
thªad
 *
scheduÀr
();

24 
make_ru¬abÀ
(
thªad
 *
t
);

26 
queue
* 
gërunqueue
();

27 
¥öt_run_queue
();

29 
scheduÀr_boŸ°øp
();

30 
scheduÀr_¥óŒoˇã
(
numthªads
);

31 
scheduÀr_kûœŒ
();

32 
scheduÀr_shutdown
();

	@include/sfs.h

1 #i‚de‡
_SFS_H_


2 
	#_SFS_H_


	)

7 
	~<vnode.h
>

8 
	~<fs.h
>

14 
	~<kîn/sfs.h
>

16 
	ssfs_vnode
 {

17 
vnode
 
	msv_v
;

18 
sfs_öode
 
	msv_i
;

19 
u_öt32_t
 
	msv_öo
;

20 
	msv_dúty
;

23 
	ssfs_fs
 {

24 
fs
 
	msfs_absfs
;

25 
sfs_su≥r
 
	msfs_su≥r
;

26 
	msfs_su≥rdúty
;

27 
devi˚
 *
	msfs_devi˚
;

28 
¨øy
 *
	msfs_vnodes
;

29 
bôm≠
 *
	msfs_‰ìm≠
;

30 
	msfs_‰ìm≠dúty
;

36 
sfs_mou¡
(c⁄° *
devi˚
);

44 
	#SFSUIO
(
uio
, 
±r
, 
block
, 
rw
) \

45 
	`mk_kuio
(
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

48 
sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio);

49 
sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
);

50 
sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
);

53 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

	@include/stdarg.h

1 #i‚de‡
_STDARG_H_


2 
	#_STDARG_H_


	)

5 
	~<lib.h
>

13 
__buûtö_va_li°
 
	t__va_li°
;

14 
__va_li°
 
	tva_li°
;

16 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

17 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

18 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

19 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

25 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

26 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
f
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

34 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

35 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@include/synch.h

5 #i‚de‡
_SYNCH_H_


6 
	#_SYNCH_H_


	)

21 
	s£m≠h‹e
 {

22 *
	m«me
;

23 vﬁ©ûê
	mcou¡
;

26 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

27 
P
(
£m≠h‹e
 *);

28 
V
(
£m≠h‹e
 *);

29 
£m_de°roy
(
£m≠h‹e
 *);

51 
	slock
 {

52 *
	m«me
;

54 vﬁ©ûê
	mhñd
;

58 
lock
 *
lock_¸óã
(c⁄° *
«me
);

59 
lock_acquúe
(
lock
 *);

60 
lock_ªÀa£
(
lock
 *);

61 
lock_do_i_hﬁd
(
lock
 *);

62 
lock_de°roy
(
lock
 *);

91 
	scv
 {

92 *
	m«me
;

98 
cv
 *
cv_¸óã
(c⁄° *
«me
);

99 
cv_waô
(
cv
 *cv, 
lock
 *lock);

100 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

101 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

102 
cv_de°roy
(
cv
 *);

	@include/syscall.h

1 #i‚de‡
_SYSCALL_H_


2 
	#_SYSCALL_H_


	)

3 
	~<ty≥s.h
>

4 
	~<machöe/å≠‰ame.h
>

9 
sys_ªboŸ
(
code
);

11 
sys_wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

12 
sys_ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
, *
ªtvÆ
);

13 
sys_f‹k
(
å≠‰ame
 *
tf
, 
öt32_t
 *
ªtvÆ
);

14 
sys_gëpid
(
öt32_t
 *
ªtvÆ
);

15 
sys_waôpid
(
pid_t
 
chûd_pid
, 
å≠‰ame
 *
tf
, 
öt32_t
 *
ªtvÆ
);

16 
sys__exô
(
å≠‰ame
 *
tf
, 
öt32_t
 *
ªtvÆ
, 
code
);

17 
sys_execv
(*
¥og
, *c⁄° *
¨gs
, 
öt32_t
 *
ªtvÆ
);

18 
sys_sbrk
(
size
, 
öt32_t
 *
ªtvÆ
);

	@include/test.h

1 #i‚de‡
_TEST_H_


2 
	#_TEST_H_


	)

9 
ˇtmou££m
(, **);

10 
ˇtmou£lock
(, **);

11 
¸óãˇrs
(, **);

18 
¨øyã°
(, **);

19 
bôm≠ã°
(, **);

20 
queuëe°
(, **);

23 
thªadã°
(, **);

24 
thªadã°2
(, **);

25 
thªadã°3
(, **);

26 
£mã°
(, **);

27 
lockã°
(, **);

28 
cvã°
(, **);

31 
f°e°
(, **);

32 
ªad°ªss
(, **);

33 
wrôe°ªss
(, **);

34 
wrôe°ªss2
(, **);

35 
¸óã°ªss
(, **);

36 
¥ötfûe
(, **);

39 
mÆlo˘e°
(, **);

40 
mÆloc°ªss
(, **);

41 
√âe°
(, **);

44 
míu
(*
¨g°r
);

50 
	sru≈rogøm_öfo
 {

51 *
	m¥og«me
;

52 
	m¨gc
;

53 **
	m¨gv
;

57 
ru≈rogøm
(
ru≈rogøm_öfo
 *
¥og_öfo
);

	@include/thread.h

1 #i‚de‡
_THREAD_H_


2 
	#_THREAD_H_


	)

9 
	~<machöe/pcb.h
>

10 
	~<ty≥s.h
>

12 
	#MAX_PID
 1000

	)

14 
	gaddr•a˚
;

16 
	sthªad
 {

21 
pcb
 
	mt_pcb
;

22 *
	mt_«me
;

23 c⁄° *
	mt_¶ì∑ddr
;

24 *
	mt_°ack
;

29 
¥o˚ss
 *
	m¥o˚ss
;

40 
addr•a˚
 *
	mt_vm•a˚
;

46 
vnode
 *
	mt_cwd
;

52 
	s¥o˚ss
 {

53 
pid_t
 
	mpid
;

54 
pid_t
 
	mµid
;

55 
	mexô_°©us
;

56 
chûd_li°
 *
	mchûd_li°
;

57 
thªad
 *
	mthªad
;

60 
	schûd_li°
 {

62 
thªad
 *
	mchûd
;

63 
pid_t
 
	mchûd_pid
;

64 
chûd_li°
 *
	m√xt
;

70 
	gpid_occupõd
[
MAX_PID
];

72 
¥öt_n⁄_zîo_pid
();

76 
öô_pid
();

78 
thªad
* 
gë_cuπhªad
();

80 
¨øy
* 
gë_¶ì≥rs
();

82 
¨øy
* 
gë_zombõs
();

85 
thªad
 *
thªad_boŸ°øp
();

88 
thªad_∑nic
();

91 
thªad_shutdown
();

103 
thªad_f‹k
(c⁄° *
«me
,

104 *
d©a1
, 
d©a2
,

105 (*
func
)(*, ),

106 
thªad
 **
ªt
);

112 
	`thªad_exô
();

119 
	`thªad_yõld
();

127 
	`thªad_¶ìp
(c⁄° *
addr
);

133 
	`thªad_wakeup
(c⁄° *
addr
);

135 
	`¥öt_Æl_thªad
();

141 
	`thªad_has¶ì≥rs
(c⁄° *
addr
);

149 
	`mi_thªad°¨t
(*
d©a1
, 
d©a2
,

150 (*
func
)(*, ));

153 
	`md_swôch
(
pcb
 *
ﬁd
, pcb *
nu
);

	@include/types.h

1 #i‚de‡
_TYPES_H_


2 
	#_TYPES_H_


	)

16 
	~<machöe/ty≥s.h
>

19 
	~<kîn/ty≥s.h
>

22 
	~<machöe/kty≥s.h
>

29 
	s__u£Ωå
 { 
	m_dummy
; };

30 
__u£Ωå
 *
	tu£Ωå_t
;

31 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

	@include/uio.h

1 #i‚de‡
_UIO_H_


2 
	#_UIO_H_


	)

9 
	euio_rw
 {

10 
	mUIO_READ
,

11 
	mUIO_WRITE
,

14 
	euio_£g
 {

15 
	mUIO_USERSPACE
,

16 
	mUIO_SYSSPACE
,

17 
	mUIO_USERISPACE
,

20 
	siovec
 {

22 *
	mun_kba£
;

23 
u£Ωå_t
 
	mun_uba£
;

24 } 
	miov_un
;

25 
size_t
 
	miov_Àn
;

27 
	#iov_kba£
 
iov_un
.
un_kba£


	)

28 
	#iov_uba£
 
iov_un
.
un_uba£


	)

30 
	suio
 {

31 
iovec
 
	muio_iovec
;

34 
off_t
 
	muio_off£t
;

35 
size_t
 
	muio_ªsid
;

36 
uio_£g
 
	muio_£gÊg
;

39 
uio_rw
 
	muio_rw
;

41 
addr•a˚
 *
	muio_•a˚
;

79 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

84 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

89 
mk_kuio
(
uio
 *, *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@include/version.h

1 #i‚de‡
_VERSION_H_


2 
	#_VERSION_H_


	)

8 
	#BASE_VERSION
 "1.11"

	)

13 
	#GROUP_VERSION
 "0"

	)

	@include/vfs.h

1 #i‚de‡
_VFS_H_


2 
	#_VFS_H_


	)

4 
	~<synch.h
>

13 
	guio
;

14 
	gdevi˚
;

15 
	gfs
;

16 
	gvnode
;

31 
vfs_£tcurdú
(
vnode
 *
dú
);

32 
vfs_˛órcurdú
();

33 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

34 
vfs_sync
();

35 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

36 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

49 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

50 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

51 *
buf
, 
size_t
 
buÊí
);

73 
vfs_›í
(*
∑th
, 
›íÊags
, 
vnode
 **
ªt
);

74 
vfs_˛o£
(
vnode
 *
vn
);

75 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

76 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

77 
vfs_mkdú
(*
∑th
);

78 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

79 
vfs_ªmove
(*
∑th
);

80 
vfs_rmdú
(*
∑th
);

81 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

83 
vfs_chdú
(*
∑th
);

84 
vfs_gëcwd
(
uio
 *
buf
);

135 
vfs_boŸ°øp
();

137 
vfs_öôboŸfs
();

138 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

139 
vfs_˛órboŸfs
();

141 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

142 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

144 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

145 (*
mou¡func
)(*
d©a
,

146 
devi˚
 *
dev
,

147 
fs
 **
ªsu…
));

148 
	`vfs_unmou¡
(c⁄° *
dev«me
);

149 
	`vfs_unmou¡Æl
();

	@include/vm.h

1 #i‚de‡
_VM_H_


2 
	#_VM_H_


	)

4 
	~<machöe/vm.h
>

5 
	~<addr•a˚.h
>

6 
	~<synch.h
>

8 
size_t
 
	gsw≠fûecou¡
;

10 
lock
 *
	géb_lock
;

17 
lock
 *
	glﬂd_evi˘_lock
;

32 
	#VM_FAULT_READ
 0

	)

33 
	#VM_FAULT_WRITE
 1

	)

34 
	#VM_FAULT_READONLY
 2

	)

50 
	#PPAGE_AVAILABLE
 0

	)

51 
	#PPAGE_OCCUPIED
 1

	)

52 
	#PPAGE_FIXED
 2

	)

54 
	#PPAGE_TEMP_FIXED
 3

	)

56 
	#PPAGE_K_FIXED
 4

	)

58 
	#PPAGE_REFERENCED
 100

	)

63 
size_t
 
	gøm_≈ages
;

65 
size_t
 
	gLRU_±r
;

69 
∑ddr_t
 
	gfú°∑ddr_öô
;

83 *
	gc‹em≠_íåy
;

84 
addr•a˚
 **
	gcm≠_as_íåy
;

85 
vaddr_t
 **
	gcm≠_±e_íåy
;

88 
vm_boŸ°øp
();

90 
gë_±_ödex
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, *
ma°î_i
, *
£c⁄d¨y_i
);

93 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

96 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

98 
vaddr_t
 
Æloc_k∑ges_dumb
(
≈ages
);

100 
∑ddr_t
 
gëµages
(
≈ages
);

102 
∑ddr_t
 
gëµages_°©us
(
≈ages
, 
°©us
);

103 
∑ddr_t
 
as_gëµages_°©us
(
≈ages
, 
°©us
, 
addr•a˚
 *
as
);

106 
‰ì_k∑ges
(
vaddr_t
 
addr
);

	@include/vm_helper.h

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

6 
	~<addr•a˚.h
>

7 
	~<vm.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/éb.h
>

10 
	~<db-hñ≥r.h
>

11 
	~<synch.h
>

12 
	~<machöe/éb.h
>

29 
föd_vi˘im
();

34 
∑ddr_t
 
evi˘i⁄
(
vi˘im
, 
°©us
, 
addr•a˚
 *
as
);

37 
sw≠ö
(
addr•a˚
 *
as
, 
off£t
, 
vaddr_t
 
vba£
);

39 
£t_dúty_bô
(
addr•a˚
 *
as
, 
ma°î_i
, 
£c⁄d¨y_i
);

	@include/vnode.h

1 #i‚de‡
_VNODE_H_


2 
	#_VNODE_H_


	)

4 
	guio
;

5 
	g°©
;

24 
	svnode
 {

25 
	mvn_ªfcou¡
;

26 
	mvn_›ícou¡
;

27 
lock
 *
	mvn_cou¡lock
;

29 
fs
 *
	mvn_fs
;

31 *
	mvn_d©a
;

33 c⁄° 
vnode_›s
 *
	mvn_›s
;

164 
	#VOP_MAGIC
 0xa2b3c4d5

	)

166 
	svnode_›s
 {

167 
	mv›_magic
;

169 (*
	mv›_›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

170 (*
	mv›_˛o£
)(
vnode
 *
	mobje˘
);

171 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

174 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

175 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

176 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

177 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

178 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

179 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

180 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
u_öt32_t
 *
	mªsu…
);

181 (*
	mv›_åy£ek
)(
vnode
 *
	mobje˘
, 
off_t
 
	mpos
);

182 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

183 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

184 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

185 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

188 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

189 c⁄° *
	m«me
, 
	mex˛
,

190 
vnode
 **
	mªsu…
);

191 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

192 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

193 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

194 c⁄° *
	m«me
);

195 (*
	mv›_lök
)(
vnode
 *
	mdú
,

196 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

197 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

198 c⁄° *
	m«me
);

199 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

200 c⁄° *
	m«me
);

202 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

203 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

206 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

207 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

208 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

209 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

210 *
	mbuf
, 
size_t
 
	mÀn
);

213 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

215 
	#VOP_OPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
›í
)(vn, fœgs))

	)

216 
	#VOP_CLOSE
(
vn
Ë(
	`__VOP
(vn, 
˛o£
)(vn))

	)

217 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

219 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

220 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

221 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

222 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

223 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

224 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

225 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

226 
	#VOP_TRYSEEK
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åy£ek
)(vn,Öos))

	)

227 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

228 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

229 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

230 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

232 
	#VOP_CREAT
(
vn
, 
«me
, 
ex˛
, 
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,Çame,Éx˛,Ñes))

	)

233 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

234 
	#VOP_MKDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame))

	)

235 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

236 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

237 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

238 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

240 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

241 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

246 
vnode_check
(
vnode
 *, c⁄° *
›
);

251 
vnode_ö¸ef
(
vnode
 *);

252 
vnode_de¸ef
(
vnode
 *);

254 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

255 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

263 
vnode_öc›í
(
vnode
 *);

264 
vnode_dec›í
(
vnode
 *);

266 
	#VOP_INCOPEN
(
vn
Ë
	`vnode_öc›í
(vn)

	)

267 
	#VOP_DECOPEN
(
vn
Ë
	`vnode_dec›í
(vn)

	)

273 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

274 
fs
 *fs, *
fsd©a
);

276 
	#VOP_INIT
(
vn
, 
›s
, 
fs
, 
d©a
Ë
	`vnode_öô
(vn, ops, fs, d©a)

	)

282 
vnode_kûl
(
vnode
 *);

284 
	#VOP_KILL
(
vn
Ë
	`vnode_kûl
(vn)

	)

	@lib/array.c

4 
	~<ty≥s.h
>

5 
	~<kîn/î∫o.h
>

6 
	~<lib.h
>

7 
	~<¨øy.h
>

9 
	s¨øy
 {

10 
	mnum
;

11 
	mmax
;

12 **
	mv
;

15 
¨øy
 *

16 
	$¨øy_¸óã
()

18 
¨øy
 *
a
 = 
	`kmÆloc
((array));

19 i‡(
a
==
NULL
) {

20  
NULL
;

22 
a
->
v
 = 
NULL
;

23 
a
->
num
 = 0;

24 
a
->
max
 = 0;

25  
a
;

26 
	}
}

29 
	$¨øy_gënum
(
¨øy
 *
a
)

31  
a
->
num
;

32 
	}
}

35 
	$¨øy_gëguy
(
¨øy
 *
a
, 
ödex
)

37 
	`as£π
(
a
->
num
 <a->
max
);

38 
	`as£π
(
ödex
 >=0 && index < 
a
->
num
);

39  
a
->
v
[
ödex
];

40 
	}
}

43 
	$¨øy_¥óŒoˇã
(
¨øy
 *
a
, 
nguys
)

45 **
√wv
;

46 
i
;

47 
√wmax
 = 
a
->
max
;

49 
	`as£π
(
a
->
num
 >=0 &&á->num <a->
max
);

51 
nguys
 > 
√wmax
) {

52 
√wmax
 = (newmax+1)*2;

54 
√wv
 = 
	`kmÆloc
(
√wmax
 * (*));

55 i‡(
√wv
==
NULL
) {

56  
ENOMEM
;

58 
a
->
max
 = 
√wmax
;

59 
i
=0; i<
a
->
num
; i++Ë
√wv
[i] =á->
v
[i];

60 i‡(
a
->
v
!=
NULL
) {

61 
	`k‰ì
(
a
->
v
);

63 
a
->
v
 = 
√wv
;

65 
	}
}

68 
	$¨øy_£tsize
(
¨øy
 *
a
, 
nguys
)

70 
ªsu…
;

72 
	`as£π
(
a
->
num
 >=0 &&á->num <a->
max
);

74 i‡(
nguys
 > 
a
->
max
) {

75 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
a
, 
nguys
);

76 i‡(
ªsu…
) {

77  
ªsu…
;

80 i‡(
nguys
==0 && 
a
->
max
 > 16) {

81 
	`as£π
(
a
->
v
!=
NULL
);

82 
	`k‰ì
(
a
->
v
);

83 
a
->
v
 = 
NULL
;

84 
a
->
max
 = 0;

86 
a
->
num
 = 
nguys
;

89 
	}
}

92 
	$¨øy_£tguy
(
¨øy
 *
a
, 
ödex
, *
±r
)

94 
	`as£π
(
a
->
num
 <a->
max
);

95 
	`as£π
(
ödex
 >=0 && index < 
a
->
num
);

96 
a
->
v
[
ödex
] = 
±r
;

97 
	}
}

100 
	$¨øy_add
(
¨øy
 *
a
, *
guy
)

102 
ix
, 
ªsu…
;

104 
ix
 = 
a
->
num
;

106 
ªsu…
 = 
	`¨øy_£tsize
(
a
, 
ix
+1);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 
a
->
v
[
ix
] = 
guy
;

114 
	}
}

117 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

119 
nmove
;

121 
	`as£π
(
a
->
num
 <a->
max
);

122 
	`as£π
(
ödex
 >=0 && index < 
a
->
num
);

124 
nmove
 = 
a
->
num
 - (
ödex
 + 1);

125 
	`memmove
(
a
->
v
+
ödex
,á->v+ödex+1, 
nmove
*(*));

126 
a
->
num
--;

127 
	}
}

130 
	$¨øy_de°roy
(
¨øy
 *
a
)

132 i‡(
a
->
v
Ë
	`k‰ì
(a->v);

133 
	`k‰ì
(
a
);

134 
	}
}

	@lib/bitmap.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<kîn/î∫o.h
>

9 
	~<bôm≠.h
>

20 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

21 
	#WORD_TYPE
 

	)

22 
	#WORD_ALLBITS
 (0xff)

	)

24 
	sbôm≠
 {

25 
u_öt32_t
 
	mnbôs
;

26 
WORD_TYPE
 *
	mv
;

30 
bôm≠
 *

31 
	$bôm≠_¸óã
(
u_öt32_t
 
nbôs
)

33 
bôm≠
 *
b
;

34 
u_öt32_t
 
w‹ds
;

36 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

37 
b
 = 
	`kmÆloc
((
bôm≠
));

38 i‡(
b
 =
NULL
) {

39  
NULL
;

41 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

42 i‡(
b
->
v
 =
NULL
) {

43 
	`k‰ì
(
b
);

44  
NULL
;

47 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

48 
b
->
nbôs
 =Çbits;

51 i‡(
nbôs
 / 
BITS_PER_WORD
 < 
w‹ds
) {

52 
u_öt32_t
 
j
, 
ix
 = 
w‹ds
-1;

53 
u_öt32_t
 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

55 
	`as£π
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

56 
	`as£π
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

58 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

59 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

63  
b
;

64 
	}
}

67 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

69  
b
->
v
;

70 
	}
}

73 
	$bôm≠_Æloc
(
bôm≠
 *
b
, 
u_öt32_t
 *
ödex
)

75 
u_öt32_t
 
ix
;

76 
u_öt32_t
 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

77 
u_öt32_t
 
off£t
;

79 
ix
=0; ix<
maxix
; ix++) {

80 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

81 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

82 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1)<<
off£t
;

83 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

84 
b
->
v
[
ix
] |
mask
;

85 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

86 
	`as£π
(*
ödex
 < 
b
->
nbôs
);

90 
	`as£π
(0);

93  
ENOSPC
;

94 
	}
}

97 
ölöe


99 
	$bôm≠_å™¶©e
(
u_öt32_t
 
bôno
, u_öt32_à*
ix
, 
WORD_TYPE
 *
mask
)

101 
u_öt32_t
 
off£t
;

102 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

103 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

104 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

105 
	}
}

108 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
u_öt32_t
 
ödex
)

110 
u_öt32_t
 
ix
;

111 
WORD_TYPE
 
mask
;

112 
	`as£π
(
ödex
 < 
b
->
nbôs
);

113 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

115 
	`as£π
((
b
->
v
[
ix
] & 
mask
)==0);

117 
b
->
v
[
ix
] |
mask
;

118 
	}
}

121 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
u_öt32_t
 
ödex
)

123 
u_öt32_t
 
ix
;

124 
WORD_TYPE
 
mask
;

125 
	`as£π
(
ödex
 < 
b
->
nbôs
);

126 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

128 
	`as£π
((
b
->
v
[
ix
] & 
mask
)!=0);

130 
b
->
v
[
ix
] &~
mask
;

131 
	}
}

135 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
u_öt32_t
 
ödex
)

137 
u_öt32_t
 
ix
;

138 
WORD_TYPE
 
mask
;

139 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

141  (
b
->
v
[
ix
] & 
mask
);

142 
	}
}

145 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

147 
	`k‰ì
(
b
->
v
);

148 
	`k‰ì
(
b
);

149 
	}
}

	@lib/copyinout.c

40 
	~<ty≥s.h
>

41 
	~<kîn/î∫o.h
>

42 
	~<lib.h
>

43 
	~<machöe/£tjmp.h
>

44 
	~<machöe/pcb.h
>

45 
	~<vm.h
>

46 
	~<thªad.h
>

47 
	~<cuπhªad.h
>

60 
	$c›yÁû
()

62 
	`l⁄gjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
, 1);

63 
	}
}

78 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

80 
vaddr_t
 
bŸ
, 
t›
;

82 *
°›Àn
 = 
Àn
;

84 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

85 
t›
 = 
bŸ
+
Àn
-1;

87 i‡(
t›
 < 
bŸ
) {

89  
EFAULT
;

92 i‡(
bŸ
 >
USERTOP
) {

94  
EFAULT
;

97 i‡(
t›
 >
USERTOP
) {

99 *
°›Àn
 = 
USERTOP
 - 
bŸ
;

103 
	}
}

113 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

115 
ªsu…
;

116 
size_t
 
°›Àn
;

118 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

119 i‡(
ªsu…
) {

120  
ªsu…
;

122 i‡(
°›Àn
 !
Àn
) {

124  
EFAULT
;

127 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

129 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

130 i‡(
ªsu…
) {

131 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

132  
EFAULT
;

135 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

137 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

139 
	}
}

149 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

151 
ªsu…
;

152 
size_t
 
°›Àn
;

154 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

155 i‡(
ªsu…
) {

156  
ªsu…
;

158 i‡(
°›Àn
 !
Àn
) {

160  
EFAULT
;

163 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

165 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

166 i‡(
ªsu…
) {

167 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

168  
EFAULT
;

171 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

173 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

175 
	}
}

195 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

196 
size_t
 *
gŸÀn
)

198 
size_t
 
i
;

199 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

200 
de°
[
i
] = 
§c
[i];

201 i‡(
§c
[
i
]==0) {

202 i‡(
gŸÀn
 !
NULL
) {

203 *
gŸÀn
 = 
i
+1;

208 i‡(
°›Àn
 < 
maxÀn
) {

210  
EFAULT
;

212  
ENAMETOOLONG
;

213 
	}
}

224 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

226 
ªsu…
;

227 
size_t
 
°›Àn
;

229 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

230 i‡(
ªsu…
) {

231  
ªsu…
;

234 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

236 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

237 i‡(
ªsu…
) {

238 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

239  
EFAULT
;

242 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

244 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

245  
ªsu…
;

246 
	}
}

257 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

259 
ªsu…
;

260 
size_t
 
°›Àn
;

262 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

263 i‡(
ªsu…
) {

264  
ªsu…
;

267 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

269 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

270 i‡(
ªsu…
) {

271 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

272  
EFAULT
;

275 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

277 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

278  
ªsu…
;

279 
	}
}

	@lib/kgets.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

11 
	$back•
()

13 
	`putch
('\b');

14 
	`putch
(' ');

15 
	`putch
('\b');

16 
	}
}

24 
	$kgës
(*
buf
, 
size_t
 
maxÀn
, size_à*
ªad_Àn
)

26 
size_t
 
pos
 = 0;

27 
ch
;

28 
Àn
 = 0;

29 
i
 = 0;

31 
ch
 = 
	`gëch
();

32 i‡(
ch
=='\n' || ch=='\r') {

33 
	`putch
('\n');

38 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

39 
	`putch
(
ch
);

40 
buf
[
pos
++] = 
ch
;

42 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

44 
	`back•
();

45 
pos
--;

47 i‡(
ch
==3) {

49 
	`putch
('^');

50 
	`putch
('C');

51 
	`putch
('\n');

52 
pos
 = 0;

55 i‡(
ch
==18) {

57 
buf
[
pos
] = 0;

58 
	`k¥ötf
("^R\n%s", 
buf
);

60 i‡(
ch
==21) {

62 
pos
 > 0) {

63 
	`back•
();

64 
pos
--;

67 i‡(
ch
==23) {

69 
pos
 > 0 && 
buf
[pos-1]==' ') {

70 
	`back•
();

71 
pos
--;

73 
pos
 > 0 && 
buf
[pos-1]!=' ') {

74 
	`back•
();

75 
pos
--;

79 
	`bìp
();

84 
Àn
 ++ ;

85 
i
 ++ ;

87 *
ªad_Àn
 = 
Àn
;

88 
buf
[
pos
] = 0;

89 
	}
}

92 
	$kgës_sysˇŒ
(*
buf
, 
size_t
 
maxÀn
, size_à*
ªad_Àn
)

94 
size_t
 
pos
 = 0;

95 
ch
;

96 
Àn
 = 0;

97 
i
 = 0;

98 
i
 < 
maxÀn
) {

99 
ch
 = 
	`gëch
();

100 i‡(
ch
=='\n' || ch=='\r') {

101 
	`putch
('\n');

106 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

107 
	`putch
(
ch
);

108 
buf
[
pos
++] = 
ch
;

110 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

112 
	`back•
();

113 
pos
--;

115 i‡(
ch
==3) {

117 
	`putch
('^');

118 
	`putch
('C');

119 
	`putch
('\n');

120 
pos
 = 0;

123 i‡(
ch
==18) {

125 
buf
[
pos
] = 0;

126 
	`k¥ötf
("^R\n%s", 
buf
);

128 i‡(
ch
==21) {

130 
pos
 > 0) {

131 
	`back•
();

132 
pos
--;

135 i‡(
ch
==23) {

137 
pos
 > 0 && 
buf
[pos-1]==' ') {

138 
	`back•
();

139 
pos
--;

141 
pos
 > 0 && 
buf
[pos-1]!=' ') {

142 
	`back•
();

143 
pos
--;

148 
	`putch
(
ch
);

149 
buf
[
pos
++] = 
ch
;

152 
Àn
 ++ ;

153 
i
 ++ ;

155 *
ªad_Àn
 = 
Àn
;

156 
buf
[
pos
] = 0;

157 
	}
}

	@lib/kheap.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<vm.h
>

4 
	~<machöe/•l.h
>

8 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

10 
u_öt32_t
 *
±r
 = 
v±r
;

11 
size_t
 
i
;

13 
i
=0; i<
Àn
/(
u_öt32_t
); i++) {

14 
±r
[
i
] = 0xdeadbeef;

16 
	}
}

45 #unde‡
SLOW


46 #unde‡
SLOWER


50 #i‡
PAGE_SIZE
 == 4096

52 
	#NSIZES
 8

	)

53 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

55 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

56 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

58 #ñi‡
PAGE_SIZE
 == 8192

66 
	s‰ìli°
 {

67 
‰ìli°
 *
	m√xt
;

70 
	s∑gîef
 {

71 
∑gîef
 *
	m√xt_ßmesize
;

72 
∑gîef
 *
	m√xt_Æl
;

73 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

74 
u_öt16_t
 
	m‰ìli°_off£t
;

75 
u_öt16_t
 
	mn‰ì
;

78 
	#INVALID_OFFSET
 (0xffff)

	)

80 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

81 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

82 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

104 
	#NPAGEREFS
 (
PAGE_SIZE
 / (
∑gîef
))

	)

105 
∑gîef
 
	g∑gîefs
[
NPAGEREFS
];

107 
	#INUSE_WORDS
 (
NPAGEREFS
/32)

	)

108 
u_öt32_t
 
	g∑gîefs_öu£
[
INUSE_WORDS
];

111 
∑gîef
 *

112 
	$Ælo˝agîef
()

114 
i
,
j
;

115 
u_öt32_t
 
k
;

117 
i
=0; i<
INUSE_WORDS
; i++) {

118 i‡(
∑gîefs_öu£
[
i
]==0xffffffff) {

122 
k
=1,
j
=0; k!=0; k<<=1,j++) {

123 i‡((
∑gîefs_öu£
[
i
] & 
k
)==0) {

124 
∑gîefs_öu£
[
i
] |
k
;

125  &
∑gîefs
[
i
*32 + 
j
];

128 
	`as£π
(0);

132  
NULL
;

133 
	}
}

137 
	$‰ì∑gîef
(
∑gîef
 *
p
)

139 
size_t
 
i
, 
j
;

140 
u_öt32_t
 
k
;

142 
j
 = 
p
-
∑gîefs
;

143 
	`as£π
(
j
 < 
NPAGEREFS
);

144 
i
 = 
j
/32;

145 
k
 = ((
u_öt32_t
)1Ë<< (
j
%32);

146 
	`as£π
((
∑gîefs_öu£
[
i
] & 
k
) != 0);

147 
∑gîefs_öu£
[
i
] &~
k
;

148 
	}
}

152 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

153 
∑gîef
 *
	gÆlba£
;

158 #ifde‡
SLOWER


159 #i‚de‡
SLOW


160 
	#SLOW


	)

164 #ifde‡
SLOW


167 
	$checksub∑ge
(
∑gîef
 *
¥
)

169 
vaddr_t
 
¥∑ge
, 
Êa
;

170 
‰ìli°
 *
Ê
;

171 
blkty≥
;

172 
n‰ì
=0;

174 
	`as£π
(
cur•l
>0);

176 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

177 
	`as£π
(
¥
->
n‰ì
==0);

181 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

182 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

184 
	`as£π
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

185 
	`as£π
(
¥
->
‰ìli°_off£t
 % 
sizes
[
blkty≥
] == 0);

187 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

188 
Ê
 = (
‰ìli°
 *)
Êa
;

190 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

191 
Êa
 = (
vaddr_t
)
Ê
;

192 
	`as£π
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

193 
	`as£π
((
Êa
-
¥∑ge
Ë% 
sizes
[
blkty≥
] == 0);

194 
	`as£π
(
Êa
 >
MIPS_KSEG0
);

195 
	`as£π
(
Êa
 < 
MIPS_KSEG1
);

196 
n‰ì
++;

198 
	`as£π
(
n‰ì
==
¥
->nfree);

199 
	}
}

201 
	#checksub∑ge
(
¥
Ë(()’r))

	)

204 #ifde‡
SLOWER


207 
	$checksub∑ges
()

209 
∑gîef
 *
¥
;

210 
i
;

211 
sc
=0, 
ac
=0;

213 
	`as£π
(
cur•l
>0);

215 
i
=0; i<
NSIZES
; i++) {

216 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

217 
	`checksub∑ge
(
¥
);

218 
	`as£π
(
sc
 < 
NPAGEREFS
);

219 
sc
++;

223 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

224 
	`checksub∑ge
(
¥
);

225 
	`as£π
(
ac
 < 
NPAGEREFS
);

226 
ac
++;

229 
	`as£π
(
sc
==
ac
);

230 
	}
}

232 
	#checksub∑ges
()

	)

239 
	$dumpsub∑ge
(
∑gîef
 *
¥
)

241 
vaddr_t
 
¥∑ge
, 
Êa
;

242 
‰ìli°
 *
Ê
;

243 
blkty≥
;

244 
i
, 
n
, 
ödex
;

245 
u_öt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

247 
	`checksub∑ge
(
¥
);

248 
	`as£π
(
cur•l
>0);

251 
i
=0; i<(
‰ìm≠
)/(freemap[0]); i++) {

252 
‰ìm≠
[
i
] = 0;

255 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

256 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

259 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

260 
	`as£π
(
n
 <32*(
‰ìm≠
)/(freemap[0]));

262 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

263 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

264 
Ê
 = (
‰ìli°
 *)
Êa
;

266 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

267 
Êa
 = (
vaddr_t
)
Ê
;

268 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

269 
	`as£π
(
ödex
<
n
);

270 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

274 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

275 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

276 (Ë
¥
->
n‰ì
, 
n
);

277 
	`k¥ötf
(" ");

278 
i
=0; i<
n
; i++) {

279 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

280 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

281 i‡(
i
%64==63 && i<
n
-1) {

282 
	`k¥ötf
("\n ");

285 
	`k¥ötf
("\n");

286 
	}
}

289 
	$khóp_¥öt°©s
()

291 
∑gîef
 *
¥
;

294 
•l
 = 
	`•lhigh
();

296 
	`k¥ötf
("Subpageállocator status:\n");

298 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

299 
	`dumpsub∑ge
(
¥
);

302 
	`•lx
(
•l
);

303 
	}
}

309 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

311 
∑gîef
 **
guy
;

313 
	`as£π
(
blkty≥
>=0 && blkty≥<
NSIZES
);

315 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

316 
	`checksub∑ge
(*
guy
);

317 i‡(*
guy
 =
¥
) {

318 *
guy
 = 
¥
->
√xt_ßmesize
;

323 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

324 
	`checksub∑ge
(*
guy
);

325 i‡(*
guy
 =
¥
) {

326 *
guy
 = 
¥
->
√xt_Æl
;

330 
	}
}

333 
ölöe


334 
	$blockty≥
(
size_t
 
sz
)

336 
i
;

337 
i
=0; i<
NSIZES
; i++) {

338 i‡(
sz
 <
sizes
[
i
]) {

339  
i
;

343 
	`∑nic
("Subpageállocator cannot handleállocation of size %lu\n",

344 ()
sz
);

348 
	}
}

352 
	$sub∑ge_kmÆloc
(
size_t
 
sz
)

354 
•l
;

355 
blkty≥
;

356 
∑gîef
 *
¥
;

357 
vaddr_t
 
¥∑ge
;

358 
vaddr_t
 
Êa
;

359 
‰ìli°
 *vﬁ©ûê
Ê
;

360 *
ªçå
;

362 vﬁ©ûê
i
;

365 
blkty≥
 = 
	`blockty≥
(
sz
);

366 
sz
 = 
sizes
[
blkty≥
];

368 
•l
 = 
	`•lhigh
();

370 
	`checksub∑ges
();

372 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

375 
	`as£π
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

376 
	`checksub∑ge
(
¥
);

378 i‡(
¥
->
n‰ì
 > 0) {

380 
dﬂŒoc
:

382 
	`as£π
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

383 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

384 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

385 
Ê
 = (
‰ìli°
 *)
Êa
;

387 
ªçå
 = 
Ê
;

388 
Ê
 = fl->
√xt
;

389 
¥
->
n‰ì
--;

391 i‡(
Ê
 !
NULL
) {

392 
	`as£π
(
¥
->
n‰ì
 > 0);

393 
Êa
 = (
vaddr_t
)
Ê
;

394 
	`as£π
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

395 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

398 
	`as£π
(
¥
->
n‰ì
 == 0);

399 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

402 
	`checksub∑ges
();

404 
	`•lx
(
•l
);

405  
ªçå
;

414 
¥
 = 
	`Ælo˝agîef
();

415 i‡(
¥
==
NULL
) {

417 
	`•lx
(
•l
);

418 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

419  
NULL
;

422 
¥∑ge
 = 
	`Æloc_k∑ges
(1);

423 i‡(
¥∑ge
==0) {

425 
	`‰ì∑gîef
(
¥
);

426 
	`•lx
(
•l
);

427 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

428  
NULL
;

431 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

432 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

440 
Êa
 = 
¥∑ge
;

441 
Ê
 = (
‰ìli°
 *)
Êa
;

442 
Ê
->
√xt
 = 
NULL
;

443 
i
=1; i<
¥
->
n‰ì
; i++) {

444 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

445 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

446 
	`as£π
(
Ê
 !Ê->
√xt
);

448 
Êa
 = (
vaddr_t
Ë
Ê
;

449 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

450 
	`as£π
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

452 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

453 
sizeba£s
[
blkty≥
] = 
¥
;

455 
¥
->
√xt_Æl
 = 
Ælba£
;

456 
Ælba£
 = 
¥
;

459 
dﬂŒoc
;

460 
	}
}

466 
	$sub∑ge_kmÆloc_dumb
(
size_t
 
sz
)

468 
•l
;

469 
blkty≥
;

470 
∑gîef
 *
¥
;

471 
vaddr_t
 
¥∑ge
;

472 
vaddr_t
 
Êa
;

473 
‰ìli°
 *vﬁ©ûê
Ê
;

474 *
ªçå
;

476 vﬁ©ûê
i
;

479 
blkty≥
 = 
	`blockty≥
(
sz
);

480 
sz
 = 
sizes
[
blkty≥
];

482 
•l
 = 
	`•lhigh
();

484 
	`checksub∑ges
();

486 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

489 
	`as£π
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

490 
	`checksub∑ge
(
¥
);

492 i‡(
¥
->
n‰ì
 > 0) {

494 
dﬂŒoc
:

496 
	`as£π
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

497 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

498 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

499 
Ê
 = (
‰ìli°
 *)
Êa
;

501 
ªçå
 = 
Ê
;

502 
Ê
 = fl->
√xt
;

503 
¥
->
n‰ì
--;

505 i‡(
Ê
 !
NULL
) {

506 
	`as£π
(
¥
->
n‰ì
 > 0);

507 
Êa
 = (
vaddr_t
)
Ê
;

508 
	`as£π
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

509 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

512 
	`as£π
(
¥
->
n‰ì
 == 0);

513 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

516 
	`checksub∑ges
();

518 
	`•lx
(
•l
);

519  
ªçå
;

528 
¥
 = 
	`Ælo˝agîef
();

529 i‡(
¥
==
NULL
) {

531 
	`•lx
(
•l
);

532 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

533  
NULL
;

540 
¥∑ge
 = 
	`Æloc_k∑ges_dumb
(1);

543 i‡(
¥∑ge
==0) {

545 
	`‰ì∑gîef
(
¥
);

546 
	`•lx
(
•l
);

547 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

548  
NULL
;

551 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

552 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

560 
Êa
 = 
¥∑ge
;

561 
Ê
 = (
‰ìli°
 *)
Êa
;

562 
Ê
->
√xt
 = 
NULL
;

563 
i
=1; i<
¥
->
n‰ì
; i++) {

564 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

565 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

566 
	`as£π
(
Ê
 !Ê->
√xt
);

568 
Êa
 = (
vaddr_t
Ë
Ê
;

569 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

570 
	`as£π
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

572 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

573 
sizeba£s
[
blkty≥
] = 
¥
;

575 
¥
->
√xt_Æl
 = 
Ælba£
;

576 
Ælba£
 = 
¥
;

579 
dﬂŒoc
;

580 
	}
}

584 
	$sub∑ge_k‰ì
(*
±r
)

586 
•l
;

587 
blkty≥
;

588 
vaddr_t
 
±øddr
;

589 
∑gîef
 *
¥
;

590 
vaddr_t
 
¥∑ge
;

591 
vaddr_t
 
Êa
;

592 
‰ìli°
 *
Ê
;

593 
vaddr_t
 
off£t
;

595 
±øddr
 = (
vaddr_t
)
±r
;

597 
•l
 = 
	`•lhigh
();

599 
	`checksub∑ges
();

601 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

602 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

603 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

606 
	`as£π
(
blkty≥
>=0 && blkty≥<
NSIZES
);

607 
	`checksub∑ge
(
¥
);

609 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

614 i‡(
¥
==
NULL
) {

616 
	`•lx
(
•l
);

620 
off£t
 = 
±øddr
 - 
¥∑ge
;

623 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

624 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

631 
	`fûl_dódbìf
(
±r
, 
sizes
[
blkty≥
]);

638 
Êa
 = 
¥∑ge
 + 
off£t
;

639 
Ê
 = (
‰ìli°
 *)
Êa
;

640 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

641 
Ê
->
√xt
 = 
NULL
;

643 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

645 
¥
->
‰ìli°_off£t
 = 
off£t
;

646 
¥
->
n‰ì
++;

648 
	`as£π
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

649 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

651 
	`ªmove_li°s
(
¥
, 
blkty≥
);

652 
	`‰ì_k∑ges
(
¥∑ge
);

653 
	`‰ì∑gîef
(
¥
);

656 
	`checksub∑ges
();

658 
	`•lx
(
•l
);

660 
	}
}

666 
	$kmÆloc
(
size_t
 
sz
)

668 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

669 
≈ages
;

670 
vaddr_t
 
addªss
;

673 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

674 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

675 i‡(
addªss
==0) {

676  
NULL
;

679  (*)
addªss
;

682 *
ªt
 = 
	`sub∑ge_kmÆloc
(
sz
);

683  
ªt
;

684 
	}
}

692 
	$kmÆloc_dumb
(
size_t
 
sz
)

694 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

695 
≈ages
;

696 
vaddr_t
 
addªss
;

699 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

700 
addªss
 = 
	`Æloc_k∑ges_dumb
(
≈ages
);

701 i‡(
addªss
==0) {

702  
NULL
;

705  (*)
addªss
;

708  
	`sub∑ge_kmÆloc_dumb
(
sz
);

709 
	}
}

713 
	$k‰ì
(*
±r
)

718 i‡(
±r
 =
NULL
) {

720 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

721 
	`as£π
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

722 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

724 
	}
}

	@lib/kprintf.c

1 
	~<ty≥s.h
>

2 
	~<°d¨g.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<synch.h
>

6 
	~<vfs.h
>

7 
	~<thªad.h
>

8 
	~<machöe/pcb.h
>

9 
	~<machöe/•l.h
>

12 
u_öt32_t
 
	gdbÊags
 = 0;

15 
lock
 *
	gk¥ötf_lock
;

26 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

28 
size_t
 
i
;

30 ()
junk
;

32 
i
=0; i<
Àn
; i++) {

33 
	`putch
(
d©a
[
i
]);

35 
	}
}

39 
	$k¥ötf_boŸ°øp
()

41 
	`as£π
(
k¥ötf_lock
 =
NULL
);

43 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

44 i‡(
k¥ötf_lock
 =
NULL
) {

45 
	`∑nic
("CouldÇot create kprintfÜock\n");

47 
	}
}

51 
	$k¥ötf
(c⁄° *
fmt
, ...)

53 
ch¨s
;

54 
va_li°
 
≠
;

56 i‡(
k¥ötf_lock
 !
NULL
 && !
ö_öãºu±
 && 
cur•l
==0) {

57 
	`lock_acquúe
(
k¥ötf_lock
);

60 
	`va_°¨t
(
≠
, 
fmt
);

61 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

62 
	`va_íd
(
≠
);

64 i‡(
k¥ötf_lock
 !
NULL
 && !
ö_öãºu±
 && 
cur•l
==0) {

65 
	`lock_ªÀa£
(
k¥ötf_lock
);

68  
ch¨s
;

69 
	}
}

77 
	$∑nic
(c⁄° *
fmt
, ...)

79 
va_li°
 
≠
;

92 vﬁ©ûê
evû
;

94 i‡(
evû
==0) {

95 
evû
 = 1;

103 
	`•lhigh
();

106 i‡(
evû
==1) {

107 
evû
 = 2;

109 
	`thªad_∑nic
();

112 i‡(
evû
==2) {

113 
evû
 = 3;

115 
	`k¥ötf
("panic: ");

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

121 i‡(
evû
==3) {

122 
evû
 = 4;

124 
	`vfs_sync
();

127 i‡(
evû
==4) {

128 
evû
 = 5;

130 
	`md_∑nic
();

138 
	}
}

	@lib/misc.c

1 
	~<ty≥s.h
>

2 
	~<kîn/îrmsg.h
>

3 
	~<lib.h
>

9 
	$k°rdup
(c⁄° *
s
)

11 *
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

12 i‡(
z
==
NULL
) {

13  
NULL
;

15 
	`°r˝y
(
z
, 
s
);

16  
z
;

17 
	}
}

24 
	$°ªº‹
(
îrcode
)

26 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

27  
sys_îæi°
[
îrcode
];

29 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

30  
NULL
;

31 
	}
}

	@lib/ntoh.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

20 #ifde‡
_LITTLE_ENDIAN


22 
	#SWAPFUNCS
(
size
, 
ty≥
) \

23 
ty≥
 \

24 
¡oh
##
	`size
(vﬁ©ûê
ty≥
 
vÆ
) \

26 vﬁ©ûê
ty≥
 
rv
; \

27 vﬁ©ûê*
§c
, *
de°
; \

28 
i
; \

29 
§c
 = (*)&
vÆ
; \

30 
de°
 = (*)&
rv
; \

31 
i
=0; i<(
rv
); i++) { \

32 
de°
[
i
] = 
§c
[(
rv
)-i-1]; \

34  
rv
; \

38 
ty≥
 \

39 
ht⁄
##
	`size
(
ty≥
 
vÆ
) \

41  
¡oh
##
	`size
(
vÆ
); \

42 }

	)

50 #ifde‡
_BIG_ENDIAN


52 
	#SWAPFUNCS
(
size
, 
ty≥
) \

53 
ty≥
 
¡oh
##
	`size
—y≥ 
vÆ
) {  val; } \

54 
ty≥
 
ht⁄
##
	`size
—y≥ 
vÆ
Ë{  vÆ; }

	)

58 #i‚de‡
SWAPFUNCS


62 
	$SWAPFUNCS
(
s
, 
u_öt16_t
)

63 
	$SWAPFUNCS
(
l
, 
u_öt32_t
)

64 
	`SWAPFUNCS
(
Œ
, 
u_öt64_t
)

	@lib/queue.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<queue.h
>

10 
	squeue
 {

11 
	msize
;

12 
	m√xtwrôe
;

13 
	m√xåód
;

14 **
	md©a
;

19 
	$q_grow
(
queue
 *
q
, 
èrgësize
)

21 **
ﬁdd©a
 = 
q
->
d©a
;

22 
⁄r
 = 
q
->
√xåód
;

23 
⁄w
 = 
q
->
√xtwrôe
;

24 
osize
 = 
q
->
size
;

26 
nsize
;

27 **
nd©a
;

29 
i
, 
ªsu…
;

31 
nsize
 = 
q
->
size
;

32 
nsize
 < 
èrgësize
) {

33 
nsize
 *= 2;

35 
	`as£π
(
nsize
 > 0);

37 
nd©a
 = 
	`kmÆloc
(
nsize
 * (*));

38 i‡(
nd©a
 =
NULL
) {

39  
ENOMEM
;

41 
q
->
size
 = 
nsize
;

42 
q
->
d©a
 = 
nd©a
;

43 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

45 
i
=
⁄r
; i!=
⁄w
; i = (i+1)%
osize
) {

46 
ªsu…
 = 
	`q_addèû
(
q
, 
ﬁdd©a
[
i
]);

47 
	`as£π
(
ªsu…
==0);

49 
	`k‰ì
(
ﬁdd©a
);

51 
	}
}

53 
queue
 *

54 
	$q_¸óã
(
size
)

56 
queue
 *
q
 = 
	`kmÆloc
((queue));

57 i‡(
q
==
NULL
) {

58  
NULL
;

60 
q
->
size
 = size;

61 
q
->
d©a
 = 
	`kmÆloc
(
size
 * (*));

62 i‡(
q
->
d©a
==
NULL
) {

63 
	`k‰ì
(
q
);

64  
NULL
;

66 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

67  
q
;

68 
	}
}

71 
	$q_¥óŒoˇã
(
queue
 *
q
, 
size
)

73 
ªsu…
 = 0;

75 
	`as£π
(
q
->
size
 > 0);

77 i‡(
size
 > 
q
->size) {

78 
ªsu…
 = 
	`q_grow
(
q
, 
size
);

80  
ªsu…
;

81 
	}
}

83 
ölöe


85 
	$q_em±y
(
queue
 *
q
)

87  
q
->
√xtwrôe
 =q->
√xåód
;

88 
	}
}

91 
	$q_addèû
(
queue
 *
q
, *
±r
)

93 
√xäext
, 
ªsu…
;

95 
	`as£π
(
q
->
size
 > 0);

97 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

98 i‡(
√xäext
==
q
->
√xåód
) {

99 
ªsu…
 = 
	`q_grow
(
q
, q->
size
+1);

100 i‡(
ªsu…
) {

101  
ªsu…
;

103 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

105 
q
->
d©a
[q->
√xtwrôe
] = 
±r
;

106 
q
->
√xtwrôe
 = 
√xäext
;

108 
	}
}

111 
	$q_ªmhód
(
queue
 *
q
)

113 *
ªt
;

115 
	`as£π
(
q
->
size
 > 0);

117 
	`as£π
(!
	`q_em±y
(
q
));

118 
ªt
 = 
q
->
d©a
[q->
√xåód
];

119 
q
->
√xåód
 = (q->√xåód+1)%q->
size
;

120  
ªt
;

121 
	}
}

124 
	$q_de°roy
(
queue
 *
q
)

126 
	`as£π
(
	`q_em±y
(
q
));

127 
	`k‰ì
(
q
->
d©a
);

128 
	`k‰ì
(
q
);

129 
	}
}

133 
	$q_gë°¨t
(
queue
 *
q
)

135  
q
->
√xåód
;

136 
	}
}

139 
	$q_gëíd
(
queue
 *
q
)

141  
q
->
√xtwrôe
;

142 
	}
}

145 
	$q_gësize
(
queue
 *
q
)

147  
q
->
size
;

148 
	}
}

151 
	$q_gëguy
(
queue
 *
q
, 
ödex
)

156 
	`as£π
(
ödex
>=0 && index<
q
->
size
);

157  
q
->
d©a
[
ödex
];

158 
	}
}

	@main/hello.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<machöe/•l.h
>

6 
	~<ã°.h
>

7 
	~<synch.h
>

8 
	~<thªad.h
>

9 
	~<scheduÀr.h
>

10 
	~<dev.h
>

11 
	~<vfs.h
>

12 
	~<vm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<vîsi⁄.h
>

16 
	$hñlo
(){

17 
	`k¥ötf
("Hello World\n");

18 
	}
}

	@main/main.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/uni°d.h
>

8 
	~<lib.h
>

9 
	~<machöe/•l.h
>

10 
	~<ã°.h
>

11 
	~<synch.h
>

12 
	~<thªad.h
>

13 
	~<scheduÀr.h
>

14 
	~<dev.h
>

15 
	~<vfs.h
>

16 
	~<vm.h
>

17 
	~<sysˇŒ.h
>

18 
	~<vîsi⁄.h
>

29 c⁄° 
buûdvîsi⁄
;

30 c⁄° 
buûdc⁄fig
[];

35 c⁄° 
	gh¨v¨d_c›yright
[] =

45 
	$boŸ
()

64 
	`k¥ötf
("\n");

65 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

66 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

67 
	`k¥ötf
("\n");

69 
	`k¥ötf
("os-026's system version %s (%s #%d)\n",

70 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

71 
	`hñlo
();

72 
	`k¥ötf
("\n");

74 
	`øm_boŸ°øp
();

75 
	`scheduÀr_boŸ°øp
();

76 
	`thªad_boŸ°øp
();

77 
	`vfs_boŸ°øp
();

78 
	`dev_boŸ°øp
();

79 
	`vm_boŸ°øp
();

80 
	`k¥ötf_boŸ°øp
();

83 
	`vfs_£tboŸfs
("emu0");

89 
	`as£π
((
u£Ωå_t
)==(*));

90 
	`as£π
((*(
u£Ωå_t
)0)==());

91 
	}
}

98 
	$shutdown
()

101 
	`k¥ötf
("Shutting down.\n");

103 
	`vfs_˛órboŸfs
();

104 
	`vfs_˛órcurdú
();

105 
	`vfs_unmou¡Æl
();

107 
	`•lhigh
();

109 
	`scheduÀr_shutdown
();

110 
	`thªad_shutdown
();

111 
	}
}

123 
	$sys_ªboŸ
(
code
)

125 
code
) {

126 
RB_REBOOT
:

127 
RB_HALT
:

128 
RB_POWEROFF
:

131  
EINVAL
;

134 
	`shutdown
();

136 
code
) {

137 
RB_HALT
:

138 
	`k¥ötf
("The system is halted.\n");

139 
	`md_hÆt
();

141 
RB_REBOOT
:

142 
	`k¥ötf
("Rebooting...\n");

143 
	`md_ªboŸ
();

145 
RB_POWEROFF
:

146 
	`k¥ötf
("The system is halted.\n");

147 
	`md_powîoff
();

151 
	`∑nic
("reboot operation failed\n");

153 
	}
}

160 
	$kmaö
(*
¨gumíts
)

162 
	`boŸ
();

163 
	`öô_pid
();

164 
	`míu
(
¨gumíts
);

168 
	}
}

	@main/menu.c

7 
	~<ty≥s.h
>

8 
	~<kîn/î∫o.h
>

9 
	~<kîn/uni°d.h
>

10 
	~<kîn/limôs.h
>

11 
	~<lib.h
>

12 
	~<˛ock.h
>

13 
	~<thªad.h
>

14 
	~<sysˇŒ.h
>

15 
	~<uio.h
>

16 
	~<vfs.h
>

17 
	~<sfs.h
>

18 
	~<ã°.h
>

20 
	~<¥o˚ss_hñ≥r.h
>

21 
	~<cuπhªad.h
>

22 
	~<machöe/éb.h
>

23 
	~<vm.h
>

24 
	~<machöe/•l.h
>

25 
	~<db-hñ≥r.h
>

27 
	~"›t-synch¥obs.h
"

28 
	~"›t-sfs.h
"

29 
	~"›t-√t.h
"

31 
	#_PATH_SHELL
 "/bö/sh"

	)

33 
	#MAXMENUARGS
 16

	)

35 
	#VM_DB
 1

	)

38 
	$gëöãrvÆ
(
time_t
 
s1
, 
u_öt32_t
 
ns1
,Åime_à
s2
, u_öt32_à
ns2
,

39 
time_t
 *
rs
, 
u_öt32_t
 *
∫s
)

41 i‡(
ns2
 < 
ns1
) {

42 
ns2
 += 1000000000;

43 
s2
--;

46 *
∫s
 = 
ns2
 - 
ns1
;

47 *
rs
 = 
s2
 - 
s1
;

48 
	}
}

67 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

69 **
¨gs
 = 
±r
;

70 
¥og«me
[128];

71 
ªsu…
;

73 
	`as£π
(
«rgs
 >= 1);

80 
	`as£π
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

82 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

83 
ru≈rogøm_öfo
 *
¥og_öfo
 = (ru≈rogøm_öfÿ*)
	`kmÆloc
((runprogram_info));

84 
¥og_öfo
->
¥og«me
 =Örogname;

85 
¥og_öfo
->
¨gc
 = 
«rgs
;

86 
¥og_öfo
->
¨gv
 = 
¨gs
;

87 
ªsu…
 = 
	`ru≈rogøm
(
¥og_öfo
);

88 i‡(
ªsu…
) {

89 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

90 
	`°ªº‹
(
ªsu…
));

95 
	}
}

111 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

113 
ªsu…
;

115 #i‡
OPT_SYNCHPROBS


116 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

120 #i‡
VM_DB


121 
i
;

122 
i
=0; i<20; i++){

125 
thªad
 *
√w_thªad
;

128 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

129 
¨gs
 , 
«rgs
 ,

130 
cmd_¥ogthªad
, &
√w_thªad
);

131 i‡(
ªsu…
) {

132 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

133  
ªsu…
;

136 
	`add_chûd
(&(
cuπhªad
->
¥o˚ss
->
chûd_li°
), 
√w_thªad
, 2, 1);

137 
	`míu_waôpid
();

138 
pid_occupõd
[2] = 0;

140 #i‡
VM_DB


146 
	}
}

153 
	$cmd_¥og
(
«rgs
, **
¨gs
)

155 i‡(
«rgs
 < 2) {

156 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

157  
EINVAL
;

161 
¨gs
++;

162 
«rgs
--;

164 
ªsu…
 = 
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

166  
ªsu…
;

167 
	}
}

174 
	$cmd_shñl
(
«rgs
, **
¨gs
)

176 ()
¨gs
;

177 i‡(
«rgs
 != 1) {

178 
	`k¥ötf
("Usage: s\n");

179  
EINVAL
;

182 
¨gs
[0] = (*)
_PATH_SHELL
;

184  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

185 
	}
}

189 c⁄° *
	gdbÊagmíu
[] = {

202 
NULL


204 c⁄° *
	gdbÊag_ödex
[] = {

205 "1","2","3","4","5","6","7","8","9","10","11","12", 
NULL


207 c⁄° 
u_öt32_t
 
	gdbÊag_vÆ
[] = {

210 
NULL


212 c⁄° *
	gdbÊag_«me
[] = {

214 "DB_EXEC", "DB_VFS", "DB_SFS", "DB_NET", "DB_NETFS", "DB_KMALLOC", 
NULL


219 
showmíu
(c⁄° *
«me
, c⁄° *
x
[]);

223 
	$£t_dbÊags
(
«rgs
, **
¨gs
)

225 i‡(
«rgs
 != 3)

227 
	`k¥ötf
("Usage: dfÇr on/off\n");

231 
Êag_°©us
[12];

232 
i
;

233 
ch™ge_Êag_num
=-1;

234 
mask
=1;

235 
i
=0; i<12; i++)

237 i‡(
dbÊags
&
mask
)

238 
Êag_°©us
[
i
]=1;

240 
Êag_°©us
[
i
]=0;

241 
mask
=mask*2;

242 i‡(
	`°rcmp
(
¨gs
[1],
dbÊag_ödex
[
i
])==0)

243 
ch™ge_Êag_num
=
i
;

246 i‡(
ch™ge_Êag_num
==-1 || (
	`°rcmp
(
¨gs
[2],"on")!=0 && strcmp(args[2],"off")!=0)){

247 
	`k¥ötf
("Usage: dfÇr on/off\n");

250 i‡(
	`°rcmp
(
¨gs
[2],"⁄")==0 && 
Êag_°©us
[
ch™ge_Êag_num
]==0)

252 
Êag_°©us
[
ch™ge_Êag_num
]=1;

253 
dbÊags
=dbÊags+
dbÊag_vÆ
[
ch™ge_Êag_num
];

255 i‡(
	`°rcmp
(
¨gs
[2],"off")==0 && 
Êag_°©us
[
ch™ge_Êag_num
]==1)

257 
Êag_°©us
[
ch™ge_Êag_num
]=0;

258 
dbÊags
=dbÊags-
dbÊag_vÆ
[
ch™ge_Êag_num
];

260 
i
=0; i<12; i++) {

261 i‡(
Êag_°©us
[
i
]==1){

262 
	`k¥ötf
("Debug mesßgê%s\n", 
dbÊag_«me
[
i
]);

267 
	}
}

270 
	$cmd_dbÊags
(
«rgs
, **
¨gs
)

272 ()
¨gs
;

273 i‡(
«rgs
 != 1)

275 
	`k¥ötf
("Usage: dbflags\n");

276  
EINVAL
;

278 
	`showmíu
("OS/161 Debug fœgs", 
dbÊagmíu
);

279 
	`k¥ötf
("\nCuºíàvÆuêo‡dbÊag†i†0x%x\n", 
dbÊags
);

284 
	}
}

290 
	$cmd_chdú
(
«rgs
, **
¨gs
)

292 i‡(
«rgs
 != 2) {

293 
	`k¥ötf
("Usage: cd directory\n");

294  
EINVAL
;

297  
	`vfs_chdú
(
¨gs
[1]);

298 
	}
}

305 
	$cmd_pwd
(
«rgs
, **
¨gs
)

307 
buf
[
PATH_MAX
+1];

308 
uio
 
ku
;

309 
ªsu…
;

311 ()
«rgs
;

312 ()
¨gs
;

314 
	`mk_kuio
(&
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

315 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

316 i‡(
ªsu…
) {

317 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

318  
ªsu…
;

322 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

325 
	`k¥ötf
("%s\n", 
buf
);

328 
	}
}

335 
	$cmd_sync
(
«rgs
, **
¨gs
)

337 ()
«rgs
;

338 ()
¨gs
;

340 
	`vfs_sync
();

343 
	}
}

350 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

352 ()
«rgs
;

353 ()
¨gs
;

355 
	`∑nic
("UserÑequestedÖanic\n");

357 
	}
}

364 
	$cmd_quô
(
«rgs
, **
¨gs
)

366 ()
«rgs
;

367 ()
¨gs
;

369 
	`vfs_sync
();

370 
	`sys_ªboŸ
(
RB_POWEROFF
);

371 
	`thªad_exô
();

373 
	}
}

381 c⁄° *
	m«me
;

382 (*
	mfunc
)(c⁄° *
	mdevi˚
);

383 } 
	gmou¡èbÀ
[] = {

384 #i‡
OPT_SFS


385 { "sfs", 
sfs_mou¡
 },

387 { 
NULL
, NULL }

392 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

394 *
f°y≥
;

395 *
devi˚
;

396 
i
;

398 i‡(
«rgs
 != 3) {

399 
	`k¥ötf
("Usage: mount fstype device:\n");

400  
EINVAL
;

403 
f°y≥
 = 
¨gs
[1];

404 
devi˚
 = 
¨gs
[2];

407 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

408 
devi˚
[
	`°æí
(device)-1] = 0;

411 
i
=0; 
mou¡èbÀ
[i].
«me
; i++) {

412 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

413  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

416 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

417  
EINVAL
;

418 
	}
}

422 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

424 *
devi˚
;

426 i‡(
«rgs
 != 2) {

427 
	`k¥ötf
("Usage: unmount device:\n");

428  
EINVAL
;

431 
devi˚
 = 
¨gs
[1];

434 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

435 
devi˚
[
	`°æí
(device)-1] = 0;

438  
	`vfs_unmou¡
(
devi˚
);

439 
	}
}

451 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

453 *
devi˚
;

455 i‡(
«rgs
 != 2) {

456 
	`k¥ötf
("Usage: bootfs device\n");

457  
EINVAL
;

460 
devi˚
 = 
¨gs
[1];

463 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

464 
devi˚
[
	`°æí
(device)-1] = 0;

467  
	`vfs_£tboŸfs
(
devi˚
);

468 
	}
}

472 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

474 ()
«rgs
;

475 ()
¨gs
;

477 
	`khóp_¥öt°©s
();

480 
	}
}

489 
	$cmd_éb°©s
(
«rgs
, **
¨gs
)

491 ()
«rgs
;

492 ()
¨gs
;

495 
u_öt32_t
 
i
;

496 
u_öt32_t
 
íåyhi
, 
íåylo
;

498 
•l
 = 
	`•lhigh
();

512 
	`k¥ötf
("====Ålb stat (user) ====\n");

513 
i
 = 0; i < 
NUM_TLB
; i++) {

514 
	`TLB_Ród
(&
íåyhi
, &
íåylo
, 
i
);

515 i‡(
íåyhi
 < 2147483648) {

516 i‡(
i
 < 10) {

517 
	`k¥ötf
("[0%u]: 0x%08x, 0x%08x\n", 
i
, 
íåyhi
, 
íåylo
);

519 
	`k¥ötf
("[%u]: 0x%08x, 0x%08x\n", 
i
, 
íåyhi
, 
íåylo
);

524 
	`•lx
(
•l
);

527 
	}
}

530 
	$cmd_c‹em≠°©s
(
«rgs
, **
¨gs
)

532 ()
«rgs
;

533 ()
¨gs
;

534 
size_t
 
i
;

536 
•l
 = 
	`•lhigh
();

538 
	`k¥ötf
("==== coremap ====\n");

539 
	`k¥ötf
("øm sèπÖaddr: 0x%08x\n", 
fú°∑ddr_öô
);

540 
	`k¥ötf
("øm_≈age†%u\n", 
øm_≈ages
);

541 
size_t
 
n
;

542 i‡(
øm_≈ages
%2 == 0){

543 
n
 = 
øm_≈ages
/2;

545 
n
 = 
øm_≈ages
/2 + 1;

547 
i
 = 0; i < 
n
; i++) {

548 
°©us
 = *(
c‹em≠_íåy
+
i
)%10;

549 
blksz
 = (*(
c‹em≠_íåy
+
i
)%100)/10;

550 
vaddr_t
 
addr
 = *(
cm≠_as_íåy
+
i
);

551 i‡(
i
 < 10) {

552 
	`k¥ötf
("[0%u]: %d : %d\t0x%08x", 
i
, 
°©us
, 
blksz
, 
addr
);

554 
	`k¥ötf
("[%u]: %d : %d\t0x%08x", 
i
, 
°©us
, 
blksz
, 
addr
);

556 i‡(
i
+
n
 < 
øm_≈ages
) {

557 
°©us
 = *(
c‹em≠_íåy
+
i
+
n
)%10;

558 
blksz
 = (*(
c‹em≠_íåy
+
i
+
n
)%100)/10;

559 
addr
 = *(
cm≠_as_íåy
+
i
+
n
);

560 
	`k¥ötf
("\t| [%u]: %d : %d\t0x%08x\n", 
i
+
n
, 
°©us
, 
blksz
, 
addr
);

562 
	`k¥ötf
("\n");

566 
	`•lx
(
•l
);

569 
	}
}

576 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

578 
˘
, 
hÆf
, 
i
;

580 
	`k¥ötf
("\n");

581 
	`k¥ötf
("%s\n", 
«me
);

583 
i
=
˘
=0; 
x
[i]; i++) {

584 
˘
++;

586 
hÆf
 = (
˘
+1)/2;

588 
i
=0; i<
hÆf
; i++) {

589 
	`k¥ötf
(" %-36s", 
x
[
i
]);

590 i‡(
i
+
hÆf
 < 
˘
) {

591 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

593 
	`k¥ötf
("\n");

595 
	}
}

597 c⁄° *
	g›smíu
[] = {

610 
NULL


615 
	$cmd_›smíu
(
n
, **
a
)

617 ()
n
;

618 ()
a
;

620 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

622 
	}
}

624 c⁄° *
	gã°míu
[] = {

633 #i‡
OPT_NET


644 
NULL


649 
	$cmd_ã°míu
(
n
, **
a
)

651 ()
n
;

652 ()
a
;

654 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

655 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

657 
	`k¥ötf
(" (4) TheseÅests will fail until you finishÅhe "

659 
	`k¥ötf
("\n");

662 
	}
}

664 c⁄° *
	gmaömíu
[] = {

667 #i‡
OPT_SYNCHPROBS


676 
NULL


681 
	$cmd_maömíu
(
n
, **
a
)

683 ()
n
;

684 ()
a
;

686 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

688 
	}
}

695 c⁄° *
	m«me
;

696 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

697 } 
	gcmdèbÀ
[] = {

699 { "?", 
cmd_maömíu
 },

700 { "h", 
cmd_maömíu
 },

701 { "hñp", 
cmd_maömíu
 },

702 { "?o", 
cmd_›smíu
 },

703 { "?t", 
cmd_ã°míu
 },

706 { "s", 
cmd_shñl
 },

707 { "p", 
cmd_¥og
 },

708 { "mou¡", 
cmd_mou¡
 },

709 { "dbÊags", 
cmd_dbÊags
},

710 { "unmou¡", 
cmd_unmou¡
 },

711 { "dbÊag", 
cmd_dbÊags
 },

712 { "boŸfs", 
cmd_boŸfs
 },

713 { "pf", 
¥ötfûe
 },

714 { "cd", 
cmd_chdú
 },

715 { "pwd", 
cmd_pwd
 },

716 { "sync", 
cmd_sync
 },

717 { "∑nic", 
cmd_∑nic
 },

718 { "q", 
cmd_quô
 },

719 { "exô", 
cmd_quô
 },

720 { "hÆt", 
cmd_quô
 },

721 { "df", 
£t_dbÊags
},

723 #i‡
OPT_SYNCHPROBS


725 { "1a", 
ˇtmou££m
 },

726 { "1b", 
ˇtmou£lock
 },

727 { "1c", 
¸óãˇrs
 },

731 { "kh", 
cmd_khóp°©s
 },

732 { "éb", 
cmd_éb°©s
 },

733 { "cm≠", 
cmd_c‹em≠°©s
},

736 { "©", 
¨øyã°
 },

737 { "bt", 
bôm≠ã°
 },

738 { "qt", 
queuëe°
 },

739 { "km1", 
mÆlo˘e°
 },

740 { "km2", 
mÆloc°ªss
 },

741 #i‡
OPT_NET


742 { "√t", 
√âe°
 },

744 { "â1", 
thªadã°
 },

745 { "â2", 
thªadã°2
 },

746 { "â3", 
thªadã°3
 },

747 { "sy1", 
£mã°
 },

750 { "sy2", 
lockã°
 },

751 { "sy3", 
cvã°
 },

754 { "fs1", 
f°e°
 },

755 { "fs2", 
ªad°ªss
 },

756 { "fs3", 
wrôe°ªss
 },

757 { "fs4", 
wrôe°ªss2
 },

758 { "fs5", 
¸óã°ªss
 },

760 { 
NULL
, NULL }

768 
	$cmd_di•©ch
(*
cmd
)

770 
time_t
 
bef‹e£cs
, 
a·î£cs
, 
£cs
;

771 
u_öt32_t
 
bef‹í£cs
, 
a·în£cs
, 
n£cs
;

772 *
¨gs
[
MAXMENUARGS
];

773 
«rgs
=0;

774 *
w‹d
;

775 *
c⁄ãxt
;

776 
i
, 
ªsu…
;

778 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

779 
w‹d
 !
NULL
;

780 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

782 i‡(
«rgs
 >
MAXMENUARGS
) {

783 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

784  
E2BIG
;

786 
¨gs
[
«rgs
++] = 
w‹d
;

789 i‡(
«rgs
==0) {

793 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

794 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

795 
	`as£π
(
cmdèbÀ
[
i
].
func
!=
NULL
);

797 
	`gëtime
(&
bef‹e£cs
, &
bef‹í£cs
);

800 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

802 
	`gëtime
(&
a·î£cs
, &
a·în£cs
);

803 
	`gëöãrvÆ
(
bef‹e£cs
, 
bef‹í£cs
,

804 
a·î£cs
, 
a·în£cs
,

805 &
£cs
, &
n£cs
);

807 
	`k¥ötf
("OperationÅook %lu.%09lu seconds\n",

808 (Ë
£cs
,

809 (Ë
n£cs
);

811  
ªsu…
;

815 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

816  
EINVAL
;

817 
	}
}

828 
	$míu_execuã
(*
löe
, 
ißrgs
)

830 *
comm™d
;

831 *
c⁄ãxt
;

832 
ªsu…
;

834 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

835 
comm™d
 !
NULL
;

836 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

838 i‡(
ißrgs
) {

839 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

842 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

843 i‡(
ªsu…
) {

844 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

845 i‡(
ißrgs
) {

846 
	`∑nic
("FailureÖrocessing kernelárguments\n");

850 
	}
}

870 
	$míu
(*
¨gs
)

872 
buf
[64];

874 
	`míu_execuã
(
¨gs
, 1);

876 
size_t
 
Àn
;

878 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

880 
	`kgës
(
buf
, (buf), &
Àn
);

881 
	`míu_execuã
(
buf
, 0);

883 
	}
}

	@test/arraytest.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<¨øy.h
>

4 
	~<ã°.h
>

6 
	#TESTSIZE
 73

	)

10 
	$ã°a
(
¨øy
 *
a
)

12 
ã°¨øy
[
TESTSIZE
];

13 
i
, 
j
, 
n
, 
r
, *
p
;

15 
i
=0; i<
TESTSIZE
; i++) {

16 
ã°¨øy
[
i
]=i;

19 
n
 = 
	`¨øy_gënum
(
a
);

20 
	`as£π
(
n
==0);

22 
i
=0; i<
TESTSIZE
; i++) {

23 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
]);

24 
	`as£π
(
r
==0);

25 
n
 = 
	`¨øy_gënum
(
a
);

26 
	`as£π
(
n
==
i
+1);

28 
n
 = 
	`¨øy_gënum
(
a
);

29 
	`as£π
(
n
==
TESTSIZE
);

31 
i
=0; i<
TESTSIZE
; i++) {

32 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

33 
	`as£π
(*
p
 =
i
);

35 
n
 = 
	`¨øy_gënum
(
a
);

36 
	`as£π
(
n
==
TESTSIZE
);

38 
j
=0; j<
TESTSIZE
*4; j++) {

39 
i
 = 
	`øndom
()%
TESTSIZE
;

40 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

41 
	`as£π
(*
p
 =
i
);

43 
n
 = 
	`¨øy_gënum
(
a
);

44 
	`as£π
(
n
==
TESTSIZE
);

46 
i
=0; i<
TESTSIZE
; i++) {

47 
	`¨øy_£tguy
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

50 
i
=0; i<
TESTSIZE
; i++) {

51 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

52 
	`as£π
(*
p
 =
TESTSIZE
-
i
-1);

55 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

56 
	`as£π
(
r
==0);

58 
i
=0; i<
TESTSIZE
/2; i++) {

59 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

60 
	`as£π
(*
p
 =
TESTSIZE
-
i
-1);

63 
	`¨øy_ªmove
(
a
, 1);

65 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

66 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

67 
	`as£π
(*
p
 =
TESTSIZE
-
i
-2);

69 
p
 = 
	`¨øy_gëguy
(
a
, 0);

70 
	`as£π
(*
p
 =
TESTSIZE
-1);

72 
	`¨øy_£tsize
(
a
, 2);

73 
p
 = 
	`¨øy_gëguy
(
a
, 0);

74 
	`as£π
(*
p
 =
TESTSIZE
-1);

75 
p
 = 
	`¨øy_gëguy
(
a
, 1);

76 
	`as£π
(*
p
 =
TESTSIZE
-3);

78 
	`¨øy_£tguy
(
a
, 1, 
NULL
);

79 
	`¨øy_£tsize
(
a
, 2);

80 
p
 = 
	`¨øy_gëguy
(
a
, 0);

81 
	`as£π
(*
p
 =
TESTSIZE
-1);

82 
p
 = 
	`¨øy_gëguy
(
a
, 1);

83 
	`as£π
(
p
==
NULL
);

85 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

86 
p
 = 
	`¨øy_gëguy
(
a
, 0);

87 
	`as£π
(*
p
 =
TESTSIZE
-1);

88 
p
 = 
	`¨øy_gëguy
(
a
, 1);

89 
	`as£π
(
p
==
NULL
);

90 
	}
}

93 
	$¨øyã°
(
«rgs
, **
¨gs
)

95 
¨øy
 *
a
;

97 ()
«rgs
;

98 ()
¨gs
;

100 
	`k¥ötf
("BeginningárrayÅest...\n");

101 
a
 = 
	`¨øy_¸óã
();

102 
	`as£π
(
a
 !
NULL
);

104 
	`ã°a
(
a
);

106 
	`¨øy_£tsize
(
a
, 0);

108 
	`ã°a
(
a
);

110 
	`¨øy_de°roy
(
a
);

112 
	`k¥ötf
("ArrayÅest complete\n");

114 
	}
}

	@test/bitmaptest.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<bôm≠.h
>

4 
	~<ã°.h
>

6 
	#TESTSIZE
 533

	)

9 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

11 
bôm≠
 *
b
;

12 
d©a
[
TESTSIZE
];

13 
u_öt32_t
 
x
;

14 
i
;

16 ()
«rgs
;

17 ()
¨gs
;

19 
	`k¥ötf
("Starting bitmapÅest...\n");

21 
i
=0; i<
TESTSIZE
; i++) {

22 
d©a
[
i
] = 
	`øndom
()%2;

25 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

26 
	`as£π
(
b
 !
NULL
);

28 
i
=0; i<
TESTSIZE
; i++) {

29 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
)==0);

32 
i
=0; i<
TESTSIZE
; i++) {

33 i‡(
d©a
[
i
]) {

34 
	`bôm≠_m¨k
(
b
, 
i
);

37 
i
=0; i<
TESTSIZE
; i++) {

38 i‡(
d©a
[
i
]) {

39 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
));

42 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
)==0);

46 
i
=0; i<
TESTSIZE
; i++) {

47 i‡(
d©a
[
i
]) {

48 
	`bôm≠_unm¨k
(
b
, 
i
);

51 
	`bôm≠_m¨k
(
b
, 
i
);

54 
i
=0; i<
TESTSIZE
; i++) {

55 i‡(
d©a
[
i
]) {

56 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
)==0);

59 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
));

63 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

64 
	`as£π
(
x
 < 
TESTSIZE
);

65 
	`as£π
(
	`bôm≠_is£t
(
b
, 
x
));

66 
	`as£π
(
d©a
[
x
]==1);

67 
d©a
[
x
] = 0;

70 
i
=0; i<
TESTSIZE
; i++) {

71 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
));

72 
	`as£π
(
d©a
[
i
]==0);

75 
	`k¥ötf
("BitmapÅest complete\n");

77 
	}
}

	@test/fstest.c

12 
	~<ty≥s.h
>

13 
	~<kîn/î∫o.h
>

14 
	~<kîn/uni°d.h
>

15 
	~<lib.h
>

16 
	~<synch.h
>

17 
	~<fs.h
>

18 
	~<vnode.h
>

19 
	~<vfs.h
>

20 
	~<uio.h
>

21 
	~<ã°.h
>

22 
	~<thªad.h
>

24 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

25 
	#FILENAME
 "f°e°.tmp"

	)

26 
	#NCHUNKS
 720

	)

27 
	#NTHREADS
 12

	)

28 
	#NCREATES
 32

	)

30 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

34 
	$öô_thªad£m
()

36 i‡(
thªad£m
==
NULL
) {

37 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

38 i‡(
thªad£m
 =
NULL
) {

39 
	`∑nic
("fstest: sem_create failed\n");

42 
	}
}

50 
	$rŸ©e
(*
°r
, 
amt
)

52 
i
, 
ch
;

54 
amt
 = (amt+2600)%26;

55 
	`as£π
(
amt
>=0);

57 
i
=0; 
°r
[i]; i++) {

58 
ch
 = 
°r
[
i
];

59 i‡(
ch
>='A' && ch<='Z') {

60 
ch
 = ch - 'A';

61 
ch
 +
amt
;

62 
ch
 %= 26;

63 
ch
 = ch + 'A';

64 
	`as£π
(
ch
>='A' && ch<='Z');

66 
°r
[
i
] = 
ch
;

68 
	}
}

74 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

75 c⁄° *
fs
, c⁄° *
«mesuffix
)

77 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

78 
	`as£π
(
	`°æí
(
buf
Ë< 
buÊí
);

79 
	}
}

81 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

85 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

87 
«me
[32];

88 
buf
[32];

89 
îr
;

91 
	`MAKENAME
();

93 
	`°r˝y
(
buf
, 
«me
);

94 
îr
 = 
	`vfs_ªmove
(
buf
);

95 i‡(
îr
) {

96 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

101 
	}
}

105 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

106 
°ridesize
, 
°ridïos
)

108 
vnode
 *
vn
;

109 
îr
;

110 
i
;

111 
size_t
 
shouldbyãs
=0;

112 
size_t
 
byãs
=0;

113 
off_t
 
pos
=0;

114 
«me
[32];

115 
buf
[32];

116 
uio
 
ku
;

117 
Êags
;

119 
	`as£π
((
buf
Ë> 
	`°æí
(
SLOGAN
));

121 
	`MAKENAME
();

123 
Êags
 = 
O_WRONLY
|
O_CREAT
;

124 i‡(
°ridesize
 == 1) {

125 
Êags
 |
O_TRUNC
;

129 
	`°r˝y
(
buf
, 
«me
);

130 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, &
vn
);

131 i‡(
îr
) {

132 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

133 
«me
, 
	`°ªº‹
(
îr
));

137 
i
=0; i<
NCHUNKS
; i++) {

138 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

139 
pos
 +
	`°æí
(
SLOGAN
);

142 
	`°r˝y
(
buf
, 
SLOGAN
);

143 
	`rŸ©e
(
buf
, 
i
);

144 
	`mk_kuio
(&
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

145 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

146 i‡(
îr
) {

147 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

148 
	`vfs_˛o£
(
vn
);

149 
	`vfs_ªmove
(
«me
);

153 i‡(
ku
.
uio_ªsid
 > 0) {

154 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

155 
«me
, (Ë
ku
.
uio_ªsid
);

156 
	`vfs_˛o£
(
vn
);

157 
	`vfs_ªmove
(
«me
);

161 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

162 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

163 
pos
 = 
ku
.
uio_off£t
;

166 
	`vfs_˛o£
(
vn
);

168 i‡(
byãs
 !
shouldbyãs
) {

169 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

170 
«me
, (Ë
byãs
,

171 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

172 
	`vfs_ªmove
(
«me
);

175 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

178 
	}
}

182 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

184 
vnode
 *
vn
;

185 
îr
;

186 
i
;

187 
size_t
 
byãs
=0;

188 
«me
[32];

189 
buf
[32];

190 
uio
 
ku
;

192 
	`MAKENAME
();

195 
	`°r˝y
(
buf
, 
«me
);

196 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, &
vn
);

197 i‡(
îr
) {

198 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

199 
	`°ªº‹
(
îr
));

203 
i
=0; i<
NCHUNKS
; i++) {

204 
	`mk_kuio
(&
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

205 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

206 i‡(
îr
) {

207 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

208 
	`vfs_˛o£
(
vn
);

212 i‡(
ku
.
uio_ªsid
 > 0) {

213 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

214 (Ë
ku
.
uio_ªsid
);

215 
	`vfs_˛o£
(
vn
);

218 
buf
[
	`°æí
(
SLOGAN
)] = 0;

219 
	`rŸ©e
(
buf
, -
i
);

220 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

221 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

222 
«me
, 
i
+1, 
buf
);

223 
	`vfs_˛o£
(
vn
);

227 
byãs
 = 
ku
.
uio_off£t
;

230 
	`vfs_˛o£
(
vn
);

232 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

233 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

234 
«me
, (Ë
byãs
,

235 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

238 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

240 
	}
}

246 
	$dof°e°
(c⁄° *
fûesys
)

248 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

250 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

251 
	`k¥ötf
("*** Test failed\n");

255 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

256 
	`k¥ötf
("*** Test failed\n");

260 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

261 
	`k¥ötf
("*** Test failed\n");

265 
	`k¥ötf
("*** FilesystemÅest done\n");

266 
	}
}

272 
	$ªad°ªss_thªad
(*
fs
, 
num
)

274 c⁄° *
fûesys
 = 
fs
;

275 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

276 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

278 
	`V
(
thªad£m
);

279 
	}
}

283 
	$d‹ód°ªss
(c⁄° *
fûesys
)

285 
i
, 
îr
;

287 
	`öô_thªad£m
();

289 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

291 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

292 
	`k¥ötf
("*** Test failed\n");

296 
i
=0; i<
NTHREADS
; i++) {

297 
îr
 = 
	`thªad_f‹k
("ªad°ªss", (*)
fûesys
, 
i
,

298 
ªad°ªss_thªad
, 
NULL
);

299 i‡(
îr
) {

300 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

301 
	`°ªº‹
(
îr
));

305 
i
=0; i<
NTHREADS
; i++) {

306 
	`P
(
thªad£m
);

309 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

310 
	`k¥ötf
("*** Test failed\n");

314 
	`k¥ötf
("*** fsÑead stressÅest done\n");

315 
	}
}

321 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

323 c⁄° *
fûesys
 = 
fs
;

324 
num°r
[8];

325 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

327 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

328 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

329 
	`V
(
thªad£m
);

333 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

334 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

335 
	`V
(
thªad£m
);

339 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

340 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

343 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

345 
	`V
(
thªad£m
);

346 
	}
}

350 
	$dowrôe°ªss
(c⁄° *
fûesys
)

352 
i
, 
îr
;

354 
	`öô_thªad£m
();

356 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

358 
i
=0; i<
NTHREADS
; i++) {

359 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", (*)
fûesys
, 
i
,

360 
wrôe°ªss_thªad
, 
NULL
);

361 i‡(
îr
) {

362 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

366 
i
=0; i<
NTHREADS
; i++) {

367 
	`P
(
thªad£m
);

370 
	`k¥ötf
("*** fs write stressÅest done\n");

371 
	}
}

377 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

379 c⁄° *
fûesys
 = 
fs
;

381 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

382 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

383 
	`V
(
thªad£m
);

387 
	`V
(
thªad£m
);

388 
	}
}

392 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

394 
i
, 
îr
;

395 
«me
[32];

396 
vnode
 *
vn
;

398 
	`öô_thªad£m
();

400 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

403 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

404 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, &
vn
);

405 i‡(
îr
) {

406 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

407 
	`k¥ötf
("*** Test failed\n");

410 
	`vfs_˛o£
(
vn
);

412 
i
=0; i<
NTHREADS
; i++) {

413 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", (*)
fûesys
, 
i
,

414 
wrôe°ªss2_thªad
, 
NULL
);

415 i‡(
îr
) {

416 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

417 
	`°ªº‹
(
îr
));

421 
i
=0; i<
NTHREADS
; i++) {

422 
	`P
(
thªad£m
);

425 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

426 
	`k¥ötf
("*** Test failed\n");

430 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

431 
	`k¥ötf
("*** Test failed\n");

435 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

436 
	}
}

442 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

444 c⁄° *
fûesys
 = 
fs
;

445 
i
;

446 
num°r
[16];

448 
i
=0; i<
NCREATES
; i++) {

450 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

452 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

453 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

454 
	`V
(
thªad£m
);

458 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

459 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

460 
	`V
(
thªad£m
);

464 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

465 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

466 
	`V
(
thªad£m
);

472 
	`V
(
thªad£m
);

473 
	}
}

477 
	$do¸óã°ªss
(c⁄° *
fûesys
)

479 
i
, 
îr
;

481 
	`öô_thªad£m
();

483 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

485 
i
=0; i<
NTHREADS
; i++) {

486 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", (*)
fûesys
, 
i
,

487 
¸óã°ªss_thªad
, 
NULL
);

488 i‡(
îr
) {

489 
	`∑nic
("createstress:Åhread_fork failed %s\n",

490 
	`°ªº‹
(
îr
));

494 
i
=0; i<
NTHREADS
; i++) {

495 
	`P
(
thªad£m
);

498 
	`k¥ötf
("*** fs create stressÅest done\n");

499 
	}
}

505 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

507 *
devi˚
;

509 i‡(
«rgs
 != 2) {

510 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

511  
EINVAL
;

514 
devi˚
 = 
¨gs
[1];

517 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

518 
devi˚
[
	`°æí
(device)-1] = 0;

522 
	}
}

524 
	#DEFTEST
(
ã°«me
) \

526 
	`ã°«me
(
«rgs
, **
¨gs
) \

528 
ªsu…
; \

529 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

530 i‡(
ªsu…
) { \

531  
ªsu…
; \

533 do##
	`ã°«me
(
¨gs
[1]); \

535 }

	)

537 
DEFTEST
(
f°e°
);

538 
DEFTEST
(
ªad°ªss
);

539 
DEFTEST
(
wrôe°ªss
);

540 
DEFTEST
(
wrôe°ªss2
);

541 
DEFTEST
(
¸óã°ªss
);

546 
	$¥ötfûe
(
«rgs
, **
¨gs
)

548 
vnode
 *
rv
, *
wv
;

549 
uio
 
ku
;

550 
off_t
 
Ωos
=0, 
wpos
=0;

551 
buf
[128];

552 
outfûe
[16];

553 
ªsu…
;

554 
d⁄e
=0;

556 i‡(
«rgs
 != 2) {

557 
	`k¥ötf
("Usage:Öf filename\n");

558  
EINVAL
;

562 
	`°r˝y
(
outfûe
, "con:");

564 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, &
rv
);

565 i‡(
ªsu…
) {

566 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

567  
ªsu…
;

570 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, &
wv
);

571 i‡(
ªsu…
) {

572 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

573 
	`vfs_˛o£
(
rv
);

574  
ªsu…
;

577 !
d⁄e
) {

578 
	`mk_kuio
(&
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

579 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

580 i‡(
ªsu…
) {

581 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

584 
Ωos
 = 
ku
.
uio_off£t
;

586 i‡(
ku
.
uio_ªsid
 > 0) {

587 
d⁄e
 = 1;

590 
	`mk_kuio
(&
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
, 
UIO_WRITE
);

591 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

592 i‡(
ªsu…
) {

593 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

596 
wpos
 = 
ku
.
uio_off£t
;

598 i‡(
ku
.
uio_ªsid
 > 0) {

599 
	`k¥ötf
("Warning: short write\n");

603 
	`vfs_˛o£
(
wv
);

604 
	`vfs_˛o£
(
rv
);

607 
	}
}

	@test/malloctest.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<synch.h
>

7 
	~<thªad.h
>

8 
	~<ã°.h
>

21 
	#NTRIES
 1200

	)

22 
	#ITEMSIZE
 997

	)

23 
	#NTHREADS
 8

	)

27 
	$mÆlo˘hªad
(*
sm
, 
num
)

29 
£m≠h‹e
 *
£m
 = 
sm
;

30 *
±r
;

31 *
ﬁd±r
=
NULL
;

32 *
ﬁd±r2
=
NULL
;

33 
i
;

35 
i
=0; i<
NTRIES
; i++) {

36 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

37 i‡(
±r
==
NULL
) {

38 i‡(
£m
) {

39 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

40 
num
);

41 
	`V
(
£m
);

44 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

47 i‡(
ﬁd±r2
) {

48 
	`k‰ì
(
ﬁd±r2
);

50 
ﬁd±r2
 = 
ﬁd±r
;

51 
ﬁd±r
 = 
±r
;

53 i‡(
ﬁd±r2
) {

54 
	`k‰ì
(
ﬁd±r2
);

56 i‡(
ﬁd±r
) {

57 
	`k‰ì
(
ﬁd±r
);

59 i‡(
£m
) {

60 
	`V
(
£m
);

62 
	}
}

65 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

67 ()
«rgs
;

68 ()
¨gs
;

70 
	`k¥ötf
("Starting kmallocÅest...\n");

71 
	`mÆlo˘hªad
(
NULL
, 0);

72 
	`k¥ötf
("kmallocÅest done\n");

75 
	}
}

78 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

80 
£m≠h‹e
 *
£m
;

81 
i
, 
ªsu…
;

83 ()
«rgs
;

84 ()
¨gs
;

86 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

87 i‡(
£m
 =
NULL
) {

88 
	`∑nic
("mallocstress: sem_create failed\n");

91 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

93 
i
=0; i<
NTHREADS
; i++) {

94 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
£m
, 
i
, 
mÆlo˘hªad
,

95 
NULL
);

96 i‡(
ªsu…
) {

97 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

98 
	`°ªº‹
(
ªsu…
));

102 
i
=0; i<
NTHREADS
; i++) {

103 
	`P
(
£m
);

106 
	`£m_de°roy
(
£m
);

107 
	`k¥ötf
("kmalloc stressÅest done\n");

110 
	}
}

	@test/nettest.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<ã°.h
>

9 
	$√âe°
()

11 
	`k¥ötf
("NoÇetwork supportávailable\n");

12 
	}
}

	@test/queuetest.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<queue.h
>

4 
	~<ã°.h
>

8 
	$ã°q
(
queue
 *
q
, 
n
)

10 
i
, 
ªsu…
, *
x
, *
r
;

12 
x
 = 
	`kmÆloc
(
n
 * ());

13 
i
=0; i<
n
; i++) {

14 
x
[
i
] = i;

17 
	`as£π
(
	`q_em±y
(
q
));

19 
i
=0; i<
n
; i++) {

20 
	`k¥ötf
("queue:áddög %d\n", 
i
);

21 
ªsu…
 = 
	`q_addèû
(
q
, &
x
[
i
]);

22 
	`as£π
(
ªsu…
==0);

25 
i
=0; i<
n
; i++) {

26 
r
 = 
	`q_ªmhód
(
q
);

27 
	`as£π
(
r
 !
NULL
);

28 
	`k¥ötf
("queue: gŸ %d, should bê%d\n", *
r
, 
i
);

29 
	`as£π
(*
r
 =
i
);

32 
	`as£π
(
	`q_em±y
(
q
));

34 
	`k‰ì
(
x
);

35 
	}
}

39 
	$queuëe°
(
«rgs
, **
¨gs
)

41 
queue
 *
q
;

43 ()
«rgs
;

44 ()
¨gs
;

46 
q
 = 
	`q_¸óã
(8);

47 
	`as£π
(
q
 !
NULL
);

50 
	`ã°q
(
q
, 6);

53 
	`ã°q
(
q
, 27);

55 
	`q_de°roy
(
q
);

58 
	}
}

	@test/synchtest.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<synch.h
>

8 
	~<thªad.h
>

9 
	~<ã°.h
>

10 
	~<˛ock.h
>

11 
	~<machöe/•l.h
>

18 
	#NSEMLOOPS
 63

	)

19 
	#NLOCKLOOPS
 120

	)

21 
	#NCVLOOPS
 5

	)

22 
	#NTHREADS
 32

	)

25 vﬁ©ûê
	gã°vÆ1
;

26 vﬁ©ûê
	gã°vÆ2
;

27 vﬁ©ûê
	gã°vÆ3
;

28 
£m≠h‹e
 *
	gã°£m
;

29 
lock
 *
	gã°lock
;

30 
cv
 *
	gã°cv
;

31 
£m≠h‹e
 *
	gd⁄e£m
;

35 
	$öôôems
()

37 i‡(
ã°£m
==
NULL
) {

38 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

39 i‡(
ã°£m
 =
NULL
) {

40 
	`∑nic
("synchtest: sem_create failed\n");

43 i‡(
ã°lock
==
NULL
) {

44 
ã°lock
 = 
	`lock_¸óã
("testlock");

45 i‡(
ã°lock
 =
NULL
) {

46 
	`∑nic
("synchtest:Üock_create failed\n");

49 i‡(
ã°cv
==
NULL
) {

50 
ã°cv
 = 
	`cv_¸óã
("testlock");

51 i‡(
ã°cv
 =
NULL
) {

52 
	`∑nic
("synchtest: cv_create failed\n");

55 i‡(
d⁄e£m
==
NULL
) {

56 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

57 i‡(
d⁄e£m
 =
NULL
) {

58 
	`∑nic
("synchtest: sem_create failed\n");

61 
	}
}

65 
	$£mã°thªad
(*
junk
, 
num
)

67 
i
;

68 ()
junk
;

73 
	`P
(
ã°£m
);

74 
	`k¥ötf
("Thªad %2lu: ", 
num
);

75 
i
=0; i<
NSEMLOOPS
; i++) {

76 
	`k¥ötf
("%c", ()
num
+64);

78 
	`k¥ötf
("\n");

79 
	`V
(
d⁄e£m
);

80 
	}
}

83 
	$£mã°
(
«rgs
, **
¨gs
)

85 
i
, 
ªsu…
;

87 ()
«rgs
;

88 ()
¨gs
;

90 
	`öôôems
();

91 
	`k¥ötf
("Starting semaphoreÅest...\n");

92 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

93 
	`P
(
ã°£m
);

94 
	`P
(
ã°£m
);

95 
	`k¥ötf
("ok\n");

97 
i
=0; i<
NTHREADS
; i++) {

98 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
i
, 
£mã°thªad
, NULL);

99 i‡(
ªsu…
) {

100 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

101 
	`°ªº‹
(
ªsu…
));

105 
i
=0; i<
NTHREADS
; i++) {

106 
	`V
(
ã°£m
);

107 
	`P
(
d⁄e£m
);

111 
	`V
(
ã°£m
);

112 
	`V
(
ã°£m
);

114 
	`k¥ötf
("SemaphoreÅest done.\n");

116 
	}
}

120 
	$Áû
(
num
, c⁄° *
msg
)

122 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

123 
	`k¥ötf
("Test failed\n");

125 
	`lock_ªÀa£
(
ã°lock
);

127 
	`V
(
d⁄e£m
);

128 
	`thªad_exô
();

129 
	}
}

133 
	$lockã°thªad
(*
junk
, 
num
)

135 
i
;

136 ()
junk
;

138 
i
=0; i<
NLOCKLOOPS
; i++) {

139 
	`lock_acquúe
(
ã°lock
);

140 
ã°vÆ1
 = 
num
;

141 
ã°vÆ2
 = 
num
*num;

142 
ã°vÆ3
 = 
num
%3;

144 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

145 
	`Áû
(
num
, "testval2/testval1");

148 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

149 
	`Áû
(
num
, "testval2/testval3");

152 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

153 
	`Áû
(
num
, "testval3/testval1");

156 i‡(
ã°vÆ1
 !
num
) {

157 
	`Áû
(
num
, "testval1/num");

160 i‡(
ã°vÆ2
 !
num
*num) {

161 
	`Áû
(
num
, "testval2/num");

164 i‡(
ã°vÆ3
 !
num
%3) {

165 
	`Áû
(
num
, "testval3/num");

172 
	`lock_ªÀa£
(
ã°lock
);

174 
	`V
(
d⁄e£m
);

183 
	}
}

187 
	$lockã°
(
«rgs
, **
¨gs
)

194 
i
, 
ªsu…
;

196 ()
«rgs
;

197 ()
¨gs
;

199 
	`öôôems
();

200 
	`k¥ötf
("StartingÜockÅest...\n");

202 
i
=0; i<
NTHREADS
; i++) {

206 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
i
, 
lockã°thªad
,

207 
NULL
);

210 i‡(
ªsu…
) {

211 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

212 
	`°ªº‹
(
ªsu…
));

215 
i
=0; i<
NTHREADS
; i++) {

216 
	`P
(
d⁄e£m
);

219 
	`k¥ötf
("LockÅest done.\n");

222 
	}
}

226 
	$cvã°thªad
(*
junk
, 
num
)

228 
i
;

229 vﬁ©ûê
j
;

230 
time_t
 
£cs1
, 
£cs2
;

231 
u_öt32_t
 
n£cs1
, 
n£cs2
;

233 ()
junk
;

235 
i
=0; i<
NCVLOOPS
; i++) {

236 
	`lock_acquúe
(
ã°lock
);

237 
ã°vÆ1
 !
num
) {

238 
	`gëtime
(&
£cs1
, &
n£cs1
);

239 
	`cv_waô
(
ã°cv
, 
ã°lock
);

240 
	`gëtime
(&
£cs2
, &
n£cs2
);

242 i‡(
n£cs2
 < 
n£cs1
) {

243 
£cs2
--;

244 
n£cs2
 += 1000000000;

247 
n£cs2
 -
n£cs1
;

248 
£cs2
 -
£cs1
;

251 i‡(
£cs2
==0 && 
n£cs2
 < 40*2000) {

252 
	`k¥ötf
("cv_waôÅook o∆y %uÇs\n", 
n£cs2
);

253 
	`k¥ötf
("That'sÅoo fast... you must be "

255 
	`V
(
d⁄e£m
);

256 
	`thªad_exô
();

260 
	`k¥ötf
("Thªad %lu\n", 
num
);

261 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

267 
j
=0; j<3000; j++);

271 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

272 
	`lock_ªÀa£
(
ã°lock
);

275 
	`V
(
d⁄e£m
);

276 
	}
}

279 
	$cvã°
(
«rgs
, **
¨gs
)

282 
i
, 
ªsu…
;

284 ()
«rgs
;

285 ()
¨gs
;

287 c⁄° *
äame
[32] = {"t00", "t01", "t02", "t03", "t04", "t05", "t06", "t07", "t08", "t09", "t10", "t11", "t12", "t13", "t14", "t15", "t16", "t17", "t18", "t19", "t20", "t21", "t22", "t23", "t24", "t25", "t26", "t27", "t28", "t29", "t30", "t31"};

289 
	`öôôems
();

290 
	`k¥ötf
("Starting CVÅest...\n");

291 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

293 
ã°vÆ1
 = 
NTHREADS
-1;

295 
i
=0; i<
NTHREADS
; i++) {

296 
ªsu…
 = 
	`thªad_f‹k
(
äame
[
i
], 
NULL
, i, 
cvã°thªad
,

297 
NULL
);

298 i‡(
ªsu…
) {

299 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

300 
	`°ªº‹
(
ªsu…
));

303 
i
=0; i<
NTHREADS
; i++) {

304 
	`P
(
d⁄e£m
);

307 
	`k¥ötf
("CVÅest done\n");

310 
	}
}

	@test/threadtest.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<synch.h
>

7 
	~<thªad.h
>

8 
	~<ã°.h
>

10 
	#NTHREADS
 8

	)

12 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

16 
	$öô_£m
()

18 i‡(
t£m
==
NULL
) {

19 
t£m
 = 
	`£m_¸óã
("tsem", 0);

20 i‡(
t£m
 =
NULL
) {

21 
	`∑nic
("threadtest: sem_create failed\n");

24 
	}
}

28 
	$loudthªad
(*
junk
, 
num
)

30 
ch
 = '0' + 
num
;

31 
i
;

33 ()
junk
;

35 
i
=0; i<120; i++) {

36 
	`putch
(
ch
);

38 
	`V
(
t£m
);

39 
	}
}

53 
	$quõâhªad
(*
junk
, 
num
)

55 
ch
 = '0' + 
num
;

56 vﬁ©ûê
i
;

58 ()
junk
;

60 
	`putch
(
ch
);

61 
i
=0; i<200000; i++);

62 
	`putch
(
ch
);

64 
	`V
(
t£m
);

65 
	}
}

69 
	$ru¡hªads
(
dﬁoud
)

71 
«me
[16];

72 
i
, 
ªsu…
;

74 
i
=0; i<
NTHREADS
; i++) {

75 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

76 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
i
,

77 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

78 
NULL
);

79 i‡(
ªsu…
) {

80 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

81 
	`°ªº‹
(
ªsu…
));

85 
i
=0; i<
NTHREADS
; i++) {

86 
	`P
(
t£m
);

88 
	}
}

92 
	$thªadã°
(
«rgs
, **
¨gs
)

94 ()
«rgs
;

95 ()
¨gs
;

97 
	`öô_£m
();

98 
	`k¥ötf
("StartingÅhreadÅest...\n");

99 
	`ru¡hªads
(1);

100 
	`k¥ötf
("\nThreadÅest done.\n");

103 
	}
}

106 
	$thªadã°2
(
«rgs
, **
¨gs
)

108 ()
«rgs
;

109 ()
¨gs
;

111 
	`öô_£m
();

112 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

113 
	`ru¡hªads
(0);

114 
	`k¥ötf
("\nThreadÅest 2 done.\n");

117 
	}
}

	@test/tt3.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<machöe/•l.h
>

7 
	~<synch.h
>

8 
	~<thªad.h
>

9 
	~<ã°.h
>

11 
	~"›t-synch¥obs.h
"

15 #i‡
OPT_SYNCHPROBS


16 
	#DIM
 10

	)

18 
	#DIM
 70

	)

22 
	#SLEEPALOT_PRINTS
 20

	)

23 
	#SLEEPALOT_ITERS
 4

	)

25 
	#WAKER_WAKES
 100

	)

27 
	#COMPUTE_ITERS
 10

	)

29 
	#NWAITADDRS
 12

	)

30 c⁄° 
	gwaôaddrs
[
NWAITADDRS
];

32 vﬁ©ûê
	gwakîd⁄e
;

33 
£m≠h‹e
 *
	gwakî£m
;

34 
£m≠h‹e
 *
	gd⁄e£m
;

38 
	$£tup
()

40 i‡(
wakî£m
 =
NULL
) {

41 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

43 i‡(
d⁄e£m
 =
NULL
) {

44 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

46 
wakîd⁄e
 = 0;

47 
	}
}

51 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

53 
i
, 
j
, 
•l
;

55 ()
junk
;

57 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

58 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

59 
•l
 = 
	`•lhigh
();

60 
	`thªad_¶ìp
(&
waôaddrs
[
	`øndom
()%
NWAITADDRS
]);

61 
	`•lx
(
•l
);

63 
	`k¥ötf
("[%lu]", 
num
);

65 
	`V
(
d⁄e£m
);

66 
	}
}

70 
	$wakî_thªad
(*
junk1
, 
junk2
)

72 
i
, 
•l
, 
d⁄e
;

74 ()
junk1
;

75 ()
junk2
;

78 
	`P
(
wakî£m
);

79 
d⁄e
 = 
wakîd⁄e
;

80 
	`V
(
wakî£m
);

81 i‡(
d⁄e
) {

85 
i
=0; i<
WAKER_WAKES
; i++) {

86 
•l
 = 
	`•lhigh
();

87 
	`thªad_wakeup
(&
waôaddrs
[
	`øndom
()%
NWAITADDRS
]);

88 
	`•lx
(
•l
);

90 
	`thªad_yõld
();

93 
	`V
(
d⁄e£m
);

94 
	}
}

98 
	$make_¶ì∑lŸs
(
howm™y
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
howm™y
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
i
, 
¶ì∑lŸ_thªad
, NULL);

106 i‡(
ªsu…
) {

107 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

110 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 0, 
wakî_thªad
, NULL);

111 i‡(
ªsu…
) {

112 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

114 
	}
}

118 
	$compuã_thªad
(*
junk1
, 
num
)

120 
	sm©rix
 {

121 
m
[
DIM
][DIM];

123 
m©rix
 *
m1
, *
m2
, *
m3
;

124 
tŸ
;

125 
i
, 
j
, 
k
, 
m
;

126 
u_öt32_t
 
ønd
;

128 ()
junk1
;

130 
m1
 = 
	`kmÆloc
((
m©rix
));

131 
	`as£π
(
m1
 !
NULL
);

132 
m2
 = 
	`kmÆloc
((
m©rix
));

133 
	`as£π
(
m2
 !
NULL
);

134 
m3
 = 
	`kmÆloc
((
m©rix
));

135 
	`as£π
(
m3
 !
NULL
);

137 
m
=0; m<
COMPUTE_ITERS
; m++) {

139 
i
=0; i<
DIM
; i++) {

140 
j
=0; j<
DIM
; j++) {

141 
ønd
 = 
	`øndom
();

142 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

143 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

147 
i
=0; i<
DIM
; i++) {

148 
j
=0; j<
DIM
; j++) {

149 
tŸ
 = 0;

150 
k
=0; k<
DIM
; k++) {

151 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

153 
m3
->
m
[
i
][
j
] = 
tŸ
;

157 
tŸ
 = 0;

158 
i
=0; i<
DIM
; i++) {

159 
tŸ
 +
m3
->
m
[
i
][i];

162 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

163 
	`thªad_yõld
();

166 
	`k‰ì
(
m1
);

167 
	`k‰ì
(
m2
);

168 
	`k‰ì
(
m3
);

170 
	`V
(
d⁄e£m
);

171 
	}
}

175 
	$make_compuãs
(
howm™y
)

177 
«me
[16];

178 
i
, 
ªsu…
;

180 
i
=0; i<
howm™y
; i++) {

181 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

182 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
i
, 
compuã_thªad
, NULL);

183 i‡(
ªsu…
) {

184 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

187 
	}
}

191 
	$föish
(
howm™ytŸÆ
)

193 
i
;

194 
i
=0; i<
howm™ytŸÆ
; i++) {

195 
	`P
(
d⁄e£m
);

197 
	`P
(
wakî£m
);

198 
wakîd⁄e
 = 1;

199 
	`V
(
wakî£m
);

200 
	`P
(
d⁄e£m
);

201 
	}
}

205 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

207 
	`£tup
();

208 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

210 
n¶ìps
, 
ncompuãs
);

211 
	`make_¶ì∑lŸs
(
n¶ìps
);

212 
	`make_compuãs
(
ncompuãs
);

213 
	`föish
(
n¶ìps
+
ncompuãs
);

214 
	`k¥ötf
("\nThreadÅest 3 done\n");

215 
	}
}

218 
	$thªadã°3
(
«rgs
, **
¨gs
)

220 i‡(
«rgs
==1) {

221 
	`ru¡e°3
(5, 2);

223 i‡(
«rgs
==3) {

224 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

227 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

231 
	}
}

	@thread/hardclock.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<thªad.h
>

5 
	~<˛ock.h
>

10 
	glbﬁt
;

12 
	glbﬁt_cou¡î
;

19 
	$h¨d˛ock
()

26 
lbﬁt_cou¡î
++;

27 i‡(
lbﬁt_cou¡î
 >
HZ
) {

28 
lbﬁt_cou¡î
 = 0;

29 
	`thªad_wakeup
(&
lbﬁt
);

32 
	`thªad_yõld
();

33 
	}
}

39 
	$˛ock¶ìp
(
num_£cs
)

41 
s
;

43 
s
 = 
	`•lhigh
();

44 
num_£cs
 > 0) {

45 
	`thªad_¶ìp
(&
lbﬁt
);

46 
num_£cs
--;

48 
	`•lx
(
s
);

49 
	}
}

	@thread/scheduler.c

8 
	~<ty≥s.h
>

9 
	~<lib.h
>

10 
	~<scheduÀr.h
>

11 
	~<thªad.h
>

12 
	~<machöe/•l.h
>

13 
	~<queue.h
>

20 
queue
 *
	grunqueue
;

26 
	$scheduÀr_boŸ°øp
()

28 
runqueue
 = 
	`q_¸óã
(32);

29 i‡(
runqueue
 =
NULL
) {

30 
	`∑nic
("scheduler: CouldÇot createÑun queue\n");

32 
	}
}

42 
	$scheduÀr_¥óŒoˇã
(
¡hªads
)

44 
	`as£π
(
cur•l
>0);

45  
	`q_¥óŒoˇã
(
runqueue
, 
¡hªads
);

46 
	}
}

55 
	$scheduÀr_kûœŒ
()

57 
	`as£π
(
cur•l
>0);

58 !
	`q_em±y
(
runqueue
)) {

59 
thªad
 *
t
 = 
	`q_ªmhód
(
runqueue
);

60 
	`k¥ötf
("scheduÀr: Dr›pögÅhªad %s.\n", 
t
->
t_«me
);

62 
	}
}

72 
	$scheduÀr_shutdown
()

74 
	`scheduÀr_kûœŒ
();

76 
	`as£π
(
cur•l
>0);

77 
	`q_de°roy
(
runqueue
);

78 
runqueue
 = 
NULL
;

79 
	}
}

87 
thªad
 *

88 
	$scheduÀr
()

91 
	`as£π
(
cur•l
>0);

93 
	`q_em±y
(
runqueue
)) {

94 
	`˝u_idÀ
();

104  
	`q_ªmhód
(
runqueue
);

105 
	}
}

112 
	$make_ru¬abÀ
(
thªad
 *
t
)

115 
	`as£π
(
cur•l
>0);

117  
	`q_addèû
(
runqueue
, 
t
);

118 
	}
}

123 
queue
* 
	$gërunqueue
() {

124  
runqueue
;

125 
	}
}

131 
	$¥öt_run_queue
()

134 
•l
 = 
	`•lhigh
();

136 
	`k¥ötf
("================ RUN QUEUE ==================\n");

138 
i
,
k
=0;

139 
i
 = 
	`q_gë°¨t
(
runqueue
);

141 
i
!=
	`q_gëíd
(
runqueue
)) {

142 
thªad
 *
t
 = 
	`q_gëguy
(
runqueue
, 
i
);

143 
	`k¥ötf
(" %2d: %†%p\n", 
k
, 
t
->
t_«me
,Å->
t_¶ì∑ddr
);

144 
i
=(i+1)%
	`q_gësize
(
runqueue
);

145 
k
++;

148 
	`•lx
(
•l
);

149 
	}
}

	@thread/synch.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<synch.h
>

9 
	~<¨øy.h
>

10 
	~<thªad.h
>

11 
	~<scheduÀr.h
>

12 
	~<cuπhªad.h
>

13 
	~<machöe/•l.h
>

19 
£m≠h‹e
 *

20 
	$£m_¸óã
(c⁄° *
«mórg
, 
öôül_cou¡
)

22 
£m≠h‹e
 *
£m
;

24 
	`as£π
(
öôül_cou¡
 >= 0);

26 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

27 i‡(
£m
 =
NULL
) {

28  
NULL
;

31 
£m
->
«me
 = 
	`k°rdup
(
«mórg
);

32 i‡(
£m
->
«me
 =
NULL
) {

33 
	`k‰ì
(
£m
);

34  
NULL
;

37 
£m
->
cou¡
 = 
öôül_cou¡
;

38  
£m
;

39 
	}
}

42 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

44 
•l
;

45 
	`as£π
(
£m
 !
NULL
);

47 
•l
 = 
	`•lhigh
();

48 
	`as£π
(
	`thªad_has¶ì≥rs
(
£m
)==0);

49 
	`•lx
(
•l
);

60 
	`k‰ì
(
£m
->
«me
);

61 
	`k‰ì
(
£m
);

62 
	}
}

65 
	$P
(
£m≠h‹e
 *
£m
)

67 
•l
;

68 
	`as£π
(
£m
 !
NULL
);

76 
	`as£π
(
ö_öãºu±
==0);

78 
•l
 = 
	`•lhigh
();

79 
£m
->
cou¡
==0) {

80 
	`thªad_¶ìp
(
£m
);

82 
	`as£π
(
£m
->
cou¡
>0);

83 
£m
->
cou¡
--;

84 
	`•lx
(
•l
);

85 
	}
}

88 
	$V
(
£m≠h‹e
 *
£m
)

90 
•l
;

91 
	`as£π
(
£m
 !
NULL
);

92 
•l
 = 
	`•lhigh
();

93 
£m
->
cou¡
++;

94 
	`as£π
(
£m
->
cou¡
>0);

95 
	`thªad_wakeup
(
£m
);

96 
	`•lx
(
•l
);

97 
	}
}

103 
lock
 *

104 
	$lock_¸óã
(c⁄° *
«me
)

106 
lock
 *lock;

107 
lock
 = 
	`kmÆloc
((lock));

108 i‡(
lock
 =
NULL
) {

109  
NULL
;

112 
lock
->
«me
 = 
	`k°rdup
(name);

113 i‡(
lock
->
«me
 =
NULL
) {

114 
	`k‰ì
(
lock
);

115  
NULL
;

118 
lock
->
hñd
 = 0;

119  
lock
;

120 
	}
}

123 
	$lock_de°roy
(
lock
 *lock)

125 
	`as£π
(
lock
 !
NULL
);

129 
	`k‰ì
(
lock
->
«me
);

130 
	`k‰ì
(
lock
);

131 
	}
}

145 
	$lock_acquúe
(
lock
 *lock)

147 
•l
;

148 
ﬁd
;

151 
	`as£π
(
lock
!=
NULL
);

152 
	`as£π
(
ö_öãºu±
==0);

162 
•l
 = 
	`•lhigh
();

163 
ﬁd
 = 
lock
->
hñd
;

164 
lock
->
hñd
 = 1;

166 i‡(
ﬁd
 == 0) {

169 
	`•lx
(
•l
);

174 
	`thªad_yõld
();

176 
	`•lx
(
•l
);

177 
	}
}

180 
	$lock_ªÀa£
(
lock
 *lock)

183 
lock
->
hñd
 = 0;

184 
	}
}

187 
	$lock_do_i_hﬁd
(
lock
 *lock)

191 ()
lock
;

194 
	}
}

201 
cv
 *

202 
	$cv_¸óã
(c⁄° *
«me
)

204 
cv
 *cv;

206 
cv
 = 
	`kmÆloc
((cv));

207 i‡(
cv
 =
NULL
) {

208  
NULL
;

211 
cv
->
«me
 = 
	`k°rdup
(name);

212 i‡(
cv
->
«me
==
NULL
) {

213 
	`k‰ì
(
cv
);

214  
NULL
;

220  
cv
;

221 
	}
}

224 
	$cv_de°roy
(
cv
 *cv)

226 
	`as£π
(
cv
 !
NULL
);

230 
	`k‰ì
(
cv
->
«me
);

231 
	`k‰ì
(
cv
);

232 
	}
}

235 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

237 
•l
;

238 
	`as£π
(
lock
 !
NULL
);

239 
•l
 = 
	`•lhigh
();

240 
	`lock_ªÀa£
(
lock
);

241 
	`thªad_¶ìp
(
cv
);

242 
	`lock_acquúe
(
lock
);

243 
	`•lx
(
•l
);

244 
	}
}

247 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

249 
•l
;

250 
i
, 
ªsu…
;

251 
¨øy
* 
¶ì≥rs
;

252 
	`as£π
(
lock
 !
NULL
);

253 
•l
 = 
	`•lhigh
();

254 
¶ì≥rs
 = 
	`gë_¶ì≥rs
();

256 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

257 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

258 i‡(
t
->
t_¶ì∑ddr
 =
cv
) {

261 
	`¨øy_ªmove
(
¶ì≥rs
, 
i
);

264 
i
--;

270 
ªsu…
 = 
	`make_ru¬abÀ
(
t
);

271 
	`as£π
(
ªsu…
==0);

275 
	`lock_ªÀa£
(
lock
);

279 
	`•lx
(
•l
);

280 
	}
}

283 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

285 
•l
;

286 
	`as£π
(
lock
 !
NULL
);

287 
•l
 = 
	`•lhigh
();

288 
	`thªad_wakeup
(
cv
);

290 
	`lock_ªÀa£
(
lock
);

291 
	`•lx
(
•l
);

292 
	}
}

	@thread/thread.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<¨øy.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/pcb.h
>

10 
	~<thªad.h
>

11 
	~<cuπhªad.h
>

12 
	~<scheduÀr.h
>

13 
	~<addr•a˚.h
>

14 
	~<vnode.h
>

15 
	~<queue.h
>

16 
	~<¥o˚ss_hñ≥r.h
>

17 
	~"›t-synch¥obs.h
"

21 
	mS_RUN
,

22 
	mS_READY
,

23 
	mS_SLEEP
,

24 
	mS_ZOMB
,

25 } 
	tthªad°©e_t
;

28 
thªad
 *
	gcuπhªad
;

31 
¨øy
 *
	g¶ì≥rs
;

34 
¨øy
 *
	gzombõs
;

37 
	gnumthªads
;

41 
	$öô_pid
() {

42 
pid_occupõd
[0]=1;

43 
i
;

44 
i
=1; i<
MAX_PID
; i++) {

45 
pid_occupõd
[
i
]=0;

47 
	}
}

49 
¨øy
* 
	$gë_¶ì≥rs
() {

50  
¶ì≥rs
;

51 
	}
}

53 
thªad
* 
	$gë_cuπhªad
() {

54  
cuπhªad
;

55 
	}
}

57 
¨øy
 *
	$gë_zombõs
() {

58  
zombõs
;

59 
	}
}

66 
thªad
 *

67 
	$thªad_¸óã
(c⁄° *
«me
)

69 
thªad
 *thªad = 
	`kmÆloc
((thread));

70 i‡(
thªad
==
NULL
) {

71 
	`k¥ötf
("****Åhread: failÅoállocÅhread\n");

72  
NULL
;

74 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

75 i‡(
thªad
->
t_«me
==
NULL
) {

76 
	`k‰ì
(
thªad
);

77  
NULL
;

79 
thªad
->
t_¶ì∑ddr
 = 
NULL
;

80 
thªad
->
t_°ack
 = 
NULL
;

82 
thªad
->
t_vm•a˚
 = 
NULL
;

84 
thªad
->
t_cwd
 = 
NULL
;

89 
thªad
->
¥o˚ss
 = (¥o˚s†*)
	`kmÆloc
((process));

90 i‡(
thªad
->
¥o˚ss
 =
NULL
) {

91 
	`k¥ötf
("****Åhread: failÅoállocÖrocess\n");

92  
NULL
;

94 
thªad
->
¥o˚ss
->thread =Åhread;

95 
thªad
->
¥o˚ss
->
chûd_li°
 = 
NULL
;

96 
thªad
->
¥o˚ss
->
pid
 = -1;

97 
thªad
->
¥o˚ss
->
µid
 = -1;

98 
thªad
->
¥o˚ss
->
exô_°©us
 = 0;

100  
thªad
;

101 
	}
}

111 
	$thªad_de°roy
(
thªad
 *thread)

113 
	`as£π
(
thªad
 !
cuπhªad
);

119 
	`as£π
(
thªad
->
t_vm•a˚
==
NULL
);

120 
	`as£π
(
thªad
->
t_cwd
==
NULL
);

122 i‡(
thªad
->
t_°ack
) {

123 
	`k‰ì
(
thªad
->
t_°ack
);

131 
	`k‰ì
(
thªad
->
¥o˚ss
);

133 
	`k‰ì
(
thªad
->
t_«me
);

134 
	`k‰ì
(
thªad
);

135 
	}
}

144 
	$ex‹ci£
()

146 
i
, 
ªsu…
;

148 
	`as£π
(
cur•l
>0);

150 
i
=0; i<
	`¨øy_gënum
(
zombõs
); i++) {

151 
thªad
 *
z
 = 
	`¨øy_gëguy
(
zombõs
, 
i
);

152 
	`as£π
(
z
!=
cuπhªad
);

153 
	`thªad_de°roy
(
z
);

155 
ªsu…
 = 
	`¨øy_£tsize
(
zombõs
, 0);

157 
	`as£π
(
ªsu…
==0);

158 
	}
}

166 
	$thªad_kûœŒ
()

168 
i
, 
ªsu…
;

170 
	`as£π
(
cur•l
>0);

177 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

178 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

179 
	`k¥ötf
("¶ìp: Dr›pögÅhªad %s\n", 
t
->
t_«me
);

191 
ªsu…
 = 
	`¨øy_£tsize
(
¶ì≥rs
, 0);

193 
	`as£π
(
ªsu…
==0);

194 
	}
}

200 
	$thªad_∑nic
()

202 
	`as£π
(
cur•l
 > 0);

204 
	`thªad_kûœŒ
();

205 
	`scheduÀr_kûœŒ
();

206 
	}
}

213 
	$¥o˚ss_boŸ°øp
(
thªad
 *
míu
) {

214 
	`as£π
(
pid_occupõd
[1] == 0);

215 
pid_occupõd
[1] = 1;

216 
míu
->
¥o˚ss
->
pid
 = 1;

217 
míu
->
¥o˚ss
->
µid
 = 0;

218 
	}
}

223 
thªad
 *

224 
	$thªad_boŸ°øp
()

226 
thªad
 *
me
;

229 
¶ì≥rs
 = 
	`¨øy_¸óã
();

230 i‡(
¶ì≥rs
==
NULL
) {

231 
	`∑nic
("Cannot create sleepersárray\n");

234 
zombõs
 = 
	`¨øy_¸óã
();

235 i‡(
zombõs
==
NULL
) {

236 
	`∑nic
("Cannot create zombiesárray\n");

243 
me
 = 
	`thªad_¸óã
("<boot/menu>");

244 i‡(
me
==
NULL
) {

245 
	`∑nic
("thread_bootstrap: Out of memory\n");

254 
	`md_öôpcb0
(&
me
->
t_pcb
);

256 
	`¥o˚ss_boŸ°øp
(
me
);

259 
cuπhªad
 = 
me
;

262 
numthªads
 = 1;

265  
me
;

266 
	}
}

272 
	$thªad_shutdown
()

274 
	`¨øy_de°roy
(
¶ì≥rs
);

275 
¶ì≥rs
 = 
NULL
;

276 
	`¨øy_de°roy
(
zombõs
);

277 
zombõs
 = 
NULL
;

280 
	}
}

288 
thªad_f‹k
(c⁄° *
«me
,

289 *
d©a1
, 
d©a2
,

290 (*
func
)(*, ),

291 
thªad
 **
ªt
)

293 
thªad
 *
√wguy
;

294 
s
, 
ªsu…
;

297 
√wguy
 = 
	`thªad_¸óã
(
«me
);

299 i‡(
cuπhªad
->
¥o˚ss
->
pid
 == 1) {

304 
√wguy
->
¥o˚ss
->
µid
 = 1;

305 
√wguy
->
¥o˚ss
->
pid
 = 
	`Æloc_√w_pid
();

309 i‡(
√wguy
==
NULL
) {

310  
ENOMEM
;

314 
√wguy
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

315 i‡(
√wguy
->
t_°ack
==
NULL
) {

316 
	`k‰ì
(
√wguy
->
t_«me
);

317 
	`k‰ì
(
√wguy
);

318 
	`k¥ötf
("****Åhread: failÅoállocÅ_stack\n");

319  
ENOMEM
;

323 
√wguy
->
t_°ack
[0] = 0xae;

324 
√wguy
->
t_°ack
[1] = 0x11;

325 
√wguy
->
t_°ack
[2] = 0xda;

326 
√wguy
->
t_°ack
[3] = 0x33;

329 i‡(
cuπhªad
->
t_cwd
 !
NULL
) {

330 
	`VOP_INCREF
(
cuπhªad
->
t_cwd
);

331 
√wguy
->
t_cwd
 = 
cuπhªad
->t_cwd;

335 
	`md_öôpcb
(&
√wguy
->
t_pcb
,Çewguy->
t_°ack
, 
d©a1
, 
d©a2
, 
func
);

338 
s
 = 
	`•lhigh
();

344 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
¶ì≥rs
, 
numthªads
+1);

345 i‡(
ªsu…
) {

346 
Áû
;

348 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
zombõs
, 
numthªads
+1);

349 i‡(
ªsu…
) {

350 
Áû
;

354 
ªsu…
 = 
	`scheduÀr_¥óŒoˇã
(
numthªads
+1);

355 i‡(
ªsu…
) {

356 
Áû
;

360 
ªsu…
 = 
	`make_ru¬abÀ
(
√wguy
);

361 i‡(
ªsu…
 != 0) {

362 
Áû
;

371 
numthªads
++;

374 
	`•lx
(
s
);

382 i‡(
ªt
 !
NULL
) {

383 *
ªt
 = 
√wguy
;

388 
Áû
:

389 
	`•lx
(
s
);

390 i‡(
√wguy
->
t_cwd
 !
NULL
) {

391 
	`VOP_DECREF
(
√wguy
->
t_cwd
);

393 
	`k‰ì
(
√wguy
->
t_°ack
);

394 
	`k‰ì
(
√wguy
->
t_«me
);

395 
	`k‰ì
(
√wguy
);

397  
ªsu…
;

398 
	}
}

405 
	$mi_swôch
(
thªad°©e_t
 
√xt°©e
)

407 
thªad
 *
cur
, *
√xt
;

408 
ªsu…
;

411 
	`as£π
(
cur•l
>0);

413 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

421 
	`as£π
(
cuπhªad
->
t_°ack
[0] == ()0xae);

422 
	`as£π
(
cuπhªad
->
t_°ack
[1] == ()0x11);

423 
	`as£π
(
cuπhªad
->
t_°ack
[2] == ()0xda);

424 
	`as£π
(
cuπhªad
->
t_°ack
[3] == ()0x33);

432 i‡(
cuπhªad
 =
NULL
) {

435 
cur
 = 
cuπhªad
;

436 
cuπhªad
 = 
NULL
;

443 i‡(
√xt°©e
==
S_READY
) {

444 
ªsu…
 = 
	`make_ru¬abÀ
(
cur
);

446 i‡(
√xt°©e
==
S_SLEEP
) {

451 
ªsu…
 = 
	`¨øy_add
(
¶ì≥rs
, 
cur
);

454 
	`as£π
(
√xt°©e
==
S_ZOMB
);

464 
ªsu…
 = 
	`¨øy_add
(
zombõs
, 
cur
);

466 
	`as£π
(
ªsu…
==0);

472 
√xt
 = 
	`scheduÀr
();

475 
cuπhªad
 = 
√xt
;

481 
	`md_swôch
(&
cur
->
t_pcb
, &
√xt
->t_pcb);

492 
	`ex‹ci£
();

494 i‡(
cuπhªad
->
t_vm•a˚
) {

495 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

497 
	}
}

507 
	$thªad_exô
()

509 i‡(
cuπhªad
->
t_°ack
 !
NULL
) {

517 
	`as£π
(
cuπhªad
->
t_°ack
[0] == ()0xae);

518 
	`as£π
(
cuπhªad
->
t_°ack
[1] == ()0x11);

519 
	`as£π
(
cuπhªad
->
t_°ack
[2] == ()0xda);

520 
	`as£π
(
cuπhªad
->
t_°ack
[3] == ()0x33);

523 
	`•lhigh
();

525 i‡(
cuπhªad
->
t_vm•a˚
) {

530 
addr•a˚
 *
as
 = 
cuπhªad
->
t_vm•a˚
;

535 
pid_occupõd
[
cuπhªad
->
¥o˚ss
->
pid
] = 2;

539 
cuπhªad
->
t_vm•a˚
 = 
NULL
;

540 
	`as_de°roy
(
as
);

543 i‡(
cuπhªad
->
t_cwd
) {

544 
	`VOP_DECREF
(
cuπhªad
->
t_cwd
);

545 
cuπhªad
->
t_cwd
 = 
NULL
;

548 
	`as£π
(
numthªads
>0);

549 
numthªads
--;

550 
	`mi_swôch
(
S_ZOMB
);

552 
	`∑nic
("Thread came back fromÅhe dead!\n");

553 
	}
}

559 
	$thªad_yõld
()

561 
•l
 = 
	`•lhigh
();

564 
	`as£π
(
¶ì≥rs
 !
NULL
);

566 
	`mi_swôch
(
S_READY
);

567 
	`•lx
(
•l
);

568 
	}
}

582 
	$thªad_¶ìp
(c⁄° *
addr
)

585 
	`as£π
(
ö_öãºu±
==0);

587 
cuπhªad
->
t_¶ì∑ddr
 = 
addr
;

588 
	`mi_swôch
(
S_SLEEP
);

589 
cuπhªad
->
t_¶ì∑ddr
 = 
NULL
;

590 
	}
}

597 
	$thªad_wakeup
(c⁄° *
addr
)

599 
i
, 
ªsu…
;

602 
	`as£π
(
cur•l
>0);

606 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

607 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

608 i‡(
t
->
t_¶ì∑ddr
 =
addr
) {

611 
	`¨øy_ªmove
(
¶ì≥rs
, 
i
);

614 
i
--;

620 
ªsu…
 = 
	`make_ru¬abÀ
(
t
);

621 
	`as£π
(
ªsu…
==0);

624 
	}
}

629 
	$¥öt_Æl_thªad
 () {

630 
i
;

631 
•l
;

632 
•l
=
	`•lhigh
();

633 
queue
 *
runqueue
 = 
	`gërunqueue
();

634 
	`k¥ötf
("*********************************************\n");

635 
	`k¥ötf
("*** cuºíàthªad: %† ***\n", 
cuπhªad
->
t_«me
);

636 
	`k¥ötf
("*********************************************\n");

638 
	`k¥ötf
("================ RUN QUEUE ==================\n");

639 
k
=0;

640 
i
 = 
	`q_gë°¨t
(
runqueue
);

642 
i
!=
	`q_gëíd
(
runqueue
)) {

643 
thªad
 *
t
 = 
	`q_gëguy
(
runqueue
, 
i
);

644 
	`k¥ötf
(" %2d: %†%p\n", 
k
, 
t
->
t_«me
,Å->
t_¶ì∑ddr
);

645 
i
=(i+1)%
	`q_gësize
(
runqueue
);

646 
k
++;

649 
	`k¥ötf
("=============== SLEEP QUEUE =================\n");

650 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

651 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

652 
	`k¥ötf
(" %2d: %†%p\n", 
i
, 
t
->
t_«me
,Å->
t_¶ì∑ddr
);

656 
	`k¥ötf
("=============== ZOMBIE QUEUE =================\n");

657 
i
=0; i<
	`¨øy_gënum
(
zombõs
); i++) {

658 
thªad
 *
t
 = 
	`¨øy_gëguy
(
zombõs
, 
i
);

659 
	`k¥ötf
(" %2d: %†%p\n", 
i
, 
t
->
t_«me
,Å->
t_¶ì∑ddr
);

663 
	`•lx
(
•l
);

664 
	}
}

671 
	$thªad_has¶ì≥rs
(c⁄° *
addr
)

673 
i
;

676 
	`as£π
(
cur•l
>0);

678 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

679 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

680 i‡(
t
->
t_¶ì∑ddr
 =
addr
) {

685 
	}
}

693 
mi_thªad°¨t
(*
d©a1
, 
d©a2
,

694 (*
func
)(*, ))

697 i‡(
cuπhªad
->
t_vm•a˚
) {

698 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

702 
	`•l0
();

704 #i‡
OPT_SYNCHPROBS


707 
i
, 
n
;

708 
n
 = 
	`øndom
()%161 +Ñandom()%161;

709 
i
=0; i<
n
; i++) {

710 
	`thªad_yõld
();

716 
	`func
(
d©a1
, 
d©a2
);

719 
	`thªad_exô
();

720 
	}
}

	@userprog/io_syscall.c

1 
	~<sysˇŒ.h
>

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~<kîn/uni°d.h
>

5 
	~<uio.h
>

6 
	~<cuπhªad.h
>

7 
	~<thªad.h
>

8 
	~<vnode.h
>

9 
	~<vfs.h
>

10 
	~<ã°.h
>

13 
	$sys_wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
) {

14 (Ë
fûeh™dÀ
;

15 (Ë
size
;

21 
out
 = *(*)(
buf
);

23  
	`k¥ötf
("%c", 
out
);

24 
	}
}

27 
	$sys_ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
, *
ªtvÆ
) {

31 ()
fûeh™dÀ
;

32 
buff
[
size
+1];

33 
	`kgës_sysˇŒ
(
buff
, 
size
, 
ªtvÆ
);

34 
buff
[
size
] = '\0';

36 
	`c›yout
(&
buff
, 
buf
, 
size
+1);

38 
	}
}

	@userprog/loadelf.c

11 
	~<ty≥s.h
>

12 
	~<kîn/î∫o.h
>

13 
	~<lib.h
>

14 
	~<uio.h
>

15 
	~<ñf.h
>

16 
	~<addr•a˚.h
>

17 
	~<thªad.h
>

18 
	~<cuπhªad.h
>

19 
	~<vnode.h
>

38 
	$lﬂd_£gmít
(
vnode
 *
v
, 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

39 
size_t
 
memsize
, size_à
fûesize
,

40 
is_execuèbÀ
)

42 
uio
 
u
;

43 
ªsu…
;

44 
size_t
 
fûœmt
;

46 i‡(
fûesize
 > 
memsize
) {

47 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

48 
fûesize
 = 
memsize
;

51 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

52 (Ë
fûesize
, (Ë
vaddr
);

55 
u
.
uio_iovec
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

56 
u
.
uio_iovec
.
iov_Àn
 = 
memsize
;

57 
u
.
uio_ªsid
 = 
fûesize
;

58 
u
.
uio_off£t
 = 
off£t
;

59 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

60 
u
.
uio_rw
 = 
UIO_READ
;

61 
u
.
uio_•a˚
 = 
cuπhªad
->
t_vm•a˚
;

63 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

68 i‡(
u
.
uio_ªsid
 != 0) {

70 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

71  
ENOEXEC
;

75 
fûœmt
 = 
memsize
 - 
fûesize
;

76 i‡(
fûœmt
 > 0) {

77 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

78 (Ë
fûœmt
);

79 
u
.
uio_ªsid
 +
fûœmt
;

80 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

83  
ªsu…
;

84 
	}
}

92 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

95 
Elf_Ehdr
 
eh
;

97 
Elf_Phdr
 
ph
;

98 
ªsu…
, 
i
;

99 
uio
 
ku
;

108 
	`mk_kuio
(&
ku
, &
eh
, ”h), 0, 
UIO_READ
);

109 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

110 i‡(
ªsu…
) {

111  
ªsu…
;

114 i‡(
ku
.
uio_ªsid
 != 0) {

116 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

117  
ENOEXEC
;

131 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

132 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

133 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

134 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

135 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

136 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

137 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

138 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

139 
eh
.
e_ty≥
!=
ET_EXEC
 ||

140 
eh
.
e_machöe
!=
EM_MACHINE
) {

141  
ENOEXEC
;

159 
i
=0; i<
eh
.
e_phnum
; i++) {

160 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

161 
	`mk_kuio
(&
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

163 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

164 i‡(
ªsu…
) {

165  
ªsu…
;

168 i‡(
ku
.
uio_ªsid
 != 0) {

170 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

171  
ENOEXEC
;

174 
ph
.
p_ty≥
) {

175 
PT_NULL
: ;

176 
PT_PHDR
: ;

177 
PT_MIPS_REGINFO
: ;

178 
PT_LOAD
: ;

180 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

181 
ph
.
p_ty≥
);

182  
ENOEXEC
;

188 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
cuπhªad
->
t_vm•a˚
,

189 
ph
.
p_vaddr
,Öh.
p_memsz
,

190 
ph
.
p_Êags
 & 
PF_R
,

191 
ph
.
p_Êags
 & 
PF_W
,

192 
ph
.
p_Êags
 & 
PF_X
,

193 
PPAGE_TEMP_FIXED
,

194 
GETENTRY
);

196 i‡(
ªsu…
) {

197 
	`k¥ötf
("****Üoadelf:ás_prepare_load fail\n");

198  
ªsu…
;

212 
i
=0; i<
eh
.
e_phnum
; i++) {

213 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

214 
	`mk_kuio
(&
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

216 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

217 i‡(
ªsu…
) {

218  
ªsu…
;

221 i‡(
ku
.
uio_ªsid
 != 0) {

223 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

224  
ENOEXEC
;

227 
ph
.
p_ty≥
) {

228 
PT_NULL
: ;

229 
PT_PHDR
: ;

230 
PT_MIPS_REGINFO
: ;

231 
PT_LOAD
: ;

233 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

234 
ph
.
p_ty≥
);

235  
ENOEXEC
;

237 
ªsu…
 = 
	`lﬂd_£gmít
(
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

238 
ph
.
p_memsz
,Öh.
p_fûesz
,

239 
ph
.
p_Êags
 & 
PF_X
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 *
íåypoöt
 = 
eh
.
e_íåy
;

248 
	}
}

	@userprog/process_helper.c

1 
	~<¥o˚ss_hñ≥r.h
>

2 
	~<db-hñ≥r.h
>

3 
	~<ty≥s.h
>

4 
	~<lib.h
>

5 
	~<thªad.h
>

6 
	~<¨øy.h
>

7 
	~<cuπhªad.h
>

8 
	~<addr•a˚.h
>

9 
	~<machöe/å≠‰ame.h
>

10 
	~<machöe/•l.h
>

11 
	~<machöe/éb.h
>

12 
	~<vm.h
>

14 
	$¥öt_n⁄_zîo_pid
() {

15 
•l
 = 
	`•lhigh
();

16 
i
;

17 
	`k¥ötf
("==== occupiedÖid ====\n");

18 
i
=0; i<
MAX_PID
; i++){

19 i‡(
pid_occupõd
[
i
] != 0) {

20 
	`k¥ötf
("[%d, %d] ", 
i
, 
pid_occupõd
[i]);

23 
	`k¥ötf
("\n");

24 
	`•lx
(
•l
);

26 
	}
}

31 
	$add_chûd
(
chûd_li°
 **
hódî
, 
thªad
 *
√w_chûd
, 
pid_t
 
chûd_pid
,Öid_à
∑ª¡_pid
) {

41 i‡(()(
√w_chûd
->
¥o˚ss
) != 0xdeafbeef) {

42 
√w_chûd
->
¥o˚ss
->
pid
 = 
chûd_pid
;

43 
√w_chûd
->
¥o˚ss
->
µid
 = 
∑ª¡_pid
;

45 
chûd_li°
 *
√w_chûd_node
 = (chûd_li° *)
	`kmÆloc
((child_list));

46 
√w_chûd_node
->
chûd
 = 
√w_chûd
;

47 
√w_chûd_node
->
chûd_pid
 = child_pid;

48 
√w_chûd_node
->
√xt
 = *
hódî
;

49 *
hódî
 = 
√w_chûd_node
;

50 
	}
}

56 
pid_t
 
	$Æloc_√w_pid
 () {

57 
•l
 = 
	`•lhigh
();

58 
i
=2;

59 
i
=2; i<
MAX_PID
; i++) {

60 i‡(
pid_occupõd
[
i
] == 0) {

61 
pid_occupõd
[
i
] = 1;

62 
	`•lx
(
•l
);

63  
i
;

67 
	`•lx
(
•l
);

69 
	}
}

71 
	$f‹k_chûd_£tup
(*
p_öfo
, 
unu£d
) {

72 ()
unu£d
;

73 
f‹k_∑ª¡_öfo
 *
∑ª¡_öfo
;

74 
∑ª¡_öfo
 = (
f‹k_∑ª¡_öfo
 *)
p_öfo
;

79 
cuπhªad
->
¥o˚ss
->
pid
 = 
∑ª¡_öfo
->
chûd_pid
;

80 
cuπhªad
->
¥o˚ss
->
µid
 = 
∑ª¡_öfo
->
chûd_µid
;

87 
cuπhªad
->
t_vm•a˚
 = 
∑ª¡_öfo
->
chûd_as
;

88 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

93 
å≠‰ame
 
tf
;

95 
tf
 = *(
∑ª¡_öfo
->
∑ª¡_tf_˝
);

101 (&
tf
)->
tf_ïc
 += 4;

102 (&
tf
)->
tf_v0
 = 0;

103 (&
tf
)->
tf_a3
 = 0;

112 
	`k‰ì
(
∑ª¡_öfo
->
∑ª¡_tf_˝
);

113 
	`k‰ì
(
∑ª¡_öfo
);

114 
	`mùs_u£rmode
(&
tf
);

115 
	}
}

117 
	$upd©e_pid_occupõd_li°
() {

119 
	}
}

121 
	$˛órup_zombõs
(
chûd_li°
 *
zombõ_li°
) {

122 
¨øy
 *
zombõs
 = 
	`gë_zombõs
();

123 
chûd_li°
 *
p
, *
p_√xt
;

124 
thªad
 *
t
;

125 
i
 = 0;

126 
i
 < 
	`¨øy_gënum
(
zombõs
)) {

127 
	`k¥ötf
("zombie onÅheÜist \n");

128 
t
 = 
	`¨øy_gëguy
(
zombõs
, 
i
);

129 
p
 = 
zombõ_li°
;

130 
p
 !
NULL
) {

131 i‡(
p
->
chûd
 =
t
) {

132 
	`¨øy_ªmove
(
zombõs
, 
i
);

133 
	`k¥ötf
("∑ª¡ %dÑemovêzombõ: %d\n", 
cuπhªad
->
¥o˚ss
->
pid
, 
p
->
chûd_pid
);

134 
i
 -- ;

136 
p
 =Ö->
√xt
;

138 
i
 ++ ;

141 
p
 = 
zombõ_li°
;

142 
p_√xt
 = 
p
;

143 
p
 !
NULL
) {

144 
p_√xt
 = 
p
->
√xt
;

145 
	`k‰ì
(
p
);

146 
p
 = 
p_√xt
;

148 
	}
}

154 
vaddr_t
 
	$å™¶©e_¨gs_vaddr
(
vaddr_t
 
u£rv
, 
addr•a˚
 *
as
, *
ödex
) {

156 
	`as£π
(
cur•l
 > 0);

158 
ma°î_i
, 
£c⁄d¨y_i
;

159 
ªsu…
 = 
	`vm_Áu…
(0, 
u£rv
);

160 i‡(
ªsu…
) {

161 
	`k¥ötf
("**** sys_execv vm_Áu…Éº: %d\n", 
ªsu…
);

164 
	`gë_±_ödex
(
as
, 
u£rv
, &
ma°î_i
, &
£c⁄d¨y_i
);

166 
∑ddr_t
 
∑ddr
;

168 i‡((
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
TLBLO_VALID
) == 0) {

169 
	`vm_Áu…
(0, 
u£rv
);

171 
∑ddr
 = 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
];

172 
∑ddr
 &(
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
);

174 i‡(
ödex
 !
NULL
) {

175 
	`as£π
(
∑ddr
 > 
fú°∑ddr_öô
);

176 *
ödex
 = (
∑ddr
 - 
fú°∑ddr_öô
Ë/ 
PAGE_SIZE
;

177 
	`as£π
(*
ödex
 > 0);

178 
	`as£π
(*
ödex
 < 
øm_≈ages
);

181 
∑ddr
 +(
u£rv
 & ~(
vaddr_t
)
PAGE_FRAME
);

183  
	`PADDR_TO_KVADDR
(
∑ddr
);

184 
	}
}

187 
	$öô_hóp_°¨t
(
addr•a˚
 *
as
) {

189 
i
;

190 i‡(
as
->
±_íåy
[511] =
NULL
) {

192 
i
=511; i>0; i--) {

193 i‡(
as
->
±_íåy
[
i
] !
NULL
) {

194 
as
->
hóp_°¨t
 = (
i
+1)*4194304;

195 
as
->
hóp_íd
 =ás->
hóp_°¨t
;

200 
chkmode
 = 0;

201 
i
=511; i>0; i--) {

202 i‡((
chkmode
 =0Ë&& (
as
->
±_íåy
[
i
] =
NULL
)) {

204 
chkmode
 = 1;

205 } i‡((
chkmode
 =1Ë&& (
as
->
±_íåy
[
i
] !
NULL
)) {

207 
as
->
hóp_°¨t
 = (
i
+1)*4194304;

208 
as
->
hóp_íd
 =ás->
hóp_°¨t
;

214 
	}
}

	@userprog/runprogram.c

7 
	~<ty≥s.h
>

8 
	~<kîn/uni°d.h
>

9 
	~<kîn/î∫o.h
>

10 
	~<lib.h
>

11 
	~<vm.h
>

12 
	~<addr•a˚.h
>

13 
	~<thªad.h
>

14 
	~<cuπhªad.h
>

15 
	~<vm.h
>

16 
	~<vfs.h
>

17 
	~<ã°.h
>

18 
	~<db-hñ≥r.h
>

23 
	$°ack_size
(
ru≈rogøm_öfo
 *
¥og_öfo
) {

25 
size
 = (
¥og_öfo
->
¨gc
 + 1)*4;

26 
i
;

27 **
¨gv
 = 
¥og_öfo
->argv;

28 
¨gc
 = 
¥og_öfo
->argc;

29 
i
 = 0; i < 
¨gc
; i++) {

31 
x
 = (
	`°æí
(*(
¨gv
+
i
))+1)/4;

32 
size
 +4*
x
;

33 i‡((
	`°æí
(*(
¨gv
+
i
))+1)%4 != 0) {

34 
size
 += 4;

37  
size
;

38 
	}
}

45 *
	$£tup_¨gs_mem
(
ru≈rogøm_öfo
 *
¥og_öfo
, 
vaddr_t
 *
u§_°ack
, 
size_t
 *
Àn
) {

46 
i
;

47 
¨gc
 = 
¥og_öfo
->argc;

48 **
¨gv
 = 
¥og_öfo
->argv;

80 *
Àn
 = 
	`°ack_size
(
¥og_öfo
);

81 *
ks_°¨t
 = (*)
	`kmÆloc
(*
Àn
);

83 
¨g_off£t
[
¨gc
];

88 
¨g_off£t
[0] = ()
¨gc
 + 1;

90 
i
 = 1; i < 
¨gc
; i++) {

91 
Àn_¨g
 = (
	`°æí
(*(
¨gv
+
i
-1))+1)/4;

92 i‡((
	`°æí
(*(
¨gv
+
i
-1))+1)%4 != 0) {

93 
Àn_¨g
 ++ ;

95 
¨g_off£t
[
i
] =árg_off£t[i-1] + 
Àn_¨g
;

106 
s_size_w
 = (*
Àn
)/4;

107 
i
 = 0; i < 
¨gc
; i++) {

108 *(
ks_°¨t
 + 
i
Ë(
¨g_off£t
[i] - 
s_size_w
Ë+ (*)(*
u§_°ack
);

111 *(
ks_°¨t
 + 
¨gc
Ë
NULL
;

116 
i
 = 0; i < 
¨gc
; i++) {

117 *
¨gi
 = (*)(
¨g_off£t
[
i
] + 
ks_°¨t
);

118 **
x
 = (**)(
¨gv
+
i
);

119 
¨gÀn
 = (
	`°æí
(*(
¨gv
+
i
))+1)/4;

120 i‡((
	`°æí
(*(
¨gv
+
i
))+1)%4 != 0) {

121 
¨gÀn
 ++ ;

123 
	`memmove
((*)
¨gi
, (*)*
x
, 4*
¨gÀn
);

132 *
u§_°ack
 = *u§_°ack - *
Àn
;

133  (*)
ks_°¨t
;

134 
	}
}

151 
	$ru≈rogøm
(
ru≈rogøm_öfo
 *
¥og_öfo
)

153 *
¥og«me
 = 
¥og_öfo
->progname;

155 
vnode
 *
v
;

156 
vaddr_t
 
íåypoöt
, 
°ack±r
;

157 
ªsu…
;

160 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, &
v
);

161 i‡(
ªsu…
) {

162  
ªsu…
;

172 
addr•a˚
 *
ﬁd_as
 = 
cuπhªad
->
t_vm•a˚
;

173 i‡(
ﬁd_as
 !
NULL
) {

174 
	`as_de°roy
(
ﬁd_as
);

175 
cuπhªad
->
t_vm•a˚
 = 
NULL
;

180 
	`as£π
(
cuπhªad
->
t_vm•a˚
 =
NULL
);

183 
cuπhªad
->
t_vm•a˚
 = 
	`as_¸óã
();

184 i‡(
cuπhªad
->
t_vm•a˚
==
NULL
) {

185 
	`vfs_˛o£
(
v
);

186  
ENOMEM
;

190 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

194 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

203 i‡(
ªsu…
) {

208 
	`vfs_˛o£
(
v
);

209  
ªsu…
;

213 
	`vfs_˛o£
(
v
);

216 
ªsu…
 = 
	`as_deföe_°ack
(
cuπhªad
->
t_vm•a˚
, &
°ack±r
);

217 i‡(
ªsu…
) {

219  
ªsu…
;

222 
size_t
 
Àn
;

223 *
ks_°¨t
 = 
	`£tup_¨gs_mem
(
¥og_öfo
, &
°ack±r
, &
Àn
);

224 
îr
 = 
	`c›yout
(
ks_°¨t
, 
°ack±r
, 
Àn
);

225 i‡(
îr
 != 0) {

226 
	`∑nic
("runprogram: copyoutÉrr!\n");

236 
	`k‰ì
(
ks_°¨t
);

240 
«rgc
 = 
¥og_öfo
->
¨gc
;

241 
	`k‰ì
(
¥og_öfo
);

243 
	`md_u£rmode
(
«rgc
 , 
°ack±r
 ,

244 
°ack±r
, 
íåypoöt
);

247 
	`∑nic
("md_usermodeÑeturned\n");

248  
EINVAL
;

249 
	}
}

	@userprog/thread_syscall.c

1 
	~<sysˇŒ.h
>

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~<kîn/uni°d.h
>

5 
	~<thªad.h
>

6 
	~<cuπhªad.h
>

7 
	~<¥o˚ss_hñ≥r.h
>

8 
	~<machöe/•l.h
>

9 
	~<addr•a˚.h
>

10 
	~<kîn/î∫o.h
>

11 
	~<machöe/å≠‰ame.h
>

12 
	~<ã°.h
>

13 
	~<vm.h
>

14 
	~<machöe/éb.h
>

15 
	~<vfs.h
>

16 
	~<vnode.h
>

17 
	~<uio.h
>

19 
	#MAXARG
 10

	)

39 
	$sys_f‹k
(
å≠‰ame
 *
tf
, 
öt32_t
 *
ªtvÆ
) {

42 
pid_t
 
chûd_µid
 = 
cuπhªad
->
¥o˚ss
->
pid
;

52 
pid_t
 
√w_pid
;

53 i‡((
√w_pid
 = 
	`Æloc_√w_pid
()) != -1) {

56 
addr•a˚
 *
chûd_vm
;

57 
as_îr
 = 
	`as_c›y
(
cuπhªad
->
t_vm•a˚
, &
chûd_vm
);

58 i‡(
as_îr
 != 0) {

59 
	`k¥ötf
("**** o›s,ás_c›y:Éº = %d\n", 
as_îr
);

60 *
ªtvÆ
 = -1;

61 
pid_occupõd
[
√w_pid
] = 0;

62  
as_îr
;

65 
å≠‰ame
 *
chûd_tf
 = (å≠‰amê*)
	`kmÆloc
((trapframe));

66 i‡(
chûd_tf
 =
NULL
){

67 
	`k¥ötf
("**** sys_fork failure: out of mem\n");

68 *
ªtvÆ
 = -1;

69 
pid_occupõd
[
√w_pid
] = 0;

70  
ENOMEM
;

73 *
chûd_tf
 = *
tf
;

75 
f‹k_∑ª¡_öfo
 *
∑ª¡_öfo
 = (f‹k_∑ª¡_öfÿ*)
	`kmÆloc
((fork_parent_info));

76 i‡(
∑ª¡_öfo
 =
NULL
) {

77 
	`k¥ötf
("**** sys_fork failure: out of mem\n");

78 *
ªtvÆ
 = -1;

79 
pid_occupõd
[
√w_pid
] = 0;

80  
ENOMEM
;

82 
∑ª¡_öfo
->
chûd_µid
 = child_ppid;

83 
∑ª¡_öfo
->
chûd_pid
 = 
√w_pid
;

84 
∑ª¡_öfo
->
∑ª¡_tf_˝
 = 
chûd_tf
;

85 
∑ª¡_öfo
->
chûd_as
 = 
chûd_vm
;

87 
thªad
 *
chûd
;

89 
t_f‹k_îr
;

90 
t_f‹k_îr
 = 
	`thªad_f‹k
("√wÖro˚ss", (*)
∑ª¡_öfo
, 0, 
f‹k_chûd_£tup
, &
chûd
);

91 i‡(
t_f‹k_îr
 == 0) {

92 
chûd_li°
 *
hód
 = 
cuπhªad
->
¥o˚ss
->child_list;

93 
pid_t
 
p_pid
 = 
cuπhªad
->
¥o˚ss
->
pid
;

94 
	`add_chûd
(&
hód
, 
chûd
, 
√w_pid
, 
p_pid
);

95 
cuπhªad
->
¥o˚ss
->
chûd_li°
 = 
hód
;

96 *
ªtvÆ
 = (
öt32_t
)
√w_pid
;

99 *
ªtvÆ
 = -1;

100 
	`k‰ì
(
chûd_tf
);

101 
	`k‰ì
(
∑ª¡_öfo
);

102 
pid_occupõd
[
√w_pid
] = 0;

103  
t_f‹k_îr
;

110 
	`k¥ötf
("out ofÖid");

113 
	}
}

125 
	$sys_gëpid
(
öt32_t
 *
ªtvÆ
) {

126 *
ªtvÆ
 = (
öt32_t
)
cuπhªad
->
¥o˚ss
->
pid
;

129 
	}
}

134 
	$sys_waôpid
(
pid_t
 
chûd_pid
, 
å≠‰ame
 *
tf
, 
öt32_t
 *
ªtvÆ
) {

135 
chûd_li°
 *
p
 = 
cuπhªad
->
¥o˚ss
->child_list;

140 
p
 !
NULL
) {

141 i‡(
p
->
chûd_pid
 == child_pid) {

143 i‡(
pid_occupõd
[
chûd_pid
] == 2){

146 *
x
;

152 i‡(
tf
 !
NULL
){

153 
x
 = (*)(
tf
->
tf_a1
);

155 i‡(
x
 !
NULL
 && x != (*)0xdeadbeef){

157 *
x
 = 0;

159 *
ªtvÆ
 = 0;

164 
p
 =Ö->
√xt
;

169 *
x
;

170 i‡(
tf
 !
NULL
){

171 
x
 = (*)(
tf
->
tf_a1
);

173 i‡(
x
 !
NULL
) {

174 *
x
 = 0;

176 *
ªtvÆ
 = 0;

178 
	}
}

185 
	$míu_waôpid
() {

186 
size_t
 
i
;

187 
u_öt32_t
 
ehi
, 
ño
;

188 
ma°î_i
, 
£c⁄d¨y_i
;

189 
•l
;

190 
addr•a˚
 *
as
;

191 
«me
[15];

192 
off£t
;

193 
vnode
 *
v
;

194 
uio
 
sw≠_ku
;

195 
ªsu…
;

196 
pid_occupõd
[2] != 2) {

255 
	}
}

257 
	$sys__exô
(
å≠‰ame
 *
tf
, 
öt32_t
 *
ªtvÆ
, 
code
) {

258 
chûd_li°
 *
p
 = 
cuπhªad
->
¥o˚ss
->child_list;

265 
p
 !
NULL
) {

266 i‡(
pid_occupõd
[
p
->
chûd_pid
] == 1) {

267 
å≠‰ame
 *
dummytf
 = (å≠‰amê*)
	`kmÆloc
((trapframe));

268 
dummy
;

269 i‡(
	`sys_waôpid
(
p
->
chûd_pid
, 
dummytf
, &
dummy
) == 1) {

272 
	`k‰ì
(
dummytf
);

275 
pid_occupõd
[
p
->
chûd_pid
] = 0;

276 
p
 =Ö->
√xt
;

281 
	`˛órup_zombõs
(
cuπhªad
->
¥o˚ss
->
chûd_li°
);

288 
	`thªad_exô
();

289 ()
tf
;

290 ()
ªtvÆ
;

291 ()
code
;

293 
	}
}

298 
	$sys_execv
(*
¥og
, *c⁄° *
¨gs
, 
öt32_t
 *
ªtvÆ
) {

300 
ru≈rogøm_öfo
 *
¥og_öfo
 = (ru≈rogøm_öfÿ*)
	`kmÆloc
((runprogram_info));

301 i‡(
¥og_öfo
 =
NULL
) {

302 
	`k¥ötf
("****Éxecv: failedÅoálloc\n");

303 *
ªtvÆ
 = -1;

304  
ENOMEM
;

307 
•l
 = 
	`•lhigh
();

309 
vaddr_t
 
kvaddr
;

310 
ödex
;

315 
ébi
;

316 
ébi
=0;Ålbi<
NUM_TLB
;Ålbi++) {

317 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
ébi
), 
	`TLBLO_INVALID
(),Ålbi);

321 
kvaddr
 = 
	`å™¶©e_¨gs_vaddr
((
vaddr_t
)
¥og
, 
cuπhªad
->
t_vm•a˚
, &
ödex
);

322 i‡(
kvaddr
 == 0) {

325 
Àn
 = 
	`°æí
((*)
kvaddr
);

327 
°©us
 = *(
c‹em≠_íåy
 + 
ödex
) % 10;

328 
	`as£π
(
°©us
 !
PPAGE_K_FIXED
);

329 *(
c‹em≠_íåy
 + 
ödex
Ë-
°©us
;

330 *(
c‹em≠_íåy
 + 
ödex
Ë+
PPAGE_TEMP_FIXED
;

332 *
«me
 = (*)
	`kmÆloc
(
Àn
+1);

334 
	`memmove
((*)
«me
, (c⁄° *)
kvaddr
, 
Àn
);

335 *(
«me
+
Àn
) = '\0';

337 *(
c‹em≠_íåy
 + 
ödex
Ë-
PPAGE_TEMP_FIXED
;

338 *(
c‹em≠_íåy
 + 
ödex
Ë+
°©us
;

341 
kvaddr
 = 
	`å™¶©e_¨gs_vaddr
((
vaddr_t
)
¨gs
, 
cuπhªad
->
t_vm•a˚
, 
NULL
);

342 i‡(
kvaddr
 == 0) {

345 
cou¡
 = 0;

346 *
ãmp
[
MAXARG
];

347 
vaddr_t
 
¨gaddr
[
MAXARG
];

351 i‡(*((**)(
kvaddr
 + 4*
cou¡
)Ë!
NULL
) {

353 
¨gaddr
[
cou¡
] = *((**)(
kvaddr
 + 4*count));

354 
cou¡
++;

359 
i
;

360 
i
=0; i<
MAXARG
; i++) {

361 i‡(
i
 < 
cou¡
) {

362 
ébi
;

363 
ébi
=0;Ålbi<
NUM_TLB
;Ålbi++) {

364 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
ébi
), 
	`TLBLO_INVALID
(),Ålbi);

366 
kvaddr
 = 
	`å™¶©e_¨gs_vaddr
(
¨gaddr
[
i
], 
cuπhªad
->
t_vm•a˚
, &
ödex
);

367 i‡(
kvaddr
 == 0) {

371 
Àn
 = 
	`°æí
((*)
kvaddr
);

374 
°©us
 = *(
c‹em≠_íåy
 + 
ödex
) % 10;

375 *(
c‹em≠_íåy
 + 
ödex
Ë-
°©us
;

376 *(
c‹em≠_íåy
 + 
ödex
Ë+
PPAGE_TEMP_FIXED
;

377 
ãmp
[
i
] = (*)
	`kmÆloc
(
Àn
+1);

379 
	`memmove
((*)
ãmp
[
i
], (c⁄° *)
kvaddr
, 
Àn
);

380 *(
ãmp
[
i
] + 
Àn
) = '\0';

382 *(
c‹em≠_íåy
 + 
ödex
Ë-
PPAGE_TEMP_FIXED
;

383 *(
c‹em≠_íåy
 + 
ödex
Ë+
°©us
;

385 
ãmp
[
i
] = 
NULL
;

388 
	`•lx
(
•l
);

390 
¥og_öfo
->
¥og«me
 = 
«me
;

391 
¥og_öfo
->
¨gc
 = 
cou¡
;

392 
¥og_öfo
->
¨gv
 = &
ãmp
;

394 
ªsu…
 = 
	`ru≈rogøm
(
¥og_öfo
);

396 i‡(
ªsu…
) {

397 
	`k‰ì
(
¥og_öfo
);

398 
i
=0; i<
MAXARG
; i++) {

399 i‡(
ãmp
[
i
] !
NULL
) {

400 
	`k‰ì
(
ãmp
[
i
]);

403  
ªsu…
;

405 
	`k‰ì
(
¥og_öfo
->
¥og«me
);

406 
	`k‰ì
(
¥og_öfo
);

407 
i
=0; i<
MAXARG
; i++) {

408 i‡(
ãmp
[
i
] !
NULL
) {

409 
	`k‰ì
(
ãmp
[
i
]);

412 *
ªtvÆ
 = 0;

414 
	}
}

418 
	$sys_sbrk
(
size
, 
öt32_t
 *
ªtvÆ
) {

419 
addr•a˚
 *
as
 = 
cuπhªad
->
t_vm•a˚
;

421 i‡(
as
->
hóp_°¨t
 == 0) {

422 
	`öô_hóp_°¨t
(
as
);

424 
	`as£π
(
as
->
hóp_°¨t
 != 0);

426 
vaddr_t
 
brk
 = 
as
->
hóp_íd
 + 
size
;

428 i‡(
brk
 < 
as
->
hóp_°¨t
) {

429 *
ªtvÆ
 = -1;

430  
EINVAL
;

433 
ma°î1
, 
£c⁄d¨y1
;

434 
ma°î2
, 
£c⁄d¨y2
;

435 i‡(
size
 >= 0) {

436 i‡((
as
->
hóp_íd
 % 
PAGE_SIZE
) == 0) {

437 
	`gë_±_ödex
(
as
,ás->
hóp_íd
, &
ma°î1
, &
£c⁄d¨y1
);

439 
	`gë_±_ödex
(
as
,ás->
hóp_íd
+
PAGE_SIZE
, &
ma°î1
, &
£c⁄d¨y1
);

441 i‡(
brk
 % 
PAGE_SIZE
 == 0) {

442 
	`gë_±_ödex
(
as
, 
brk
-
PAGE_SIZE
, &
ma°î2
, &
£c⁄d¨y2
);

444 
	`gë_±_ödex
(
as
, 
brk
, &
ma°î2
, &
£c⁄d¨y2
);

447 i‡((
as
->
hóp_íd
 % 
PAGE_SIZE
) == 0) {

448 
	`gë_±_ödex
(
as
,ás->
hóp_íd
-
PAGE_SIZE
, &
ma°î1
, &
£c⁄d¨y1
);

450 
	`gë_±_ödex
(
as
,ás->
hóp_íd
, &
ma°î1
, &
£c⁄d¨y1
);

452 i‡(
brk
 % 
PAGE_SIZE
 == 0) {

453 
	`gë_±_ödex
(
as
, 
brk
, &
ma°î2
, &
£c⁄d¨y2
);

455 
	`gë_±_ödex
(
as
, 
brk
+
PAGE_SIZE
, &
ma°î2
, &
£c⁄d¨y2
);

460 i‡((
brk
 - 
as
->
hóp_íd
)/
PAGE_SIZE
 >= 256) {

462 *
ªtvÆ
 = -1;

463  
EINVAL
;

466 *
ªtvÆ
 = 
as
->
hóp_íd
;

467 
as
->
hóp_íd
 = 
brk
;

470 
i
, 
k
;

472 i‡(
size
 >= 0) {

473 
i
=
ma°î1
; i<=
ma°î2
; i++) {

474 i‡(
as
->
±_íåy
[
i
] =
NULL
) {

475 
as
->
±_íåy
[
i
] = (
£c⁄d¨y_±
 *)
	`kmÆloc
((secondary_pt));

476 
j
;

477 
j
=0; j<1024; j++) {

478 
as
->
±_íåy
[
i
]->±_íåy[
j
] = 0;

481 i‡(
ma°î1
 =
ma°î2
) {

482 
k
=
£c⁄d¨y1
; k<=
£c⁄d¨y2
; k++) {

483 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 
TLBLO_DIRTY
;

485 } i‡(
i
 =
ma°î1
) {

486 
k
=
£c⁄d¨y1
; k<=1023; k++) {

487 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 
TLBLO_DIRTY
;

489 } i‡(
i
 =
ma°î2
) {

490 
k
=0; k<=
£c⁄d¨y2
; k++) {

491 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 
TLBLO_DIRTY
;

494 
k
=0; k<=1023; k++) {

495 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 
TLBLO_DIRTY
;

502 
i
=
ma°î2
; i<=
ma°î1
; i++) {

503 
	`as£π
(
as
->
±_íåy
[
i
] !
NULL
);

504 i‡(
ma°î1
 =
ma°î2
) {

505 
k
=
£c⁄d¨y2
; k<=
£c⁄d¨y1
; k++) {

506 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 0;

508 } i‡(
i
 =
ma°î2
) {

509 
k
=
£c⁄d¨y2
; k<=1023; k++) {

510 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 0;

512 } i‡(
i
 =
ma°î1
) {

513 
k
=0; k<=
£c⁄d¨y1
; k++) {

514 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 0;

517 
k
=0; k<=1023; k++) {

518 
as
->
±_íåy
[
i
]->±_íåy[
k
] = 0;

564 
	}
}

	@userprog/uio.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<uio.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

12 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

14 
iovec
 *
iov
;

15 
size_t
 
size
;

16 
ªsu…
;

18 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

19 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

21 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

22 
	`as£π
(
uio
->
uio_•a˚
 =
NULL
);

25 
	`as£π
(
uio
->
uio_•a˚
 =
cuπhªad
->
t_vm•a˚
);

28 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

29 
iov
 = &
uio
->
uio_iovec
;

30 
size
 = 
iov
->
iov_Àn
;

32 i‡(
size
 > 
n
) {

33 
size
 = 
n
;

36 i‡(
size
==0) {

42 
	`∑nic
("uiomove: sizeÑeached 0\n");

45 
uio
->
uio_£gÊg
) {

46 
UIO_SYSSPACE
:

47 
ªsu…
 = 0;

50 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

51 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

54 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

56 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

58 
UIO_USERSPACE
:

59 
UIO_USERISPACE
:

60 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

61 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

64 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

66 i‡(
ªsu…
) {

67  
ªsu…
;

69 
iov
->
iov_uba£
 +
size
;

72 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

73 ()
uio
->
uio_£gÊg
);

76 
iov
->
iov_Àn
 -
size
;

77 
uio
->
uio_ªsid
 -
size
;

78 
uio
->
uio_off£t
 +
size
;

79 
±r
 = ((*Ìå + 
size
);

80 
n
 -
size
;

84 
	}
}

87 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

90 
zîos
[16];

91 
size_t
 
amt
;

92 
ªsu…
;

95 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

97 
n
>0) {

98 
amt
 = (
zîos
);

99 i‡(
amt
 > 
n
) {

100 
amt
 = 
n
;

102 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

103 i‡(
ªsu…
) {

104  
ªsu…
;

106 
n
 -
amt
;

110 
	}
}

116 
	$mk_kuio
(
uio
 *uio, *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

118 
uio
->
uio_iovec
.
iov_kba£
 = 
kbuf
;

119 
uio
->
uio_iovec
.
iov_Àn
 = 
Àn
;

120 
uio
->
uio_off£t
 = 
pos
;

121 
uio
->
uio_ªsid
 = 
Àn
;

122 
uio
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

123 
uio
->
uio_rw
 = 
rw
;

124 
uio
->
uio_•a˚
 = 
NULL
;

125 
	}
}

	@vm/addrspace.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

6 
	~<addr•a˚.h
>

7 
	~<vm.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/éb.h
>

10 
	~<db-hñ≥r.h
>

11 
	~<synch.h
>

12 
	~<machöe/éb.h
>

13 
	~<vm_hñ≥r.h
>

14 
	~<vfs.h
>

15 
	~<vnode.h
>

16 
	~<kîn/uni°d.h
>

17 
	~<kîn/°©.h
>

18 
	~"›t-dumbvm.h
"

21 
	#CMAPDB
 0

	)

22 
	#NOMEMDB
 1

	)

27 
addr•a˚
 *

28 
	$as_¸óã
()

30 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

31 i‡(
as
==
NULL
) {

35  
NULL
;

37 
as
->
fûñock
 = 
	`lock_¸óã
("as_filelock");

38 i‡(
as
->
fûñock
 =
NULL
) {

39 
	`k‰ì
(
as
);

40  
NULL
;

42 
i
;

43 
i
 = 0; i < 512; i++) {

44 
as
->
±_íåy
[
i
] = 
NULL
;

46 
as
->
chûd
 = 
NULL
;

48 
as
->
hóp_°¨t
 = 0;

49 
as
->
hóp_íd
 = 0;

51 
sw≠«me
[15];

53 
•l
 = 
	`•lhigh
();

54 
	`¢¥ötf
(
sw≠«me
, 15, "SW%lu", 
sw≠fûecou¡
);

55 
as
->
sw≠fûecou¡
 = swapfilecount;

56 
sw≠fûecou¡
++;

58 
as
->
sw≠fûesize
 = 0;

60 
	`•lx
(
•l
);

62 
vnode
 *
v
;

63 
ªsu…
 = 
	`vfs_›í
(
sw≠«me
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, &
v
);

64 i‡(
ªsu…
) {

65 
	`k¥ötf
("****ás: sw≠ fûê¸óã faûuª,Éº: %d\n", 
ªsu…
);

66 
	`vfs_˛o£
(
v
);

67  
NULL
;

69 
	`vfs_˛o£
(
v
);

71  
as
;

72 
	}
}

75 
	$as_de°roy
(
addr•a˚
 *
as
)

77 
•l
 = 
	`•lhigh
();

78 
i
;

79 
i
 = 0; i < 512; i++) {

80 i‡(
as
->
±_íåy
[
i
] !
NULL
) {

82 
k
;

83 
k
 = 0; k < 1024; k++) {

84 i‡((
as
->
±_íåy
[
i
]->±_íåy[
k
] & 
TLBLO_VALID
) != 0) {

86 
∑ddr_t
 
∑ddr
 = (
as
->
±_íåy
[
i
]->±_íåy[
k
]Ë& 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
;

87 
	`as£π
(
∑ddr
 < 0x80000000);

88 
	`k‰ì
(
	`PADDR_TO_KVADDR
(
∑ddr
));

91 
	`k‰ì
(
as
->
±_íåy
[
i
]);

104 
	`k‰ì
(
as
);

105 
	`•lx
(
•l
);

106 
	}
}

109 
	$as_a˘iv©e
(
addr•a˚
 *
as
)

111 
i
, 
•l
;

113 ()
as
;

115 
•l
 = 
	`•lhigh
();

117 
i
=0; i<
NUM_TLB
; i++) {

118 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

121 
	`•lx
(
•l
);

122 
	}
}

125 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

126 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
, 
°©us
, 
mode
)

129 ()
ªadabÀ
;

130 ()
wrôóbÀ
;

131 ()
execuèbÀ
;

133 
size_t
 
≈ages
;

136 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

137 
vaddr
 &
PAGE_FRAME
;

140 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

142 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

144 
ma°î_i
;

145 
£c⁄d¨y_i
;

146 
	`gë_±_ödex
(
as
, 
vaddr
, &
ma°î_i
, &
£c⁄d¨y_i
);

148 
	`DEBUG
(
DB_VM
, "***ás_prepare_load ***\n");

149 
	`DEBUG
(
DB_VM
, "≈age†%u\tma°î_ò%d\t£c⁄d¨y_ò%d\n", 
≈ages
, 
ma°î_i
, 
£c⁄d¨y_i
);

155 i‡((
£c⁄d¨y_i
 + 
≈ages
-1) < 1024) {

157 i‡(
as
->
±_íåy
[
ma°î_i
] =
NULL
) {

159 
as
->
±_íåy
[
ma°î_i
] = (
£c⁄d¨y_±
 *)
	`kmÆloc
((secondary_pt));

160 i‡(
as
->
±_íåy
[
ma°î_i
] =
NULL
) {

164 #i‡
NOMEMDB


165 
	`k¥ötf
("****ás: kmalloc fail 2\n");

167  
ENOMEM
;

169 
i
;

170 
i
 = 0; i < 1024; i++) {

171 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] = 0;

178 i‡(
as
->
±_íåy
[
ma°î_i
] =
NULL
) {

179 
as
->
±_íåy
[
ma°î_i
] = (
£c⁄d¨y_±
 *)
	`kmÆloc
((secondary_pt));

180 i‡(
as
->
±_íåy
[
ma°î_i
] =
NULL
) {

184 #i‡
NOMEMDB


185 
	`k¥ötf
("****ás: kmalloc fail 3\n");

187  
ENOMEM
;

189 
i
;

190 
i
 = 0; i < 1024; i++) {

191 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] = 0;

195 i‡(
as
->
±_íåy
[
ma°î_i
+1] =
NULL
) {

196 
as
->
±_íåy
[
ma°î_i
+1] = (
£c⁄d¨y_±
 *)
	`kmÆloc
((secondary_pt));

197 i‡(
as
->
±_íåy
[
ma°î_i
+1] =
NULL
) {

201 #i‡
NOMEMDB


202 
	`k¥ötf
("****ás: kmalloc fail 4\n");

204  
ENOMEM
;

206 
i
;

207 
i
 = 0; i < 1024; i++) {

208 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] = 0;

217 i‡((
£c⁄d¨y_i
 + 
≈ages
 - 1) < 1024) {

219 
size_t
 
i
;

220 
i
 = 0; i < 
≈ages
; i++) {

222 
	`as£π
((
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
+
i
] & 
TLBLO_VALID
) == 0);

224 i‡(
mode
 =
GETPAGE
) {

226 
	`as£π
(
≈ages
 == 1);

230 
∑ddr_t
 
pba£
 = 
	`as_gëµages_°©us
(1, 
°©us
, 
as
);

231 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
 + 
i
] |
pba£
;

232 *(
cm≠_±e_íåy
 + (
pba£
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
Ë&(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
 + 
i
]);

233 i‡(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
 + 
i
] == 0){

234  
ENOMEM
;

240 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
+
i
] |
TLBLO_VALID
;

241 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
+
i
] |
TLBLO_DIRTY
;

243 
	`DEBUG
(
DB_VM
, "£t: ma°î_i: %u, sec⁄d¨y_i: %u,áddr: 0x%08x\n", 
ma°î_i
, 
£c⁄d¨y_i
+
i
, 
as
->
±_íåy
[master_i]->pt_entry[secondary_i+i]);

245 } i‡(
mode
 =
GETENTRY
){

247 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
 + 
i
] = 0;

248 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
 + 
i
] &~(
vaddr_t
)
TLBLO_VALID
;

250 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
 + 
i
] |
TLBLO_DIRTY
;

252 
	`∑nic
("as_prepare_load: unknown mode\n");

258 
	`as£π
(
ma°î_i
+1 < 512);

259 
size_t
 
i
;

263 
i
 = 
£c⁄d¨y_i
; i < 1024; i++) {

265 
	`as£π
((
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] & 
TLBLO_VALID
) == 0);

267 i‡(
mode
 =
GETPAGE
) {

271 
∑ddr_t
 
pba£
 = 
	`as_gëµages_°©us
(1, 
°©us
, 
as
);

272 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] |
pba£
;

273 *(
cm≠_±e_íåy
 + (
pba£
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
Ë&(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
]);

274 
	`as£π
(
≈ages
 == 1);

275 i‡(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] == 0) {

276  
ENOMEM
;

281 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] |
TLBLO_VALID
;

282 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] |
TLBLO_DIRTY
;

284 } i‡(
mode
 =
GETENTRY
) {

285 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] = 0;

286 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] &~(
vaddr_t
)
TLBLO_VALID
;

288 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
i
] |
TLBLO_DIRTY
;

290 
	`∑nic
("as_prepare_load: unknown mode");

296 
i
 = 0; i < 
≈ages
-(1024-
£c⁄d¨y_i
); i++) {

297 
	`as£π
((
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] & 
TLBLO_VALID
) == 0);

298 i‡(
mode
 =
GETPAGE
) {

302 
∑ddr_t
 
pba£
 = 
	`as_gëµages_°©us
(1, 
°©us
, 
as
);

303 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] |
pba£
;

304 *(
cm≠_±e_íåy
 + (
pba£
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
Ë&(
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
]);

305 
	`as£π
(
≈ages
 == 1);

306 i‡(
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] == 0){

307 #i‡
NOMEMDB


308 
	`k¥ötf
("****ás: getppage fail 3\n");

310  
ENOMEM
;

313 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] |
TLBLO_VALID
;

314 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] |
TLBLO_DIRTY
;

316 
	`DEBUG
(
DB_VM
, "£t: ma°î_i: %u, sec⁄d¨y_i: %u,áddr: 0x%08x\n", 
ma°î_i
+1, 
£c⁄d¨y_i
+
i
, 
as
->
±_íåy
[master_i+1]->pt_entry[secondary_i+i]);

317 } i‡(
mode
 =
GETENTRY
) {

318 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] = 0;

319 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] &~(
vaddr_t
)
TLBLO_VALID
;

321 
as
->
±_íåy
[
ma°î_i
+1]->±_íåy[
i
] |
TLBLO_DIRTY
;

323 
	`∑nic
("as_prepare_load: unknown mode\n");

328 #i‡
CMAPDB


329 
	`cmd_c‹em≠°©s
(0, 
NULL
);

333 
	}
}

340 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
, 
°©us
, 
ma°î_i
, 
£c⁄d¨y_i
)

342 
•l
 = 
	`•lhigh
();

344 
∑ddr_t
 
pba£
 = 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
;

345 
size_t
 
ödex
 = (
pba£
 - 
fú°∑ddr_öô
Ë/ 
PAGE_SIZE
;

347 
	`as£π
(*(
c‹em≠_íåy
+
ödex
)%10 =
PPAGE_TEMP_FIXED
);

348 
	`as£π
(*(
cm≠_as_íåy
+
ödex
Ë=
as
);

350 *(
c‹em≠_íåy
+
ödex
Ë-
PPAGE_TEMP_FIXED
;

351 *(
c‹em≠_íåy
+
ödex
Ë+
°©us
;

353 i‡(*(
c‹em≠_íåy
+
ödex
)/100 == 0) {

354 *(
c‹em≠_íåy
+
ödex
Ë+
PPAGE_REFERENCED
;

357 
	`•lx
(
•l
);

359 
	}
}

362 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

364 ()
as
;

365 *
°ack±r
 = 
USERSTACK
;

367 
	}
}

375 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

377 
addr•a˚
 *
√w
;

379 
√w
 = 
	`as_¸óã
();

380 i‡(
√w
==
NULL
) {

381  
ENOMEM
;

387 
•l
;

388 
•l
 = 
	`•lhigh
();

394 
ﬁdoff£t
;

396 
i
 = 0;

397 
k
 = 0;

398 
i
 = 0; i < 512; i++) {

399 i‡(
ﬁd
->
±_íåy
[
i
] =
NULL
) {

400 
√w
->
±_íåy
[
i
] = 
NULL
;

403 
√w
->
±_íåy
[
i
] = (
£c⁄d¨y_±
 *)
	`kmÆloc
((secondary_pt));

404 i‡(
√w
->
±_íåy
[
i
] =
NULL
) {

408 
	`as_de°roy
(
√w
);

409 
	`•lx
(
•l
);

410 #i‡
NOMEMDB


411 
	`k¥ötf
("****ás: kmalloc fail 5\n");

414  
ENOMEM
;

416 
öô
;

418 
öô
 = 0; init < 1024; init ++) {

419 
√w
->
±_íåy
[
i
]->±_íåy[
öô
] = 0;

421 
k
 = 0; k < 1024; k++) {

423 i‡(((
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
TLBLO_VALID
) == 0) &&

424 (
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] != 0)) {

429 
√w
->
±_íåy
[
i
]->±_íåy[
k
] = 
	`as_gëµages_°©us
(1, 
PPAGE_TEMP_FIXED
,Çew);

430 *(
cm≠_±e_íåy
 + (
√w
->
±_íåy
[
i
]->±_íåy[
k
] - 
fú°∑ddr_öô
)/
PAGE_SIZE
) = &(new->pt_entry[i]->pt_entry[k]);

432 i‡(
√w
->
±_íåy
[
i
]->±_íåy[
k
] == 0) {

433 
	`as_de°roy
(
√w
);

434 
	`•lx
(
•l
);

435 #i‡
NOMEMD


436 
	`k¥ötf
("****ás: getppages fail 3.5--\n");

439  
ENOMEM
;

445 
ﬁdoff£t
 = (
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
SWAP_FRAME
) / 1048576;

446 
	`as£π
(
ﬁdoff£t
 != 0);

447 
ﬁdoff£t
 *
PAGE_SIZE
;

448 
ﬁdoff£t
 -
PAGE_SIZE
;

450 
vaddr_t
 
vba£
 = 
	`PADDR_TO_KVADDR
(
√w
->
±_íåy
[
i
]->±_íåy[
k
]);

451 
	`as£π
((
√w
->
±_íåy
[
i
]->±_íåy[
k
] & 
PAGE_FRAME
) ==Çew->pt_entry[i]->pt_entry[k]);

452 
ªsu…
 = 
	`sw≠ö
(
ﬁd
, 
ﬁdoff£t
, 
vba£
);

453 i‡(
ªsu…
) {

454  
ªsu…
;

456 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |(
ﬁd
->±_íåy[i]->±_íåy[k] & ~(
vaddr_t
)
PAGE_FRAME
);

457 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |
TLBLO_VALID
;

458 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |
TLBLO_DIRTY
;

460 
	`as_com∂ëe_lﬂd
(
√w
, 
PPAGE_OCCUPIED
, 
i
, 
k
);

463 i‡((
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
TLBLO_VALID
) != 0){

465 
ödex
 = ((
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
Ë- 
fú°∑ddr_öô
Ë/ 
PAGE_SIZE
;

466 
	`as£π
(
ödex
 > 0);

467 
	`as£π
((
size_t
)
ödex
 < 
øm_≈ages
);

474 
√w
->
±_íåy
[
i
]->±_íåy[
k
] = 
	`as_gëµages_°©us
(1, 
PPAGE_TEMP_FIXED
,Çew);

475 *(
cm≠_±e_íåy
 + (
√w
->
±_íåy
[
i
]->±_íåy[
k
] - 
fú°∑ddr_öô
)/
PAGE_SIZE
) = &(new->pt_entry[i]->pt_entry[k]);

487 i‡(((
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
TLBLO_VALID
) == 0) &&

488 (
√w
->
±_íåy
[
i
]->±_íåy[
k
] != 0)) {

494 
ﬁdoff£t
 = (
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
SWAP_FRAME
) / 1048576;

495 
	`as£π
(
ﬁdoff£t
 != 0);

496 
ﬁdoff£t
 *
PAGE_SIZE
;

497 
ﬁdoff£t
 -
PAGE_SIZE
;

499 
vaddr_t
 
vba£
 = 
	`PADDR_TO_KVADDR
(
√w
->
±_íåy
[
i
]->±_íåy[
k
]);

500 
	`as£π
((
√w
->
±_íåy
[
i
]->±_íåy[
k
] & 
PAGE_FRAME
) ==Çew->pt_entry[i]->pt_entry[k]);

501 
ªsu…
 = 
	`sw≠ö
(
ﬁd
, 
ﬁdoff£t
, 
vba£
);

503 i‡(
ªsu…
) {

504  
ªsu…
;

506 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |(
ﬁd
->±_íåy[i]->±_íåy[k] & ~(
vaddr_t
)
PAGE_FRAME
);

507 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |
TLBLO_VALID
;

508 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |
TLBLO_DIRTY
;

509 } i‡(
√w
->
±_íåy
[
i
]->±_íåy[
k
] == 0) {

513 
	`as_de°roy
(
√w
);

514 
	`•lx
(
•l
);

515 #i‡
NOMEMDB


516 
	`k¥ötf
("****ás: getppage fail 4\n");

518  
ENOMEM
;

522 
∑ddr_t
 
ﬁd_∑ddr
 = 
ﬁd
->
±_íåy
[
i
]->±_íåy[
k
] & 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
;

523 
∑ddr_t
 
√w_∑ddr
 = 
√w
->
±_íåy
[
i
]->±_íåy[
k
] & 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
;

524 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w_∑ddr
),

525 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd_∑ddr
),

526 
PAGE_SIZE
);

527 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |(
ﬁd
->±_íåy[i]->±_íåy[k] & ~(
vaddr_t
)
PAGE_FRAME
);

528 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |
TLBLO_VALID
;

529 
√w
->
±_íåy
[
i
]->±_íåy[
k
] |
TLBLO_DIRTY
;

532 
	`as_com∂ëe_lﬂd
(
√w
, 
PPAGE_OCCUPIED
, 
i
, 
k
);

538 *
ªt
 = 
√w
;

540 
	`•lx
(
•l
);

542 #i‡
CMAPDB


543 
	`k¥ötf
("AS_COPY\n");

544 
	`cmd_c‹em≠°©s
(1, 
NULL
);

548 
	}
}

	@vm/vm.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<thªad.h
>

9 
	~<cuπhªad.h
>

10 
	~<addr•a˚.h
>

11 
	~<vm.h
>

12 
	~<vfs.h
>

13 
	~<vnode.h
>

14 
	~<uio.h
>

15 
	~<kîn/°©.h
>

16 
	~<kîn/uni°d.h
>

17 
	~<machöe/•l.h
>

18 
	~<machöe/éb.h
>

19 
	~<db-hñ≥r.h
>

20 
	~<synch.h
>

21 
	~<vm_hñ≥r.h
>

24 
	#DUMBVM
 0

	)

25 
	#DIRTY
 1

	)

26 
	#MAXSTACK
 64

	)

35 
	#FREEKPAGESDB
 0

	)

38 
	$vm_boŸ°øp
()

45 
sw≠fûecou¡
 = 0;

46 
	}
}

48 
∑ddr_t


49 
	$gëµages_°©us
(
≈ages
, 
°©us
)

51 
•l
;

52 
∑ddr_t
 
addr
;

54 
•l
 = 
	`•lhigh
();

59 
addr
 = 
	`øm_Ælocmem
(
≈ages
, 
°©us
);

61 
i
 = (
addr
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
;

62 
	`as£π
(
i
 >= 0);

63 
	`as£π
((
size_t
)
i
 < 
øm_≈ages
);

65 
	`•lx
(
•l
);

66  
addr
;

67 
	}
}

69 
∑ddr_t


70 
	$as_gëµages_°©us
(
≈ages
, 
°©us
, 
addr•a˚
 *
as
)

72 
•l
;

73 
∑ddr_t
 
addr
;

75 
•l
 = 
	`•lhigh
();

80 
addr
 = 
	`as_øm_Ælocmem
(
≈ages
, 
°©us
, 
as
);

81 
i
 = (
addr
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
;

82 
	`as£π
(
i
 >= 0);

83 
	`as£π
((
size_t
)
i
 < 
øm_≈ages
);

84 
	`•lx
(
•l
);

85  
addr
;

86 
	}
}

89 
∑ddr_t


90 
	$gëµages
(
≈ages
) {

91  
	`gëµages_°©us
(
≈ages
, 
PPAGE_OCCUPIED
);

92 
	}
}

115 
vaddr_t


116 
	$Æloc_k∑ges
(
≈ages
)

118 
∑ddr_t
 
∑
;

120 
∑
 = 
	`gëµages_°©us
(
≈ages
, 
PPAGE_K_FIXED
);

121 i‡(
∑
==0) {

127  
	`PADDR_TO_KVADDR
(
∑
);

128 
	}
}

135 
∑ddr_t


136 
	$gëµages_dumb
(
≈ages
)

138 
•l
;

139 
∑ddr_t
 
addr
;

141 
•l
 = 
	`•lhigh
();

143 
addr
 = 
	`øm_°ólmem
(
≈ages
);

145 
	`•lx
(
•l
);

146  
addr
;

147 
	}
}

150 
vaddr_t


151 
	$Æloc_k∑ges_dumb
(
≈ages
)

153 
∑ddr_t
 
∑
;

154 
∑
 = 
	`gëµages_dumb
(
≈ages
);

155 i‡(
∑
==0) {

161  
	`PADDR_TO_KVADDR
(
∑
);

162 
	}
}

165 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

167 
•l
 = 
	`•lhigh
();

169 
∑ddr_t
 
∑ddr
 = 
	`KVADDR_TO_PADDR
(
addr
);

170 
	`as£π
(
∑ddr
%
PAGE_SIZE
 == 0);

171 
	`as£π
((
∑ddr
-
fú°∑ddr_öô
)%
PAGE_SIZE
 == 0);

172 
size_t
 
∑ge_num
 = (
∑ddr
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
;

173 
blksz
 = (*(
c‹em≠_íåy
+
∑ge_num
)%100)/10;

174 
i
;

175 
i
 = 0; i < 
blksz
; i++) {

176 
	`as£π
(*(
c‹em≠_íåy
+
∑ge_num
+
i
)%10 != 0);

177 
	`as£π
((*(
c‹em≠_íåy
+
∑ge_num
+
i
)%100)/10 + i =
blksz
);

178 i‡(*(
c‹em≠_íåy
+
∑ge_num
+
i
)%10 !
PPAGE_TEMP_FIXED
) {

179 *(
c‹em≠_íåy
+
∑ge_num
+
i
Ë
PPAGE_AVAILABLE
;

181 *(
cm≠_as_íåy
+
∑ge_num
+
i
Ë
NULL
;

182 *(
cm≠_±e_íåy
+
∑ge_num
+
i
Ë
NULL
;

185 
	`•lx
(
•l
);

186 
	}
}

192 
	$gë_±_ödex
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, *
ma°î_i
, *
£c⁄d¨y_i
) {

193 
vaddr
 &
PAGE_FRAME
;

195 
	`as£π
((
vaddr
 & 
PT_MASTER
) % 4194304 == 0);

196 *
ma°î_i
 = (
vaddr
 & 
PT_MASTER
) / 4194304;

198 
	`as£π
((
vaddr
 & 
PT_SECONDARY
) % 4096 == 0);

199 *
£c⁄d¨y_i
 = (
vaddr
 & 
PT_SECONDARY
) / 4096;

201 
	`as£π
(*
ma°î_i
 < 512);

202 
	`as£π
(*
£c⁄d¨y_i
 < 1024);

203 
	}
}

207 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

209 
•l
 = 
	`•lhigh
();

211 
	`DEBUG
(
DB_VM
, "n‹mÆvm: fau…: 0x%x\n", 
Áu…addªss
);

213 i‡(
Áu…addªss
 == 0) {

215 
	`•lx
(
•l
);

216  
EFAULT
;

222 
	`as£π
(
Áu…addªss
 < 0x80000000);

223 
∑ddr_t
 
∑ddr_°©
;

224 
Áu…addªss
 &
PAGE_FRAME
;

225 
ma°î_i
, 
£c⁄d¨y_i
;

226 
addr•a˚
 *
as
 = 
cuπhªad
->
t_vm•a˚
;

227 
	`gë_±_ödex
(
as
, 
Áu…addªss
, &
ma°î_i
, &
£c⁄d¨y_i
);

228 i‡(
ma°î_i
 >= 512) {

230 
	`•lx
(
•l
);

231  
EFAULT
;

234 
Áu…ty≥
) {

235 
VM_FAULT_READONLY
:

236 
	`£t_dúty_bô
(
as
, 
ma°î_i
, 
£c⁄d¨y_i
);

237 
VM_FAULT_READ
:

238 
VM_FAULT_WRITE
:

241 
	`•lx
(
•l
);

242  
EINVAL
;

246 
√ed_lﬂd
;

247 
∑ge_exi°
;

248 i‡(
as
->
±_íåy
[
ma°î_i
] =
NULL
) {

249 
√ed_lﬂd
 = 1;

250 
∑ge_exi°
 = 0;

251 } i‡((
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
TLBLO_VALID
) == 0){

252 
√ed_lﬂd
 = 1;

253 i‡((
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
SWAP_FRAME
) == 0) {

254 
∑ge_exi°
 = 0;

256 
∑ge_exi°
 = 1;

259 
√ed_lﬂd
 = 0;

260 
∑ge_exi°
 = 1;

263 i‡(
√ed_lﬂd
) {

281 i‡(
∑ge_exi°
) {

283 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] &(
SWAP_FRAME
 | ~(
vaddr_t
)
PAGE_FRAME
);

284 
∑ddr_t
 
pba£
 = 
	`as_gëµages_°©us
(1, 
PPAGE_TEMP_FIXED
, 
as
);

285 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] |
pba£
;

286 *(
cm≠_±e_íåy
 + (
pba£
 - 
fú°∑ddr_öô
)/
PAGE_SIZE
Ë&(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
]);

287 i‡(
pba£
 == 0) {

288 
	`k¥ötf
("**** vm fault: getppages fail\n");

289 
	`•lx
(
•l
);

290  
ENOMEM
;

293 
off£t
 = (
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
SWAP_FRAME
) / 1048576;

294 
	`as£π
(
off£t
 != 0);

295 
off£t
 *
PAGE_SIZE
;

296 
off£t
 -
PAGE_SIZE
;

298 
vaddr_t
 
vba£
 = 
	`PADDR_TO_KVADDR
(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
PAGE_FRAME
 & ~(vaddr_t)
SWAP_FRAME
);

300 
ªsu…
 = 
	`sw≠ö
(
as
, 
off£t
, 
vba£
);

301 i‡(
ªsu…
) {

302 
	`•lx
(
•l
);

303  
ªsu…
;

307 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] |
TLBLO_VALID
;

317 #i‡
DIRTY


318 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] &~(
vaddr_t
)
TLBLO_DIRTY
;

320 
	`as_com∂ëe_lﬂd
(
as
, 
PPAGE_OCCUPIED
, 
ma°î_i
, 
£c⁄d¨y_i
);

336 
vÆid_¥ï¨e_lﬂd
;

337 i‡((
ma°î_i
 =511Ë&& (
£c⁄d¨y_i
 >(1024 - 
MAXSTACK
))) {

338 
vÆid_¥ï¨e_lﬂd
 = 1;

339 } i‡((
as
->
±_íåy
[
ma°î_i
] !
NULL
Ë&& (as->±_íåy[ma°î_i]->±_íåy[
£c⁄d¨y_i
] != 0)) {

340 
vÆid_¥ï¨e_lﬂd
 = 1;

341 } i‡((
as
->
±_íåy
[
ma°î_i
] !
NULL
) &&

342 (
Áu…addªss
 >
as
->
hóp_°¨t
) &&

343 (
Áu…addªss
 <
as
->
hóp_íd
)){

345 
vÆid_¥ï¨e_lﬂd
 = 1;

347 
vÆid_¥ï¨e_lﬂd
 = 0;

349 i‡(
vÆid_¥ï¨e_lﬂd
) {

350 
ªsu…
;

351 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
, 
Áu…addªss
, 
PAGE_SIZE
, 1, 1, 0, 
PPAGE_TEMP_FIXED
, 
GETPAGE
);

352 i‡(
ªsu…
 != 0){

353 
	`k¥ötf
("**** vm:ás_prepare_load fail\n");

354 
	`•lx
(
•l
);

355  
ENOMEM
;

359 
	`as_com∂ëe_lﬂd
(
as
, 
PPAGE_OCCUPIED
, 
ma°î_i
, 
£c⁄d¨y_i
);

361 
	`•lx
(
•l
);

362  
EFAULT
;

370 
∑ddr_°©
 = 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & ~(
vaddr_t
)
SWAP_FRAME
;

375 
size_t
 
ödex
 = ((
∑ddr_°©
 & 
PAGE_FRAME
Ë- 
fú°∑ddr_öô
Ë/ 
PAGE_SIZE
;

376 i‡(*(
c‹em≠_íåy
 + 
ödex
)/100 == 0) {

377 *(
c‹em≠_íåy
 + 
ödex
Ë+
PPAGE_REFERENCED
;

380 
u_öt32_t
 
ehi
, 
ño
;

382 
i
;

403 
i
=0; i<
NUM_TLB
; i++) {

404 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

405 i‡(
ño
 & 
TLBLO_VALID
) {

408 
ehi
 = 
Áu…addªss
;

410 
ño
 = 
∑ddr_°©
;

411 
	`TLB_Wrôe
(
ehi
, 
ño
, 
i
);

412 
	`•lx
(
•l
);

420 
ehi
 = 
Áu…addªss
;

421 
ño
 = 
∑ddr_°©
;

422 
	`TLB_Wrôe
(
ehi
, 
ño
, 0);

426 
	`•lx
(
•l
);

429 
	}
}

	@vm/vm_helper.c

1 
	~<vm_hñ≥r.h
>

2 
	~<vfs.h
>

3 
	~<vnode.h
>

4 
	~<uio.h
>

5 
	~<kîn/°©.h
>

6 
	~<kîn/uni°d.h
>

7 
	~<cuπhªad.h
>

8 
	~<machöe/éb.h
>

9 
	~<db-hñ≥r.h
>

10 
	~<machöe/éb.h
>

12 
	$föd_vi˘im
() {

13 
	`as£π
(
cur•l
 > 0);

14 
size_t
 
i
;

15 
size_t
 
ödex
;

20 
i
=0; i<2*
øm_≈ages
; i++) {

27 
LRU_±r
 = (LRU_±∏+ 1)%
øm_≈ages
;

28 
ödex
 = 
LRU_±r
;

29 i‡(*(
c‹em≠_íåy
 + 
ödex
)/100 == 1) {

30 *(
c‹em≠_íåy
 + 
ödex
Ë-
PPAGE_REFERENCED
;

32 
ébi
;

33 
u_öt32_t
 
ehi
, 
ño
;

34 
∑ddr_t
 
ba£
 = 
fú°∑ddr_öô
 + 
ödex
*
PAGE_SIZE
;

35 
ébi
=0;Ålbi<
NUM_TLB
;Ålbi++) {

36 
	`TLB_Ród
(&
ehi
, &
ño
, 
ébi
);

37 i‡((
ño
 & 
PAGE_FRAME
Ë=
ba£
) {

38 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
ébi
), 
	`TLBLO_INVALID
(),Ålbi);

42 } i‡(*(
c‹em≠_íåy
 + 
ödex
)%10 =
PPAGE_OCCUPIED
) {

46  
ödex
;

50 
i
=0; i<2*
øm_≈ages
; i++) {

57 
LRU_±r
 = (LRU_±∏+ 1)%
øm_≈ages
;

58 
ödex
 = 
LRU_±r
;

59 i‡(*(
c‹em≠_íåy
 + 
ödex
)/100 == 1) {

60 *(
c‹em≠_íåy
 + 
ödex
Ë-
PPAGE_REFERENCED
;

62 
ébi
;

63 
u_öt32_t
 
ehi
, 
ño
;

64 
∑ddr_t
 
ba£
 = 
fú°∑ddr_öô
 + 
ödex
*
PAGE_SIZE
;

65 
ébi
=0;Ålbi<
NUM_TLB
;Ålbi++) {

66 
	`TLB_Ród
(&
ehi
, &
ño
, 
ébi
);

67 i‡((
ño
 & 
PAGE_FRAME
Ë=
ba£
) {

68 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
ébi
), 
	`TLBLO_INVALID
(),Ålbi);

72 } i‡(*(
c‹em≠_íåy
 + 
ödex
)%10 =
PPAGE_FIXED
) {

76  
ödex
;

79 
	`k¥ötf
("==== FIND_VICTIM\n");

80 
	`cmd_c‹em≠°©s
(1, 
NULL
);

87 
i
=0; i<
øm_≈ages
; i++) {

88 i‡(*(
c‹em≠_íåy
 + 
i
)%10 =
PPAGE_TEMP_FIXED
) {

89 
	`•l0
();

91 *(
c‹em≠_íåy
 + 
i
)%10 =
PPAGE_TEMP_FIXED
) {

94 
	`•lhigh
();

95 
	`as£π
(*(
c‹em≠_íåy
 + 
i
)%10 !
PPAGE_TEMP_FIXED
);

96 
ªt
 = 
	`föd_vi˘im
();

97  
ªt
;

101 
	`∑nic
("noÖage can beÉvicted!\n");

103 
	}
}

116 
∑ddr_t
 
	$evi˘i⁄
(
vi˘im
, 
°©us
, 
addr•a˚
 *
as
) {

117 
	`as£π
(
cur•l
 > 0);

124 
off£t
;

126 
sw≠«me
[15];

127 
vnode
 *
v
;

128 
uio
 
sw≠_ku
;

129 
ªsu…
;

131 
	`as£π
(
vi˘im
 >= 0);

132 *(
c‹em≠_íåy
 + 
vi˘im
) -= (*(coremap_entry + victim) % 10);

133 *(
c‹em≠_íåy
 + 
vi˘im
Ë+
PPAGE_TEMP_FIXED
;

134 *(
cm≠_±e_íåy
 + 
vi˘im
Ë
NULL
;

136 
∑ddr_t
 
pba£
 = 
fú°∑ddr_öô
 + 
vi˘im
 * 
PAGE_SIZE
;

137 
addr•a˚
 *
p
 = *(
cm≠_as_íåy
 + 
vi˘im
);

138 
i
 = 0;

139 
k
 = 0;

140 
i
=0; i<512; i++) {

141 i‡(
p
->
±_íåy
[
i
] =
NULL
) {

144 
k
=0; k<1024; k++) {

146 i‡((
p
->
±_íåy
[
i
]->±_íåy[
k
] & 
TLBLO_VALID
) &&

147 ((
p
->
±_íåy
[
i
]->±_íåy[
k
] & 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
Ë=
pba£
)) {

149 
vaddr_t
 
vba£
 = 
	`PADDR_TO_KVADDR
(
pba£
);

158 
p
->
±_íåy
[
i
]->±_íåy[
k
] &~(
vaddr_t
)
TLBLO_VALID
;

164 i‡(
cuπhªad
->
t_vm•a˚
 =
p
) {

166 
ébi
;

167 
u_öt32_t
 
ehi
, 
ño
;

168 
ébi
=0;Ålbi<
NUM_TLB
;Ålbi++) {

169 
	`TLB_Ród
(&
ehi
, &
ño
, 
ébi
);

170 i‡((
ño
 & 
PAGE_FRAME
Ë=
pba£
) {

171 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
ébi
), 
	`TLBLO_INVALID
(),Ålbi);

176 i‡(
p
->
±_íåy
[
i
]->±_íåy[
k
] & 
TLBLO_DIRTY
) {

191 
off£t
 = (
p
->
±_íåy
[
i
]->±_íåy[
k
] & 
SWAP_FRAME
) / 1048576;

192 
off£t
 *
PAGE_SIZE
;

194 i‡(
off£t
 != 0) {

196 
off£t
 -
PAGE_SIZE
;

199 
off£t
 = 
p
->
sw≠fûesize
;

200 
p
->
sw≠fûesize
 +
PAGE_SIZE
;

201 
p
->
±_íåy
[
i
]->±_íåy[
k
] |(
off£t
/
PAGE_SIZE
 + 1)*1048576;

204 
	`¢¥ötf
(
sw≠«me
, 15, "SW%lu", 
p
->
sw≠fûecou¡
);

220 
	`as£π
((
p
->
±_íåy
[
i
]->±_íåy[
k
] & 
PTE_LOCK
) == 0);

221 
p
->
±_íåy
[
i
]->±_íåy[
k
] |
PTE_LOCK
;

230 
ªsu…
 = 
	`vfs_›í
(
sw≠«me
, 
O_RDWR
, &
v
);

231 i‡(
ªsu…
) {

232 
	`k¥ötf
("**** sw≠ fûê›í faûuª,Éº: %d\n", 
ªsu…
);

235 
	`mk_kuio
(&
sw≠_ku
, (*)
vba£
, 
PAGE_SIZE
, 
off£t
, 
UIO_WRITE
);

242 i‡(*(
cm≠_as_íåy
 + 
vi˘im
Ë!
NULL
) {

244 
ªsu…
 = 
	`VOP_WRITE
(
v
, &
sw≠_ku
);

245 i‡(
ªsu…
) {

246 
	`k¥ötf
("********* v› wrôêÁûuª,Éº: %d\n", 
ªsu…
);

253 
p
->
±_íåy
[
i
]->±_íåy[
k
] &~(
vaddr_t
)
PTE_LOCK
;

263 
	`vfs_˛o£
(
v
);

274 *(
cm≠_as_íåy
 + 
vi˘im
Ë
as
;

275 *(
cm≠_±e_íåy
 + 
vi˘im
Ë
NULL
;

279 *(
c‹em≠_íåy
 + 
vi˘im
Ë-
PPAGE_TEMP_FIXED
;

280 *(
c‹em≠_íåy
 + 
vi˘im
Ë+
°©us
;

283 i‡(*(
c‹em≠_íåy
+
vi˘im
)/100 == 0) {

284 *(
c‹em≠_íåy
+
vi˘im
Ë+
PPAGE_REFERENCED
;

287  
pba£
;

288 
	}
}

291 
	$sw≠ö
(
addr•a˚
 *
as
, 
off£t
, 
vaddr_t
 
vba£
) {

293 
	`as£π
(
cur•l
 > 0);

295 
sw≠«me
[15];

296 
ªsu…
;

297 
vnode
 *
v
;

298 
uio
 
sw≠_ku
;

300 
	`¢¥ötf
(
sw≠«me
, 15, "SW%lu", 
as
->
sw≠fûecou¡
);

305 
ma°î_i
 = 0;

306 
£c⁄d¨y_i
 = 0;

307 
	`as£π
(
vba£
 < 0x80000000);

308 
	`gë_±_ödex
(
as
, 
vba£
, &
ma°î_i
, &
£c⁄d¨y_i
);

310 i‡((
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
PTE_LOCK
) == 0) {

313 
	`thªad_yõld
();

316 
ªsu…
 = 
	`vfs_›í
(
sw≠«me
, 
O_RDWR
, &
v
);

318 i‡(
ªsu…
) {

319 
	`k¥ötf
("**** sw≠ö o≥¿fûêîr: %d\n", 
ªsu…
);

320 
	`vfs_˛o£
(
v
);

321  
ªsu…
;

324 
	`mk_kuio
(&
sw≠_ku
, (*)
vba£
, 
PAGE_SIZE
, 
off£t
, 
UIO_READ
);

326 
ªsu…
 = 
	`VOP_READ
(
v
, &
sw≠_ku
);

327 i‡(
ªsu…
) {

328 
	`k¥ötf
("**** sw≠öÑódÉº: %d\n", 
ªsu…
);

329 
	`vfs_˛o£
(
v
);

330  
ªsu…
;

333 
	`vfs_˛o£
(
v
);

338 
	}
}

345 
	$£t_dúty_bô
(
addr•a˚
 *
as
, 
ma°î_i
, 
£c⁄d¨y_i
) {

346 
	`as£π
(
ma°î_i
 != 1);

347 
	`as£π
(
as
->
±_íåy
[
ma°î_i
] !
NULL
);

348 
	`as£π
(
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] != 0);

349 
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] |
TLBLO_DIRTY
;

351 
∑ddr_t
 
pba£
 = (
as
->
±_íåy
[
ma°î_i
]->±_íåy[
£c⁄d¨y_i
] & 
PAGE_FRAME
 & ~(
vaddr_t
)
SWAP_FRAME
);

352 
i
;

353 
u_öt32_t
 
ehi
, 
ño
;

354 
i
=0; i<
NUM_TLB
; i++) {

355 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

356 i‡((
ño
 & 
PAGE_FRAME
Ë=
pba£
) {

357 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

361 
	}
}

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_AARCH64
 183

	)

253 
	#EM_TILEPRO
 188

	)

254 
	#EM_MICROBLAZE
 189

	)

255 
	#EM_TILEGX
 191

	)

256 
	#EM_NUM
 192

	)

262 
	#EM_ALPHA
 0x9026

	)

266 
	#EV_NONE
 0

	)

267 
	#EV_CURRENT
 1

	)

268 
	#EV_NUM
 2

	)

274 
Elf32_W‹d
 
	msh_«me
;

275 
Elf32_W‹d
 
	msh_ty≥
;

276 
Elf32_W‹d
 
	msh_Êags
;

277 
Elf32_Addr
 
	msh_addr
;

278 
Elf32_Off
 
	msh_off£t
;

279 
Elf32_W‹d
 
	msh_size
;

280 
Elf32_W‹d
 
	msh_lök
;

281 
Elf32_W‹d
 
	msh_öfo
;

282 
Elf32_W‹d
 
	msh_addølign
;

283 
Elf32_W‹d
 
	msh_ítsize
;

284 } 
	tElf32_Shdr
;

288 
Elf64_W‹d
 
	msh_«me
;

289 
Elf64_W‹d
 
	msh_ty≥
;

290 
Elf64_Xw‹d
 
	msh_Êags
;

291 
Elf64_Addr
 
	msh_addr
;

292 
Elf64_Off
 
	msh_off£t
;

293 
Elf64_Xw‹d
 
	msh_size
;

294 
Elf64_W‹d
 
	msh_lök
;

295 
Elf64_W‹d
 
	msh_öfo
;

296 
Elf64_Xw‹d
 
	msh_addølign
;

297 
Elf64_Xw‹d
 
	msh_ítsize
;

298 } 
	tElf64_Shdr
;

302 
	#SHN_UNDEF
 0

	)

303 
	#SHN_LORESERVE
 0xff00

	)

304 
	#SHN_LOPROC
 0xff00

	)

305 
	#SHN_BEFORE
 0xff00

	)

307 
	#SHN_AFTER
 0xff01

	)

309 
	#SHN_HIPROC
 0xff1‡

	)

310 
	#SHN_LOOS
 0xff20

	)

311 
	#SHN_HIOS
 0xff3‡

	)

312 
	#SHN_ABS
 0xfff1

	)

313 
	#SHN_COMMON
 0xfff2

	)

314 
	#SHN_XINDEX
 0xfff‡

	)

315 
	#SHN_HIRESERVE
 0xfff‡

	)

319 
	#SHT_NULL
 0

	)

320 
	#SHT_PROGBITS
 1

	)

321 
	#SHT_SYMTAB
 2

	)

322 
	#SHT_STRTAB
 3

	)

323 
	#SHT_RELA
 4

	)

324 
	#SHT_HASH
 5

	)

325 
	#SHT_DYNAMIC
 6

	)

326 
	#SHT_NOTE
 7

	)

327 
	#SHT_NOBITS
 8

	)

328 
	#SHT_REL
 9

	)

329 
	#SHT_SHLIB
 10

	)

330 
	#SHT_DYNSYM
 11

	)

331 
	#SHT_INIT_ARRAY
 14

	)

332 
	#SHT_FINI_ARRAY
 15

	)

333 
	#SHT_PREINIT_ARRAY
 16

	)

334 
	#SHT_GROUP
 17

	)

335 
	#SHT_SYMTAB_SHNDX
 18

	)

336 
	#SHT_NUM
 19

	)

337 
	#SHT_LOOS
 0x60000000

	)

338 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

339 
	#SHT_GNU_HASH
 0x6ffffff6

	)

340 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

341 
	#SHT_CHECKSUM
 0x6ffffff8

	)

342 
	#SHT_LOSUNW
 0x6fffffÁ

	)

343 
	#SHT_SUNW_move
 0x6fffffÁ

	)

344 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

345 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

346 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

347 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

348 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

349 
	#SHT_HISUNW
 0x6ffffff‡

	)

350 
	#SHT_HIOS
 0x6ffffff‡

	)

351 
	#SHT_LOPROC
 0x70000000

	)

352 
	#SHT_HIPROC
 0x7ffffff‡

	)

353 
	#SHT_LOUSER
 0x80000000

	)

354 
	#SHT_HIUSER
 0x8ffffff‡

	)

358 
	#SHF_WRITE
 (1 << 0Ë

	)

359 
	#SHF_ALLOC
 (1 << 1Ë

	)

360 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

361 
	#SHF_MERGE
 (1 << 4Ë

	)

362 
	#SHF_STRINGS
 (1 << 5Ë

	)

363 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

364 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

365 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

367 
	#SHF_GROUP
 (1 << 9Ë

	)

368 
	#SHF_TLS
 (1 << 10Ë

	)

369 
	#SHF_MASKOS
 0x0ff00000

	)

370 
	#SHF_MASKPROC
 0xf0000000

	)

371 
	#SHF_ORDERED
 (1 << 30Ë

	)

373 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

377 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

393 
Elf64_W‹d
 
	m°_«me
;

394 
	m°_öfo
;

395 
	m°_Ÿhî
;

396 
Elf64_Se˘i⁄
 
	m°_shndx
;

397 
Elf64_Addr
 
	m°_vÆue
;

398 
Elf64_Xw‹d
 
	m°_size
;

399 } 
	tElf64_Sym
;

406 
Elf32_HÆf
 
	msi_boundto
;

407 
Elf32_HÆf
 
	msi_Êags
;

408 } 
	tElf32_Symöfo
;

412 
Elf64_HÆf
 
	msi_boundto
;

413 
Elf64_HÆf
 
	msi_Êags
;

414 } 
	tElf64_Symöfo
;

417 
	#SYMINFO_BT_SELF
 0xfff‡

	)

418 
	#SYMINFO_BT_PARENT
 0xff„

	)

419 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

422 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

423 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

424 
	#SYMINFO_FLG_COPY
 0x0004

	)

425 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

428 
	#SYMINFO_NONE
 0

	)

429 
	#SYMINFO_CURRENT
 1

	)

430 
	#SYMINFO_NUM
 2

	)

435 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

436 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

437 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

440 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

441 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

442 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

446 
	#STB_LOCAL
 0

	)

447 
	#STB_GLOBAL
 1

	)

448 
	#STB_WEAK
 2

	)

449 
	#STB_NUM
 3

	)

450 
	#STB_LOOS
 10

	)

451 
	#STB_GNU_UNIQUE
 10

	)

452 
	#STB_HIOS
 12

	)

453 
	#STB_LOPROC
 13

	)

454 
	#STB_HIPROC
 15

	)

458 
	#STT_NOTYPE
 0

	)

459 
	#STT_OBJECT
 1

	)

460 
	#STT_FUNC
 2

	)

461 
	#STT_SECTION
 3

	)

462 
	#STT_FILE
 4

	)

463 
	#STT_COMMON
 5

	)

464 
	#STT_TLS
 6

	)

465 
	#STT_NUM
 7

	)

466 
	#STT_LOOS
 10

	)

467 
	#STT_GNU_IFUNC
 10

	)

468 
	#STT_HIOS
 12

	)

469 
	#STT_LOPROC
 13

	)

470 
	#STT_HIPROC
 15

	)

477 
	#STN_UNDEF
 0

	)

482 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

485 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

488 
	#STV_DEFAULT
 0

	)

489 
	#STV_INTERNAL
 1

	)

490 
	#STV_HIDDEN
 2

	)

491 
	#STV_PROTECTED
 3

	)

498 
Elf32_Addr
 
	mr_off£t
;

499 
Elf32_W‹d
 
	mr_öfo
;

500 } 
	tElf32_Rñ
;

509 
Elf64_Addr
 
	mr_off£t
;

510 
Elf64_Xw‹d
 
	mr_öfo
;

511 } 
	tElf64_Rñ
;

517 
Elf32_Addr
 
	mr_off£t
;

518 
Elf32_W‹d
 
	mr_öfo
;

519 
Elf32_Sw‹d
 
	mr_addíd
;

520 } 
	tElf32_Rña
;

524 
Elf64_Addr
 
	mr_off£t
;

525 
Elf64_Xw‹d
 
	mr_öfo
;

526 
Elf64_Sxw‹d
 
	mr_addíd
;

527 } 
	tElf64_Rña
;

531 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

532 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

533 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

535 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

536 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

537 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

543 
Elf32_W‹d
 
	mp_ty≥
;

544 
Elf32_Off
 
	mp_off£t
;

545 
Elf32_Addr
 
	mp_vaddr
;

546 
Elf32_Addr
 
	mp_∑ddr
;

547 
Elf32_W‹d
 
	mp_fûesz
;

548 
Elf32_W‹d
 
	mp_memsz
;

549 
Elf32_W‹d
 
	mp_Êags
;

550 
Elf32_W‹d
 
	mp_Æign
;

551 } 
	tElf32_Phdr
;

555 
Elf64_W‹d
 
	mp_ty≥
;

556 
Elf64_W‹d
 
	mp_Êags
;

557 
Elf64_Off
 
	mp_off£t
;

558 
Elf64_Addr
 
	mp_vaddr
;

559 
Elf64_Addr
 
	mp_∑ddr
;

560 
Elf64_Xw‹d
 
	mp_fûesz
;

561 
Elf64_Xw‹d
 
	mp_memsz
;

562 
Elf64_Xw‹d
 
	mp_Æign
;

563 } 
	tElf64_Phdr
;

569 
	#PN_XNUM
 0xffff

	)

573 
	#PT_NULL
 0

	)

574 
	#PT_LOAD
 1

	)

575 
	#PT_DYNAMIC
 2

	)

576 
	#PT_INTERP
 3

	)

577 
	#PT_NOTE
 4

	)

578 
	#PT_SHLIB
 5

	)

579 
	#PT_PHDR
 6

	)

580 
	#PT_TLS
 7

	)

581 
	#PT_NUM
 8

	)

582 
	#PT_LOOS
 0x60000000

	)

583 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

584 
	#PT_GNU_STACK
 0x6474e551

	)

585 
	#PT_GNU_RELRO
 0x6474e552

	)

586 
	#PT_LOSUNW
 0x6fffffÁ

	)

587 
	#PT_SUNWBSS
 0x6fffffÁ

	)

588 
	#PT_SUNWSTACK
 0x6ffffffb

	)

589 
	#PT_HISUNW
 0x6fffffff

	)

590 
	#PT_HIOS
 0x6ffffff‡

	)

591 
	#PT_LOPROC
 0x70000000

	)

592 
	#PT_HIPROC
 0x7ffffff‡

	)

596 
	#PF_X
 (1 << 0Ë

	)

597 
	#PF_W
 (1 << 1Ë

	)

598 
	#PF_R
 (1 << 2Ë

	)

599 
	#PF_MASKOS
 0x0ff00000

	)

600 
	#PF_MASKPROC
 0xf0000000

	)

604 
	#NT_PRSTATUS
 1

	)

605 
	#NT_FPREGSET
 2

	)

606 
	#NT_PRPSINFO
 3

	)

607 
	#NT_PRXREG
 4

	)

608 
	#NT_TASKSTRUCT
 4

	)

609 
	#NT_PLATFORM
 5

	)

610 
	#NT_AUXV
 6

	)

611 
	#NT_GWINDOWS
 7

	)

612 
	#NT_ASRS
 8

	)

613 
	#NT_PSTATUS
 10

	)

614 
	#NT_PSINFO
 13

	)

615 
	#NT_PRCRED
 14

	)

616 
	#NT_UTSNAME
 15

	)

617 
	#NT_LWPSTATUS
 16

	)

618 
	#NT_LWPSINFO
 17

	)

619 
	#NT_PRFPXREG
 20

	)

620 
	#NT_SIGINFO
 0x53494749

	)

622 
	#NT_FILE
 0x46494c45

	)

624 
	#NT_PRXFPREG
 0x46e62b7‡

	)

625 
	#NT_PPC_VMX
 0x100

	)

626 
	#NT_PPC_SPE
 0x101

	)

627 
	#NT_PPC_VSX
 0x102

	)

628 
	#NT_386_TLS
 0x200

	)

629 
	#NT_386_IOPERM
 0x201

	)

630 
	#NT_X86_XSTATE
 0x202

	)

631 
	#NT_S390_HIGH_GPRS
 0x300

	)

632 
	#NT_S390_TIMER
 0x301

	)

633 
	#NT_S390_TODCMP
 0x302

	)

634 
	#NT_S390_TODPREG
 0x303

	)

635 
	#NT_S390_CTRS
 0x304

	)

636 
	#NT_S390_PREFIX
 0x305

	)

637 
	#NT_S390_LAST_BREAK
 0x306

	)

638 
	#NT_S390_SYSTEM_CALL
 0x307

	)

639 
	#NT_S390_TDB
 0x308

	)

640 
	#NT_ARM_VFP
 0x400

	)

641 
	#NT_ARM_TLS
 0x401

	)

642 
	#NT_ARM_HW_BREAK
 0x402

	)

643 
	#NT_ARM_HW_WATCH
 0x403

	)

647 
	#NT_VERSION
 1

	)

654 
Elf32_Sw‹d
 
	md_èg
;

657 
Elf32_W‹d
 
	md_vÆ
;

658 
Elf32_Addr
 
	md_±r
;

659 } 
	md_un
;

660 } 
	tElf32_Dyn
;

664 
Elf64_Sxw‹d
 
	md_èg
;

667 
Elf64_Xw‹d
 
	md_vÆ
;

668 
Elf64_Addr
 
	md_±r
;

669 } 
	md_un
;

670 } 
	tElf64_Dyn
;

674 
	#DT_NULL
 0

	)

675 
	#DT_NEEDED
 1

	)

676 
	#DT_PLTRELSZ
 2

	)

677 
	#DT_PLTGOT
 3

	)

678 
	#DT_HASH
 4

	)

679 
	#DT_STRTAB
 5

	)

680 
	#DT_SYMTAB
 6

	)

681 
	#DT_RELA
 7

	)

682 
	#DT_RELASZ
 8

	)

683 
	#DT_RELAENT
 9

	)

684 
	#DT_STRSZ
 10

	)

685 
	#DT_SYMENT
 11

	)

686 
	#DT_INIT
 12

	)

687 
	#DT_FINI
 13

	)

688 
	#DT_SONAME
 14

	)

689 
	#DT_RPATH
 15

	)

690 
	#DT_SYMBOLIC
 16

	)

691 
	#DT_REL
 17

	)

692 
	#DT_RELSZ
 18

	)

693 
	#DT_RELENT
 19

	)

694 
	#DT_PLTREL
 20

	)

695 
	#DT_DEBUG
 21

	)

696 
	#DT_TEXTREL
 22

	)

697 
	#DT_JMPREL
 23

	)

698 
	#DT_BIND_NOW
 24

	)

699 
	#DT_INIT_ARRAY
 25

	)

700 
	#DT_FINI_ARRAY
 26

	)

701 
	#DT_INIT_ARRAYSZ
 27

	)

702 
	#DT_FINI_ARRAYSZ
 28

	)

703 
	#DT_RUNPATH
 29

	)

704 
	#DT_FLAGS
 30

	)

705 
	#DT_ENCODING
 32

	)

706 
	#DT_PREINIT_ARRAY
 32

	)

707 
	#DT_PREINIT_ARRAYSZ
 33

	)

708 
	#DT_NUM
 34

	)

709 
	#DT_LOOS
 0x6000000d

	)

710 
	#DT_HIOS
 0x6ffff000

	)

711 
	#DT_LOPROC
 0x70000000

	)

712 
	#DT_HIPROC
 0x7ffffff‡

	)

713 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

718 
	#DT_VALRNGLO
 0x6ffffd00

	)

719 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

720 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

721 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

722 
	#DT_CHECKSUM
 0x6ffffdf8

	)

723 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

724 
	#DT_MOVEENT
 0x6ffffdÁ

	)

725 
	#DT_MOVESZ
 0x6ffffdfb

	)

726 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

727 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

729 
	#DT_SYMINSZ
 0x6ffffd„

	)

730 
	#DT_SYMINENT
 0x6ffffdf‡

	)

731 
	#DT_VALRNGHI
 0x6ffffdff

	)

732 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

733 
	#DT_VALNUM
 12

	)

740 
	#DT_ADDRRNGLO
 0x6fff„00

	)

741 
	#DT_GNU_HASH
 0x6fff„f5

	)

742 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

743 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

744 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

745 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

746 
	#DT_CONFIG
 0x6fff„Á

	)

747 
	#DT_DEPAUDIT
 0x6fff„fb

	)

748 
	#DT_AUDIT
 0x6fff„f¯

	)

749 
	#DT_PLTPAD
 0x6fff„fd

	)

750 
	#DT_MOVETAB
 0x6fff„„

	)

751 
	#DT_SYMINFO
 0x6fff„f‡

	)

752 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

753 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

754 
	#DT_ADDRNUM
 11

	)

758 
	#DT_VERSYM
 0x6ffffff0

	)

760 
	#DT_RELACOUNT
 0x6ffffff9

	)

761 
	#DT_RELCOUNT
 0x6fffffÁ

	)

764 
	#DT_FLAGS_1
 0x6ffffffb

	)

765 
	#DT_VERDEF
 0x6ffffff¯

	)

767 
	#DT_VERDEFNUM
 0x6ffffffd

	)

768 
	#DT_VERNEED
 0x6fffff„

	)

770 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

771 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

772 
	#DT_VERSIONTAGNUM
 16

	)

776 
	#DT_AUXILIARY
 0x7ffffffd

	)

777 
	#DT_FILTER
 0x7ffffff‡

	)

778 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

779 
	#DT_EXTRANUM
 3

	)

782 
	#DF_ORIGIN
 0x00000001

	)

783 
	#DF_SYMBOLIC
 0x00000002

	)

784 
	#DF_TEXTREL
 0x00000004

	)

785 
	#DF_BIND_NOW
 0x00000008

	)

786 
	#DF_STATIC_TLS
 0x00000010

	)

790 
	#DF_1_NOW
 0x00000001

	)

791 
	#DF_1_GLOBAL
 0x00000002

	)

792 
	#DF_1_GROUP
 0x00000004

	)

793 
	#DF_1_NODELETE
 0x00000008

	)

794 
	#DF_1_LOADFLTR
 0x00000010

	)

795 
	#DF_1_INITFIRST
 0x00000020

	)

796 
	#DF_1_NOOPEN
 0x00000040

	)

797 
	#DF_1_ORIGIN
 0x00000080

	)

798 
	#DF_1_DIRECT
 0x00000100

	)

799 
	#DF_1_TRANS
 0x00000200

	)

800 
	#DF_1_INTERPOSE
 0x00000400

	)

801 
	#DF_1_NODEFLIB
 0x00000800

	)

802 
	#DF_1_NODUMP
 0x00001000

	)

803 
	#DF_1_CONFALT
 0x00002000

	)

804 
	#DF_1_ENDFILTEE
 0x00004000

	)

805 
	#DF_1_DISPRELDNE
 0x00008000

	)

806 
	#DF_1_DISPRELPND
 0x00010000

	)

807 
	#DF_1_NODIRECT
 0x00020000

	)

808 
	#DF_1_IGNMULDEF
 0x00040000

	)

809 
	#DF_1_NOKSYMS
 0x00080000

	)

810 
	#DF_1_NOHDR
 0x00100000

	)

811 
	#DF_1_EDITED
 0x00200000

	)

812 
	#DF_1_NORELOC
 0x00400000

	)

813 
	#DF_1_SYMINTPOSE
 0x00800000

	)

814 
	#DF_1_GLOBAUDIT
 0x01000000

	)

815 
	#DF_1_SINGLETON
 0x02000000

	)

818 
	#DTF_1_PARINIT
 0x00000001

	)

819 
	#DTF_1_CONFEXP
 0x00000002

	)

822 
	#DF_P1_LAZYLOAD
 0x00000001

	)

823 
	#DF_P1_GROUPPERM
 0x00000002

	)

830 
Elf32_HÆf
 
	mvd_vîsi⁄
;

831 
Elf32_HÆf
 
	mvd_Êags
;

832 
Elf32_HÆf
 
	mvd_ndx
;

833 
Elf32_HÆf
 
	mvd_˙t
;

834 
Elf32_W‹d
 
	mvd_hash
;

835 
Elf32_W‹d
 
	mvd_aux
;

836 
Elf32_W‹d
 
	mvd_√xt
;

838 } 
	tElf32_Vîdef
;

842 
Elf64_HÆf
 
	mvd_vîsi⁄
;

843 
Elf64_HÆf
 
	mvd_Êags
;

844 
Elf64_HÆf
 
	mvd_ndx
;

845 
Elf64_HÆf
 
	mvd_˙t
;

846 
Elf64_W‹d
 
	mvd_hash
;

847 
Elf64_W‹d
 
	mvd_aux
;

848 
Elf64_W‹d
 
	mvd_√xt
;

850 } 
	tElf64_Vîdef
;

854 
	#VER_DEF_NONE
 0

	)

855 
	#VER_DEF_CURRENT
 1

	)

856 
	#VER_DEF_NUM
 2

	)

859 
	#VER_FLG_BASE
 0x1

	)

860 
	#VER_FLG_WEAK
 0x2

	)

863 
	#VER_NDX_LOCAL
 0

	)

864 
	#VER_NDX_GLOBAL
 1

	)

865 
	#VER_NDX_LORESERVE
 0xff00

	)

866 
	#VER_NDX_ELIMINATE
 0xff01

	)

872 
Elf32_W‹d
 
	mvda_«me
;

873 
Elf32_W‹d
 
	mvda_√xt
;

875 } 
	tElf32_Vîdaux
;

879 
Elf64_W‹d
 
	mvda_«me
;

880 
Elf64_W‹d
 
	mvda_√xt
;

882 } 
	tElf64_Vîdaux
;

889 
Elf32_HÆf
 
	mvn_vîsi⁄
;

890 
Elf32_HÆf
 
	mvn_˙t
;

891 
Elf32_W‹d
 
	mvn_fûe
;

893 
Elf32_W‹d
 
	mvn_aux
;

894 
Elf32_W‹d
 
	mvn_√xt
;

896 } 
	tElf32_Vî√ed
;

900 
Elf64_HÆf
 
	mvn_vîsi⁄
;

901 
Elf64_HÆf
 
	mvn_˙t
;

902 
Elf64_W‹d
 
	mvn_fûe
;

904 
Elf64_W‹d
 
	mvn_aux
;

905 
Elf64_W‹d
 
	mvn_√xt
;

907 } 
	tElf64_Vî√ed
;

911 
	#VER_NEED_NONE
 0

	)

912 
	#VER_NEED_CURRENT
 1

	)

913 
	#VER_NEED_NUM
 2

	)

919 
Elf32_W‹d
 
	mv«_hash
;

920 
Elf32_HÆf
 
	mv«_Êags
;

921 
Elf32_HÆf
 
	mv«_Ÿhî
;

922 
Elf32_W‹d
 
	mv«_«me
;

923 
Elf32_W‹d
 
	mv«_√xt
;

925 } 
	tElf32_Vî«ux
;

929 
Elf64_W‹d
 
	mv«_hash
;

930 
Elf64_HÆf
 
	mv«_Êags
;

931 
Elf64_HÆf
 
	mv«_Ÿhî
;

932 
Elf64_W‹d
 
	mv«_«me
;

933 
Elf64_W‹d
 
	mv«_√xt
;

935 } 
	tElf64_Vî«ux
;

939 
	#VER_FLG_WEAK
 0x2

	)

953 
uöt32_t
 
	ma_ty≥
;

956 
uöt32_t
 
	ma_vÆ
;

960 } 
	ma_un
;

961 } 
	tElf32_auxv_t
;

965 
uöt64_t
 
	ma_ty≥
;

968 
uöt64_t
 
	ma_vÆ
;

972 } 
	ma_un
;

973 } 
	tElf64_auxv_t
;

975 
	~<bôs/auxv.h
>

981 
Elf32_W‹d
 
	mn_«mesz
;

982 
Elf32_W‹d
 
	mn_descsz
;

983 
Elf32_W‹d
 
	mn_ty≥
;

984 } 
	tElf32_Nhdr
;

988 
Elf64_W‹d
 
	mn_«mesz
;

989 
Elf64_W‹d
 
	mn_descsz
;

990 
Elf64_W‹d
 
	mn_ty≥
;

991 } 
	tElf64_Nhdr
;

996 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

999 
	#ELF_NOTE_GNU
 "GNU"

	)

1005 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1016 
	#NT_GNU_ABI_TAG
 1

	)

1017 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1021 
	#ELF_NOTE_OS_LINUX
 0

	)

1022 
	#ELF_NOTE_OS_GNU
 1

	)

1023 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1024 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1032 
	#NT_GNU_HWCAP
 2

	)

1036 
	#NT_GNU_BUILD_ID
 3

	)

1039 
	#NT_GNU_GOLD_VERSION
 4

	)

1045 
Elf32_Xw‹d
 
	mm_vÆue
;

1046 
Elf32_W‹d
 
	mm_öfo
;

1047 
Elf32_W‹d
 
	mm_poff£t
;

1048 
Elf32_HÆf
 
	mm_ª≥©
;

1049 
Elf32_HÆf
 
	mm_°ride
;

1050 } 
	tElf32_Move
;

1054 
Elf64_Xw‹d
 
	mm_vÆue
;

1055 
Elf64_Xw‹d
 
	mm_öfo
;

1056 
Elf64_Xw‹d
 
	mm_poff£t
;

1057 
Elf64_HÆf
 
	mm_ª≥©
;

1058 
Elf64_HÆf
 
	mm_°ride
;

1059 } 
	tElf64_Move
;

1062 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1063 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1064 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1066 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1067 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1068 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1074 
	#EF_CPU32
 0x00810000

	)

1078 
	#R_68K_NONE
 0

	)

1079 
	#R_68K_32
 1

	)

1080 
	#R_68K_16
 2

	)

1081 
	#R_68K_8
 3

	)

1082 
	#R_68K_PC32
 4

	)

1083 
	#R_68K_PC16
 5

	)

1084 
	#R_68K_PC8
 6

	)

1085 
	#R_68K_GOT32
 7

	)

1086 
	#R_68K_GOT16
 8

	)

1087 
	#R_68K_GOT8
 9

	)

1088 
	#R_68K_GOT32O
 10

	)

1089 
	#R_68K_GOT16O
 11

	)

1090 
	#R_68K_GOT8O
 12

	)

1091 
	#R_68K_PLT32
 13

	)

1092 
	#R_68K_PLT16
 14

	)

1093 
	#R_68K_PLT8
 15

	)

1094 
	#R_68K_PLT32O
 16

	)

1095 
	#R_68K_PLT16O
 17

	)

1096 
	#R_68K_PLT8O
 18

	)

1097 
	#R_68K_COPY
 19

	)

1098 
	#R_68K_GLOB_DAT
 20

	)

1099 
	#R_68K_JMP_SLOT
 21

	)

1100 
	#R_68K_RELATIVE
 22

	)

1101 
	#R_68K_TLS_GD32
 25

	)

1102 
	#R_68K_TLS_GD16
 26

	)

1103 
	#R_68K_TLS_GD8
 27

	)

1104 
	#R_68K_TLS_LDM32
 28

	)

1105 
	#R_68K_TLS_LDM16
 29

	)

1106 
	#R_68K_TLS_LDM8
 30

	)

1107 
	#R_68K_TLS_LDO32
 31

	)

1108 
	#R_68K_TLS_LDO16
 32

	)

1109 
	#R_68K_TLS_LDO8
 33

	)

1110 
	#R_68K_TLS_IE32
 34

	)

1111 
	#R_68K_TLS_IE16
 35

	)

1112 
	#R_68K_TLS_IE8
 36

	)

1113 
	#R_68K_TLS_LE32
 37

	)

1115 
	#R_68K_TLS_LE16
 38

	)

1117 
	#R_68K_TLS_LE8
 39

	)

1119 
	#R_68K_TLS_DTPMOD32
 40

	)

1120 
	#R_68K_TLS_DTPREL32
 41

	)

1121 
	#R_68K_TLS_TPREL32
 42

	)

1123 
	#R_68K_NUM
 43

	)

1129 
	#R_386_NONE
 0

	)

1130 
	#R_386_32
 1

	)

1131 
	#R_386_PC32
 2

	)

1132 
	#R_386_GOT32
 3

	)

1133 
	#R_386_PLT32
 4

	)

1134 
	#R_386_COPY
 5

	)

1135 
	#R_386_GLOB_DAT
 6

	)

1136 
	#R_386_JMP_SLOT
 7

	)

1137 
	#R_386_RELATIVE
 8

	)

1138 
	#R_386_GOTOFF
 9

	)

1139 
	#R_386_GOTPC
 10

	)

1140 
	#R_386_32PLT
 11

	)

1141 
	#R_386_TLS_TPOFF
 14

	)

1142 
	#R_386_TLS_IE
 15

	)

1144 
	#R_386_TLS_GOTIE
 16

	)

1146 
	#R_386_TLS_LE
 17

	)

1148 
	#R_386_TLS_GD
 18

	)

1150 
	#R_386_TLS_LDM
 19

	)

1153 
	#R_386_16
 20

	)

1154 
	#R_386_PC16
 21

	)

1155 
	#R_386_8
 22

	)

1156 
	#R_386_PC8
 23

	)

1157 
	#R_386_TLS_GD_32
 24

	)

1159 
	#R_386_TLS_GD_PUSH
 25

	)

1160 
	#R_386_TLS_GD_CALL
 26

	)

1162 
	#R_386_TLS_GD_POP
 27

	)

1163 
	#R_386_TLS_LDM_32
 28

	)

1165 
	#R_386_TLS_LDM_PUSH
 29

	)

1166 
	#R_386_TLS_LDM_CALL
 30

	)

1168 
	#R_386_TLS_LDM_POP
 31

	)

1169 
	#R_386_TLS_LDO_32
 32

	)

1170 
	#R_386_TLS_IE_32
 33

	)

1172 
	#R_386_TLS_LE_32
 34

	)

1174 
	#R_386_TLS_DTPMOD32
 35

	)

1175 
	#R_386_TLS_DTPOFF32
 36

	)

1176 
	#R_386_TLS_TPOFF32
 37

	)

1177 
	#R_386_SIZE32
 38

	)

1178 
	#R_386_TLS_GOTDESC
 39

	)

1179 
	#R_386_TLS_DESC_CALL
 40

	)

1182 
	#R_386_TLS_DESC
 41

	)

1186 
	#R_386_IRELATIVE
 42

	)

1188 
	#R_386_NUM
 43

	)

1194 
	#STT_SPARC_REGISTER
 13

	)

1198 
	#EF_SPARCV9_MM
 3

	)

1199 
	#EF_SPARCV9_TSO
 0

	)

1200 
	#EF_SPARCV9_PSO
 1

	)

1201 
	#EF_SPARCV9_RMO
 2

	)

1202 
	#EF_SPARC_LEDATA
 0x800000

	)

1203 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1204 
	#EF_SPARC_32PLUS
 0x000100

	)

1205 
	#EF_SPARC_SUN_US1
 0x000200

	)

1206 
	#EF_SPARC_HAL_R1
 0x000400

	)

1207 
	#EF_SPARC_SUN_US3
 0x000800

	)

1211 
	#R_SPARC_NONE
 0

	)

1212 
	#R_SPARC_8
 1

	)

1213 
	#R_SPARC_16
 2

	)

1214 
	#R_SPARC_32
 3

	)

1215 
	#R_SPARC_DISP8
 4

	)

1216 
	#R_SPARC_DISP16
 5

	)

1217 
	#R_SPARC_DISP32
 6

	)

1218 
	#R_SPARC_WDISP30
 7

	)

1219 
	#R_SPARC_WDISP22
 8

	)

1220 
	#R_SPARC_HI22
 9

	)

1221 
	#R_SPARC_22
 10

	)

1222 
	#R_SPARC_13
 11

	)

1223 
	#R_SPARC_LO10
 12

	)

1224 
	#R_SPARC_GOT10
 13

	)

1225 
	#R_SPARC_GOT13
 14

	)

1226 
	#R_SPARC_GOT22
 15

	)

1227 
	#R_SPARC_PC10
 16

	)

1228 
	#R_SPARC_PC22
 17

	)

1229 
	#R_SPARC_WPLT30
 18

	)

1230 
	#R_SPARC_COPY
 19

	)

1231 
	#R_SPARC_GLOB_DAT
 20

	)

1232 
	#R_SPARC_JMP_SLOT
 21

	)

1233 
	#R_SPARC_RELATIVE
 22

	)

1234 
	#R_SPARC_UA32
 23

	)

1238 
	#R_SPARC_PLT32
 24

	)

1239 
	#R_SPARC_HIPLT22
 25

	)

1240 
	#R_SPARC_LOPLT10
 26

	)

1241 
	#R_SPARC_PCPLT32
 27

	)

1242 
	#R_SPARC_PCPLT22
 28

	)

1243 
	#R_SPARC_PCPLT10
 29

	)

1244 
	#R_SPARC_10
 30

	)

1245 
	#R_SPARC_11
 31

	)

1246 
	#R_SPARC_64
 32

	)

1247 
	#R_SPARC_OLO10
 33

	)

1248 
	#R_SPARC_HH22
 34

	)

1249 
	#R_SPARC_HM10
 35

	)

1250 
	#R_SPARC_LM22
 36

	)

1251 
	#R_SPARC_PC_HH22
 37

	)

1252 
	#R_SPARC_PC_HM10
 38

	)

1253 
	#R_SPARC_PC_LM22
 39

	)

1254 
	#R_SPARC_WDISP16
 40

	)

1255 
	#R_SPARC_WDISP19
 41

	)

1256 
	#R_SPARC_GLOB_JMP
 42

	)

1257 
	#R_SPARC_7
 43

	)

1258 
	#R_SPARC_5
 44

	)

1259 
	#R_SPARC_6
 45

	)

1260 
	#R_SPARC_DISP64
 46

	)

1261 
	#R_SPARC_PLT64
 47

	)

1262 
	#R_SPARC_HIX22
 48

	)

1263 
	#R_SPARC_LOX10
 49

	)

1264 
	#R_SPARC_H44
 50

	)

1265 
	#R_SPARC_M44
 51

	)

1266 
	#R_SPARC_L44
 52

	)

1267 
	#R_SPARC_REGISTER
 53

	)

1268 
	#R_SPARC_UA64
 54

	)

1269 
	#R_SPARC_UA16
 55

	)

1270 
	#R_SPARC_TLS_GD_HI22
 56

	)

1271 
	#R_SPARC_TLS_GD_LO10
 57

	)

1272 
	#R_SPARC_TLS_GD_ADD
 58

	)

1273 
	#R_SPARC_TLS_GD_CALL
 59

	)

1274 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1275 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1276 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1277 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1278 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1279 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1280 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1281 
	#R_SPARC_TLS_IE_HI22
 67

	)

1282 
	#R_SPARC_TLS_IE_LO10
 68

	)

1283 
	#R_SPARC_TLS_IE_LD
 69

	)

1284 
	#R_SPARC_TLS_IE_LDX
 70

	)

1285 
	#R_SPARC_TLS_IE_ADD
 71

	)

1286 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1287 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1288 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1289 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1290 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1291 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1292 
	#R_SPARC_TLS_TPOFF32
 78

	)

1293 
	#R_SPARC_TLS_TPOFF64
 79

	)

1294 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1295 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1296 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1297 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1298 
	#R_SPARC_GOTDATA_OP
 84

	)

1299 
	#R_SPARC_H34
 85

	)

1300 
	#R_SPARC_SIZE32
 86

	)

1301 
	#R_SPARC_SIZE64
 87

	)

1302 
	#R_SPARC_WDISP10
 88

	)

1303 
	#R_SPARC_JMP_IREL
 248

	)

1304 
	#R_SPARC_IRELATIVE
 249

	)

1305 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1306 
	#R_SPARC_GNU_VTENTRY
 251

	)

1307 
	#R_SPARC_REV32
 252

	)

1309 
	#R_SPARC_NUM
 253

	)

1313 
	#DT_SPARC_REGISTER
 0x70000001

	)

1314 
	#DT_SPARC_NUM
 2

	)

1320 
	#EF_MIPS_NOREORDER
 1

	)

1321 
	#EF_MIPS_PIC
 2

	)

1322 
	#EF_MIPS_CPIC
 4

	)

1323 
	#EF_MIPS_XGOT
 8

	)

1324 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1325 
	#EF_MIPS_ABI2
 32

	)

1326 
	#EF_MIPS_ABI_ON32
 64

	)

1327 
	#EF_MIPS_NAN2008
 1024

	)

1328 
	#EF_MIPS_ARCH
 0xf0000000

	)

1332 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1333 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1334 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1335 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1336 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1337 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1338 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1339 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1340 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1344 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1345 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1346 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1347 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1348 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1349 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1350 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1354 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1355 
	#SHN_MIPS_TEXT
 0xff01

	)

1356 
	#SHN_MIPS_DATA
 0xff02

	)

1357 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1358 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1362 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1363 
	#SHT_MIPS_MSYM
 0x70000001

	)

1364 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1365 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1366 
	#SHT_MIPS_UCODE
 0x70000004

	)

1367 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1368 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1369 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1370 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1371 
	#SHT_MIPS_RELD
 0x70000009

	)

1372 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1373 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1374 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1375 
	#SHT_MIPS_SHDR
 0x70000010

	)

1376 
	#SHT_MIPS_FDESC
 0x70000011

	)

1377 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1378 
	#SHT_MIPS_DENSE
 0x70000013

	)

1379 
	#SHT_MIPS_PDESC
 0x70000014

	)

1380 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1381 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1382 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1383 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1384 
	#SHT_MIPS_LINE
 0x70000019

	)

1385 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1386 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1387 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1388 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1389 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1390 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1391 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1392 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1393 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1394 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1395 
	#SHT_MIPS_XLATE
 0x70000024

	)

1396 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1397 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1398 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1399 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1400 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1404 
	#SHF_MIPS_GPREL
 0x10000000

	)

1405 
	#SHF_MIPS_MERGE
 0x20000000

	)

1406 
	#SHF_MIPS_ADDR
 0x40000000

	)

1407 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1408 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1409 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1410 
	#SHF_MIPS_NAMES
 0x02000000

	)

1411 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1417 
	#STO_MIPS_DEFAULT
 0x0

	)

1418 
	#STO_MIPS_INTERNAL
 0x1

	)

1419 
	#STO_MIPS_HIDDEN
 0x2

	)

1420 
	#STO_MIPS_PROTECTED
 0x3

	)

1421 
	#STO_MIPS_PLT
 0x8

	)

1422 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1425 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1433 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1434 
Elf32_W‹d
 
	mgt_unu£d
;

1435 } 
	mgt_hódî
;

1438 
Elf32_W‹d
 
	mgt_g_vÆue
;

1439 
Elf32_W‹d
 
	mgt_byãs
;

1440 } 
	mgt_íåy
;

1441 } 
	tElf32_g±ab
;

1447 
Elf32_W‹d
 
	mri_g¥mask
;

1448 
Elf32_W‹d
 
	mri_˝rmask
[4];

1449 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1450 } 
	tElf32_RegInfo
;

1456 
	mköd
;

1458 
	msize
;

1459 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1461 
Elf32_W‹d
 
	möfo
;

1462 } 
	tElf_O±i⁄s
;

1466 
	#ODK_NULL
 0

	)

1467 
	#ODK_REGINFO
 1

	)

1468 
	#ODK_EXCEPTIONS
 2

	)

1469 
	#ODK_PAD
 3

	)

1470 
	#ODK_HWPATCH
 4

	)

1471 
	#ODK_FILL
 5

	)

1472 
	#ODK_TAGS
 6

	)

1473 
	#ODK_HWAND
 7

	)

1474 
	#ODK_HWOR
 8

	)

1478 
	#OEX_FPU_MIN
 0x1‡

	)

1479 
	#OEX_FPU_MAX
 0x1f00

	)

1480 
	#OEX_PAGE0
 0x10000

	)

1481 
	#OEX_SMM
 0x20000

	)

1482 
	#OEX_FPDBUG
 0x40000

	)

1483 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1484 
	#OEX_DISMISS
 0x80000

	)

1486 
	#OEX_FPU_INVAL
 0x10

	)

1487 
	#OEX_FPU_DIV0
 0x08

	)

1488 
	#OEX_FPU_OFLO
 0x04

	)

1489 
	#OEX_FPU_UFLO
 0x02

	)

1490 
	#OEX_FPU_INEX
 0x01

	)

1494 
	#OHW_R4KEOP
 0x1

	)

1495 
	#OHW_R8KPFETCH
 0x2

	)

1496 
	#OHW_R5KEOP
 0x4

	)

1497 
	#OHW_R5KCVTL
 0x8

	)

1499 
	#OPAD_PREFIX
 0x1

	)

1500 
	#OPAD_POSTFIX
 0x2

	)

1501 
	#OPAD_SYMBOL
 0x4

	)

1507 
Elf32_W‹d
 
	mhwp_Êags1
;

1508 
Elf32_W‹d
 
	mhwp_Êags2
;

1509 } 
	tElf_O±i⁄s_Hw
;

1513 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1514 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1518 
	#R_MIPS_NONE
 0

	)

1519 
	#R_MIPS_16
 1

	)

1520 
	#R_MIPS_32
 2

	)

1521 
	#R_MIPS_REL32
 3

	)

1522 
	#R_MIPS_26
 4

	)

1523 
	#R_MIPS_HI16
 5

	)

1524 
	#R_MIPS_LO16
 6

	)

1525 
	#R_MIPS_GPREL16
 7

	)

1526 
	#R_MIPS_LITERAL
 8

	)

1527 
	#R_MIPS_GOT16
 9

	)

1528 
	#R_MIPS_PC16
 10

	)

1529 
	#R_MIPS_CALL16
 11

	)

1530 
	#R_MIPS_GPREL32
 12

	)

1532 
	#R_MIPS_SHIFT5
 16

	)

1533 
	#R_MIPS_SHIFT6
 17

	)

1534 
	#R_MIPS_64
 18

	)

1535 
	#R_MIPS_GOT_DISP
 19

	)

1536 
	#R_MIPS_GOT_PAGE
 20

	)

1537 
	#R_MIPS_GOT_OFST
 21

	)

1538 
	#R_MIPS_GOT_HI16
 22

	)

1539 
	#R_MIPS_GOT_LO16
 23

	)

1540 
	#R_MIPS_SUB
 24

	)

1541 
	#R_MIPS_INSERT_A
 25

	)

1542 
	#R_MIPS_INSERT_B
 26

	)

1543 
	#R_MIPS_DELETE
 27

	)

1544 
	#R_MIPS_HIGHER
 28

	)

1545 
	#R_MIPS_HIGHEST
 29

	)

1546 
	#R_MIPS_CALL_HI16
 30

	)

1547 
	#R_MIPS_CALL_LO16
 31

	)

1548 
	#R_MIPS_SCN_DISP
 32

	)

1549 
	#R_MIPS_REL16
 33

	)

1550 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1551 
	#R_MIPS_PJUMP
 35

	)

1552 
	#R_MIPS_RELGOT
 36

	)

1553 
	#R_MIPS_JALR
 37

	)

1554 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1555 
	#R_MIPS_TLS_DTPREL32
 39

	)

1556 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1557 
	#R_MIPS_TLS_DTPREL64
 41

	)

1558 
	#R_MIPS_TLS_GD
 42

	)

1559 
	#R_MIPS_TLS_LDM
 43

	)

1560 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1561 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1562 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1563 
	#R_MIPS_TLS_TPREL32
 47

	)

1564 
	#R_MIPS_TLS_TPREL64
 48

	)

1565 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1566 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1567 
	#R_MIPS_GLOB_DAT
 51

	)

1568 
	#R_MIPS_COPY
 126

	)

1569 
	#R_MIPS_JUMP_SLOT
 127

	)

1571 
	#R_MIPS_NUM
 128

	)

1575 
	#PT_MIPS_REGINFO
 0x70000000

	)

1576 
	#PT_MIPS_RTPROC
 0x70000001

	)

1577 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1581 
	#PF_MIPS_LOCAL
 0x10000000

	)

1585 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1586 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1587 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1588 
	#DT_MIPS_IVERSION
 0x70000004

	)

1589 
	#DT_MIPS_FLAGS
 0x70000005

	)

1590 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1591 
	#DT_MIPS_MSYM
 0x70000007

	)

1592 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1593 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1594 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1595 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1596 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1597 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1598 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1599 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1600 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1601 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1602 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1603 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1605 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1606 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1608 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1609 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1611 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1613 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1615 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1617 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1619 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1620 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1621 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1622 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1623 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1624 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1625 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1626 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1627 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1628 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1629 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1630 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1632 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1634 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1635 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1636 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1638 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1642 
	#DT_MIPS_RWPLT
 0x70000034

	)

1643 
	#DT_MIPS_NUM
 0x35

	)

1647 
	#RHF_NONE
 0

	)

1648 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1649 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1650 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1651 
	#RHF_NO_MOVE
 (1 << 3)

	)

1652 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1653 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1654 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1655 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1656 
	#RHF_PIXIE
 (1 << 8)

	)

1657 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1658 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1659 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1660 
	#RHF_CORD
 (1 << 12)

	)

1661 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1662 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1668 
Elf32_W‹d
 
	ml_«me
;

1669 
Elf32_W‹d
 
	ml_time_°amp
;

1670 
Elf32_W‹d
 
	ml_checksum
;

1671 
Elf32_W‹d
 
	ml_vîsi⁄
;

1672 
Elf32_W‹d
 
	ml_Êags
;

1673 } 
	tElf32_Lib
;

1677 
Elf64_W‹d
 
	ml_«me
;

1678 
Elf64_W‹d
 
	ml_time_°amp
;

1679 
Elf64_W‹d
 
	ml_checksum
;

1680 
Elf64_W‹d
 
	ml_vîsi⁄
;

1681 
Elf64_W‹d
 
	ml_Êags
;

1682 } 
	tElf64_Lib
;

1687 
	#LL_NONE
 0

	)

1688 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1689 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1690 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1691 
	#LL_EXPORTS
 (1 << 3)

	)

1692 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1693 
	#LL_DELTA
 (1 << 5)

	)

1697 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1704 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1705 
	#EF_PARISC_EXT
 0x00020000

	)

1706 
	#EF_PARISC_LSB
 0x00040000

	)

1707 
	#EF_PARISC_WIDE
 0x00080000

	)

1708 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1710 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1711 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1715 
	#EFA_PARISC_1_0
 0x020b

	)

1716 
	#EFA_PARISC_1_1
 0x0210

	)

1717 
	#EFA_PARISC_2_0
 0x0214

	)

1721 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1723 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1727 
	#SHT_PARISC_EXT
 0x70000000

	)

1728 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1729 
	#SHT_PARISC_DOC
 0x70000002

	)

1733 
	#SHF_PARISC_SHORT
 0x20000000

	)

1734 
	#SHF_PARISC_HUGE
 0x40000000

	)

1735 
	#SHF_PARISC_SBP
 0x80000000

	)

1739 
	#STT_PARISC_MILLICODE
 13

	)

1741 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1742 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1746 
	#R_PARISC_NONE
 0

	)

1747 
	#R_PARISC_DIR32
 1

	)

1748 
	#R_PARISC_DIR21L
 2

	)

1749 
	#R_PARISC_DIR17R
 3

	)

1750 
	#R_PARISC_DIR17F
 4

	)

1751 
	#R_PARISC_DIR14R
 6

	)

1752 
	#R_PARISC_PCREL32
 9

	)

1753 
	#R_PARISC_PCREL21L
 10

	)

1754 
	#R_PARISC_PCREL17R
 11

	)

1755 
	#R_PARISC_PCREL17F
 12

	)

1756 
	#R_PARISC_PCREL14R
 14

	)

1757 
	#R_PARISC_DPREL21L
 18

	)

1758 
	#R_PARISC_DPREL14R
 22

	)

1759 
	#R_PARISC_GPREL21L
 26

	)

1760 
	#R_PARISC_GPREL14R
 30

	)

1761 
	#R_PARISC_LTOFF21L
 34

	)

1762 
	#R_PARISC_LTOFF14R
 38

	)

1763 
	#R_PARISC_SECREL32
 41

	)

1764 
	#R_PARISC_SEGBASE
 48

	)

1765 
	#R_PARISC_SEGREL32
 49

	)

1766 
	#R_PARISC_PLTOFF21L
 50

	)

1767 
	#R_PARISC_PLTOFF14R
 54

	)

1768 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1769 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1770 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1771 
	#R_PARISC_FPTR64
 64

	)

1772 
	#R_PARISC_PLABEL32
 65

	)

1773 
	#R_PARISC_PLABEL21L
 66

	)

1774 
	#R_PARISC_PLABEL14R
 70

	)

1775 
	#R_PARISC_PCREL64
 72

	)

1776 
	#R_PARISC_PCREL22F
 74

	)

1777 
	#R_PARISC_PCREL14WR
 75

	)

1778 
	#R_PARISC_PCREL14DR
 76

	)

1779 
	#R_PARISC_PCREL16F
 77

	)

1780 
	#R_PARISC_PCREL16WF
 78

	)

1781 
	#R_PARISC_PCREL16DF
 79

	)

1782 
	#R_PARISC_DIR64
 80

	)

1783 
	#R_PARISC_DIR14WR
 83

	)

1784 
	#R_PARISC_DIR14DR
 84

	)

1785 
	#R_PARISC_DIR16F
 85

	)

1786 
	#R_PARISC_DIR16WF
 86

	)

1787 
	#R_PARISC_DIR16DF
 87

	)

1788 
	#R_PARISC_GPREL64
 88

	)

1789 
	#R_PARISC_GPREL14WR
 91

	)

1790 
	#R_PARISC_GPREL14DR
 92

	)

1791 
	#R_PARISC_GPREL16F
 93

	)

1792 
	#R_PARISC_GPREL16WF
 94

	)

1793 
	#R_PARISC_GPREL16DF
 95

	)

1794 
	#R_PARISC_LTOFF64
 96

	)

1795 
	#R_PARISC_LTOFF14WR
 99

	)

1796 
	#R_PARISC_LTOFF14DR
 100

	)

1797 
	#R_PARISC_LTOFF16F
 101

	)

1798 
	#R_PARISC_LTOFF16WF
 102

	)

1799 
	#R_PARISC_LTOFF16DF
 103

	)

1800 
	#R_PARISC_SECREL64
 104

	)

1801 
	#R_PARISC_SEGREL64
 112

	)

1802 
	#R_PARISC_PLTOFF14WR
 115

	)

1803 
	#R_PARISC_PLTOFF14DR
 116

	)

1804 
	#R_PARISC_PLTOFF16F
 117

	)

1805 
	#R_PARISC_PLTOFF16WF
 118

	)

1806 
	#R_PARISC_PLTOFF16DF
 119

	)

1807 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1808 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1809 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1810 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1811 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1812 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1813 
	#R_PARISC_LORESERVE
 128

	)

1814 
	#R_PARISC_COPY
 128

	)

1815 
	#R_PARISC_IPLT
 129

	)

1816 
	#R_PARISC_EPLT
 130

	)

1817 
	#R_PARISC_TPREL32
 153

	)

1818 
	#R_PARISC_TPREL21L
 154

	)

1819 
	#R_PARISC_TPREL14R
 158

	)

1820 
	#R_PARISC_LTOFF_TP21L
 162

	)

1821 
	#R_PARISC_LTOFF_TP14R
 166

	)

1822 
	#R_PARISC_LTOFF_TP14F
 167

	)

1823 
	#R_PARISC_TPREL64
 216

	)

1824 
	#R_PARISC_TPREL14WR
 219

	)

1825 
	#R_PARISC_TPREL14DR
 220

	)

1826 
	#R_PARISC_TPREL16F
 221

	)

1827 
	#R_PARISC_TPREL16WF
 222

	)

1828 
	#R_PARISC_TPREL16DF
 223

	)

1829 
	#R_PARISC_LTOFF_TP64
 224

	)

1830 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1831 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1832 
	#R_PARISC_LTOFF_TP16F
 229

	)

1833 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1834 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1835 
	#R_PARISC_GNU_VTENTRY
 232

	)

1836 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1837 
	#R_PARISC_TLS_GD21L
 234

	)

1838 
	#R_PARISC_TLS_GD14R
 235

	)

1839 
	#R_PARISC_TLS_GDCALL
 236

	)

1840 
	#R_PARISC_TLS_LDM21L
 237

	)

1841 
	#R_PARISC_TLS_LDM14R
 238

	)

1842 
	#R_PARISC_TLS_LDMCALL
 239

	)

1843 
	#R_PARISC_TLS_LDO21L
 240

	)

1844 
	#R_PARISC_TLS_LDO14R
 241

	)

1845 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1846 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1847 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1848 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1849 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1850 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1851 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1852 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1853 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1854 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1855 
	#R_PARISC_HIRESERVE
 255

	)

1859 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1860 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1861 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1862 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1863 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1864 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1865 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1866 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1867 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1868 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1869 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1870 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1871 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1872 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1873 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1875 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1876 
	#PT_PARISC_UNWIND
 0x70000001

	)

1880 
	#PF_PARISC_SBP
 0x08000000

	)

1882 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1883 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1884 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1885 
	#PF_HP_CODE
 0x01000000

	)

1886 
	#PF_HP_MODIFY
 0x02000000

	)

1887 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1888 
	#PF_HP_SBP
 0x08000000

	)

1895 
	#EF_ALPHA_32BIT
 1

	)

1896 
	#EF_ALPHA_CANRELAX
 2

	)

1901 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1902 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1906 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1909 
	#STO_ALPHA_NOPV
 0x80

	)

1910 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1914 
	#R_ALPHA_NONE
 0

	)

1915 
	#R_ALPHA_REFLONG
 1

	)

1916 
	#R_ALPHA_REFQUAD
 2

	)

1917 
	#R_ALPHA_GPREL32
 3

	)

1918 
	#R_ALPHA_LITERAL
 4

	)

1919 
	#R_ALPHA_LITUSE
 5

	)

1920 
	#R_ALPHA_GPDISP
 6

	)

1921 
	#R_ALPHA_BRADDR
 7

	)

1922 
	#R_ALPHA_HINT
 8

	)

1923 
	#R_ALPHA_SREL16
 9

	)

1924 
	#R_ALPHA_SREL32
 10

	)

1925 
	#R_ALPHA_SREL64
 11

	)

1926 
	#R_ALPHA_GPRELHIGH
 17

	)

1927 
	#R_ALPHA_GPRELLOW
 18

	)

1928 
	#R_ALPHA_GPREL16
 19

	)

1929 
	#R_ALPHA_COPY
 24

	)

1930 
	#R_ALPHA_GLOB_DAT
 25

	)

1931 
	#R_ALPHA_JMP_SLOT
 26

	)

1932 
	#R_ALPHA_RELATIVE
 27

	)

1933 
	#R_ALPHA_TLS_GD_HI
 28

	)

1934 
	#R_ALPHA_TLSGD
 29

	)

1935 
	#R_ALPHA_TLS_LDM
 30

	)

1936 
	#R_ALPHA_DTPMOD64
 31

	)

1937 
	#R_ALPHA_GOTDTPREL
 32

	)

1938 
	#R_ALPHA_DTPREL64
 33

	)

1939 
	#R_ALPHA_DTPRELHI
 34

	)

1940 
	#R_ALPHA_DTPRELLO
 35

	)

1941 
	#R_ALPHA_DTPREL16
 36

	)

1942 
	#R_ALPHA_GOTTPREL
 37

	)

1943 
	#R_ALPHA_TPREL64
 38

	)

1944 
	#R_ALPHA_TPRELHI
 39

	)

1945 
	#R_ALPHA_TPRELLO
 40

	)

1946 
	#R_ALPHA_TPREL16
 41

	)

1948 
	#R_ALPHA_NUM
 46

	)

1951 
	#LITUSE_ALPHA_ADDR
 0

	)

1952 
	#LITUSE_ALPHA_BASE
 1

	)

1953 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1954 
	#LITUSE_ALPHA_JSR
 3

	)

1955 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1956 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1959 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1960 
	#DT_ALPHA_NUM
 1

	)

1965 
	#EF_PPC_EMB
 0x80000000

	)

1968 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1969 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1973 
	#R_PPC_NONE
 0

	)

1974 
	#R_PPC_ADDR32
 1

	)

1975 
	#R_PPC_ADDR24
 2

	)

1976 
	#R_PPC_ADDR16
 3

	)

1977 
	#R_PPC_ADDR16_LO
 4

	)

1978 
	#R_PPC_ADDR16_HI
 5

	)

1979 
	#R_PPC_ADDR16_HA
 6

	)

1980 
	#R_PPC_ADDR14
 7

	)

1981 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1982 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1983 
	#R_PPC_REL24
 10

	)

1984 
	#R_PPC_REL14
 11

	)

1985 
	#R_PPC_REL14_BRTAKEN
 12

	)

1986 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1987 
	#R_PPC_GOT16
 14

	)

1988 
	#R_PPC_GOT16_LO
 15

	)

1989 
	#R_PPC_GOT16_HI
 16

	)

1990 
	#R_PPC_GOT16_HA
 17

	)

1991 
	#R_PPC_PLTREL24
 18

	)

1992 
	#R_PPC_COPY
 19

	)

1993 
	#R_PPC_GLOB_DAT
 20

	)

1994 
	#R_PPC_JMP_SLOT
 21

	)

1995 
	#R_PPC_RELATIVE
 22

	)

1996 
	#R_PPC_LOCAL24PC
 23

	)

1997 
	#R_PPC_UADDR32
 24

	)

1998 
	#R_PPC_UADDR16
 25

	)

1999 
	#R_PPC_REL32
 26

	)

2000 
	#R_PPC_PLT32
 27

	)

2001 
	#R_PPC_PLTREL32
 28

	)

2002 
	#R_PPC_PLT16_LO
 29

	)

2003 
	#R_PPC_PLT16_HI
 30

	)

2004 
	#R_PPC_PLT16_HA
 31

	)

2005 
	#R_PPC_SDAREL16
 32

	)

2006 
	#R_PPC_SECTOFF
 33

	)

2007 
	#R_PPC_SECTOFF_LO
 34

	)

2008 
	#R_PPC_SECTOFF_HI
 35

	)

2009 
	#R_PPC_SECTOFF_HA
 36

	)

2012 
	#R_PPC_TLS
 67

	)

2013 
	#R_PPC_DTPMOD32
 68

	)

2014 
	#R_PPC_TPREL16
 69

	)

2015 
	#R_PPC_TPREL16_LO
 70

	)

2016 
	#R_PPC_TPREL16_HI
 71

	)

2017 
	#R_PPC_TPREL16_HA
 72

	)

2018 
	#R_PPC_TPREL32
 73

	)

2019 
	#R_PPC_DTPREL16
 74

	)

2020 
	#R_PPC_DTPREL16_LO
 75

	)

2021 
	#R_PPC_DTPREL16_HI
 76

	)

2022 
	#R_PPC_DTPREL16_HA
 77

	)

2023 
	#R_PPC_DTPREL32
 78

	)

2024 
	#R_PPC_GOT_TLSGD16
 79

	)

2025 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2026 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2027 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2028 
	#R_PPC_GOT_TLSLD16
 83

	)

2029 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2030 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2031 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2032 
	#R_PPC_GOT_TPREL16
 87

	)

2033 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2034 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2035 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2036 
	#R_PPC_GOT_DTPREL16
 91

	)

2037 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2038 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2039 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2043 
	#R_PPC_EMB_NADDR32
 101

	)

2044 
	#R_PPC_EMB_NADDR16
 102

	)

2045 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2046 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2047 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2048 
	#R_PPC_EMB_SDAI16
 106

	)

2049 
	#R_PPC_EMB_SDA2I16
 107

	)

2050 
	#R_PPC_EMB_SDA2REL
 108

	)

2051 
	#R_PPC_EMB_SDA21
 109

	)

2052 
	#R_PPC_EMB_MRKREF
 110

	)

2053 
	#R_PPC_EMB_RELSEC16
 111

	)

2054 
	#R_PPC_EMB_RELST_LO
 112

	)

2055 
	#R_PPC_EMB_RELST_HI
 113

	)

2056 
	#R_PPC_EMB_RELST_HA
 114

	)

2057 
	#R_PPC_EMB_BIT_FLD
 115

	)

2058 
	#R_PPC_EMB_RELSDA
 116

	)

2061 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2062 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2063 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2064 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2065 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2066 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2069 
	#R_PPC_IRELATIVE
 248

	)

2072 
	#R_PPC_REL16
 249

	)

2073 
	#R_PPC_REL16_LO
 250

	)

2074 
	#R_PPC_REL16_HI
 251

	)

2075 
	#R_PPC_REL16_HA
 252

	)

2079 
	#R_PPC_TOC16
 255

	)

2082 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2083 
	#DT_PPC_NUM
 1

	)

2086 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2087 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2088 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2089 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2090 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2091 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2092 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2093 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2094 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2095 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2096 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2097 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2098 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2099 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2100 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2101 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2102 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2103 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2105 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2106 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2107 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2108 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2110 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2111 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2112 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2113 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2114 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2115 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2116 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2117 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2119 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2120 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2121 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2122 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2123 
	#R_PPC64_ADDR30
 37

	)

2124 
	#R_PPC64_ADDR64
 38

	)

2125 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2126 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2127 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2128 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2129 
	#R_PPC64_UADDR64
 43

	)

2130 
	#R_PPC64_REL64
 44

	)

2131 
	#R_PPC64_PLT64
 45

	)

2132 
	#R_PPC64_PLTREL64
 46

	)

2133 
	#R_PPC64_TOC16
 47

	)

2134 
	#R_PPC64_TOC16_LO
 48

	)

2135 
	#R_PPC64_TOC16_HI
 49

	)

2136 
	#R_PPC64_TOC16_HA
 50

	)

2137 
	#R_PPC64_TOC
 51

	)

2138 
	#R_PPC64_PLTGOT16
 52

	)

2139 
	#R_PPC64_PLTGOT16_LO
 53

	)

2140 
	#R_PPC64_PLTGOT16_HI
 54

	)

2141 
	#R_PPC64_PLTGOT16_HA
 55

	)

2143 
	#R_PPC64_ADDR16_DS
 56

	)

2144 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2145 
	#R_PPC64_GOT16_DS
 58

	)

2146 
	#R_PPC64_GOT16_LO_DS
 59

	)

2147 
	#R_PPC64_PLT16_LO_DS
 60

	)

2148 
	#R_PPC64_SECTOFF_DS
 61

	)

2149 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2150 
	#R_PPC64_TOC16_DS
 63

	)

2151 
	#R_PPC64_TOC16_LO_DS
 64

	)

2152 
	#R_PPC64_PLTGOT16_DS
 65

	)

2153 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2156 
	#R_PPC64_TLS
 67

	)

2157 
	#R_PPC64_DTPMOD64
 68

	)

2158 
	#R_PPC64_TPREL16
 69

	)

2159 
	#R_PPC64_TPREL16_LO
 70

	)

2160 
	#R_PPC64_TPREL16_HI
 71

	)

2161 
	#R_PPC64_TPREL16_HA
 72

	)

2162 
	#R_PPC64_TPREL64
 73

	)

2163 
	#R_PPC64_DTPREL16
 74

	)

2164 
	#R_PPC64_DTPREL16_LO
 75

	)

2165 
	#R_PPC64_DTPREL16_HI
 76

	)

2166 
	#R_PPC64_DTPREL16_HA
 77

	)

2167 
	#R_PPC64_DTPREL64
 78

	)

2168 
	#R_PPC64_GOT_TLSGD16
 79

	)

2169 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2170 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2171 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2172 
	#R_PPC64_GOT_TLSLD16
 83

	)

2173 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2174 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2175 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2176 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2177 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2178 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2179 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2180 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2181 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2182 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2183 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2184 
	#R_PPC64_TPREL16_DS
 95

	)

2185 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2186 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2187 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2188 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2189 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2190 
	#R_PPC64_DTPREL16_DS
 101

	)

2191 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2192 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2193 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2194 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2195 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2196 
	#R_PPC64_TLSGD
 107

	)

2197 
	#R_PPC64_TLSLD
 108

	)

2198 
	#R_PPC64_TOCSAVE
 109

	)

2201 
	#R_PPC64_ADDR16_HIGH
 110

	)

2202 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2203 
	#R_PPC64_TPREL16_HIGH
 112

	)

2204 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2205 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2206 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2209 
	#R_PPC64_JMP_IREL
 247

	)

2210 
	#R_PPC64_IRELATIVE
 248

	)

2211 
	#R_PPC64_REL16
 249

	)

2212 
	#R_PPC64_REL16_LO
 250

	)

2213 
	#R_PPC64_REL16_HI
 251

	)

2214 
	#R_PPC64_REL16_HA
 252

	)

2220 
	#EF_PPC64_ABI
 3

	)

2223 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2224 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2225 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2226 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2227 
	#DT_PPC64_NUM
 3

	)

2230 
	#PPC64_OPT_TLS
 1

	)

2231 
	#PPC64_OPT_MULTI_TOC
 2

	)

2234 
	#STO_PPC64_LOCAL_BIT
 5

	)

2235 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2236 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2237 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2243 
	#EF_ARM_RELEXEC
 0x01

	)

2244 
	#EF_ARM_HASENTRY
 0x02

	)

2245 
	#EF_ARM_INTERWORK
 0x04

	)

2246 
	#EF_ARM_APCS_26
 0x08

	)

2247 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2248 
	#EF_ARM_PIC
 0x20

	)

2249 
	#EF_ARM_ALIGN8
 0x40

	)

2250 
	#EF_ARM_NEW_ABI
 0x80

	)

2251 
	#EF_ARM_OLD_ABI
 0x100

	)

2252 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2253 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2254 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2256 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2257 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2262 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2263 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2264 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2265 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2268 
	#EF_ARM_BE8
 0x00800000

	)

2269 
	#EF_ARM_LE8
 0x00400000

	)

2271 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2272 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2273 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2274 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2275 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2276 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2277 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2280 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2281 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2284 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2285 
	#SHF_ARM_COMDEF
 0x80000000

	)

2289 
	#PF_ARM_SB
 0x10000000

	)

2291 
	#PF_ARM_PI
 0x20000000

	)

2292 
	#PF_ARM_ABS
 0x40000000

	)

2295 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2298 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2299 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2300 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2305 
	#R_AARCH64_NONE
 0

	)

2306 
	#R_AARCH64_ABS64
 257

	)

2307 
	#R_AARCH64_ABS32
 258

	)

2308 
	#R_AARCH64_ABS16
 259

	)

2309 
	#R_AARCH64_PREL64
 260

	)

2310 
	#R_AARCH64_PREL32
 261

	)

2311 
	#R_AARCH64_PREL16
 262

	)

2312 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2313 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2314 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2315 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2316 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2317 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2318 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2319 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2320 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2321 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2322 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2323 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2324 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2325 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2326 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2327 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2328 
	#R_AARCH64_TSTBR14
 279

	)

2329 
	#R_AARCH64_CONDBR19
 280

	)

2330 
	#R_AARCH64_JUMP26
 282

	)

2331 
	#R_AARCH64_CALL26
 283

	)

2332 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2333 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2334 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2335 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2336 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2337 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2338 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2339 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2340 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2341 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2342 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2343 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2344 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2345 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2346 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2347 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2348 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2349 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2350 
	#R_AARCH64_GOTREL64
 307

	)

2351 
	#R_AARCH64_GOTREL32
 308

	)

2352 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2353 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2354 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2355 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2356 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2357 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2358 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2359 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2360 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2361 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2362 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2363 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2364 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2365 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2366 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2367 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2368 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2369 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2370 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2371 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2372 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2373 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2374 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2375 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2376 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2377 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2378 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2379 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2380 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2381 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2382 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2383 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2384 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2385 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2386 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2387 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2388 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2389 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2390 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2391 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2392 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2393 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2394 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2395 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2396 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2397 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2398 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2399 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2400 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2401 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2402 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2403 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2404 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2405 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2406 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2407 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2408 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2409 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2410 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2411 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2412 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2413 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2414 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2415 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2416 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2417 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2418 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2419 
	#R_AARCH64_COPY
 1024

	)

2420 
	#R_AARCH64_GLOB_DAT
 1025

	)

2421 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2422 
	#R_AARCH64_RELATIVE
 1027

	)

2423 
	#R_AARCH64_TLS_DTPMOD64
 1028

	)

2424 
	#R_AARCH64_TLS_DTPREL64
 1029

	)

2425 
	#R_AARCH64_TLS_TPREL64
 1030

	)

2426 
	#R_AARCH64_TLSDESC
 1031

	)

2427 
	#R_AARCH64_IRELATIVE
 1032

	)

2431 
	#R_ARM_NONE
 0

	)

2432 
	#R_ARM_PC24
 1

	)

2434 
	#R_ARM_ABS32
 2

	)

2435 
	#R_ARM_REL32
 3

	)

2436 
	#R_ARM_PC13
 4

	)

2437 
	#R_ARM_ABS16
 5

	)

2438 
	#R_ARM_ABS12
 6

	)

2439 
	#R_ARM_THM_ABS5
 7

	)

2440 
	#R_ARM_ABS8
 8

	)

2441 
	#R_ARM_SBREL32
 9

	)

2442 
	#R_ARM_THM_PC22
 10

	)

2443 
	#R_ARM_THM_PC8
 11

	)

2445 
	#R_ARM_AMP_VCALL9
 12

	)

2446 
	#R_ARM_SWI24
 13

	)

2447 
	#R_ARM_TLS_DESC
 13

	)

2448 
	#R_ARM_THM_SWI8
 14

	)

2449 
	#R_ARM_XPC25
 15

	)

2450 
	#R_ARM_THM_XPC22
 16

	)

2451 
	#R_ARM_TLS_DTPMOD32
 17

	)

2452 
	#R_ARM_TLS_DTPOFF32
 18

	)

2453 
	#R_ARM_TLS_TPOFF32
 19

	)

2454 
	#R_ARM_COPY
 20

	)

2455 
	#R_ARM_GLOB_DAT
 21

	)

2456 
	#R_ARM_JUMP_SLOT
 22

	)

2457 
	#R_ARM_RELATIVE
 23

	)

2458 
	#R_ARM_GOTOFF
 24

	)

2459 
	#R_ARM_GOTPC
 25

	)

2460 
	#R_ARM_GOT32
 26

	)

2461 
	#R_ARM_PLT32
 27

	)

2462 
	#R_ARM_CALL
 28

	)

2463 
	#R_ARM_JUMP24
 29

	)

2465 
	#R_ARM_THM_JUMP24
 30

	)

2466 
	#R_ARM_BASE_ABS
 31

	)

2467 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2468 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2469 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2470 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2471 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2472 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2473 
	#R_ARM_TARGET1
 38

	)

2474 
	#R_ARM_SBREL31
 39

	)

2475 
	#R_ARM_V4BX
 40

	)

2476 
	#R_ARM_TARGET2
 41

	)

2477 
	#R_ARM_PREL31
 42

	)

2478 
	#R_ARM_MOVW_ABS_NC
 43

	)

2479 
	#R_ARM_MOVT_ABS
 44

	)

2480 
	#R_ARM_MOVW_PREL_NC
 45

	)

2481 
	#R_ARM_MOVT_PREL
 46

	)

2482 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2483 
	#R_ARM_THM_MOVT_ABS
 48

	)

2485 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2487 
	#R_ARM_THM_MOVT_PREL
 50

	)

2489 
	#R_ARM_THM_JUMP19
 51

	)

2491 
	#R_ARM_THM_JUMP6
 52

	)

2493 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2495 
	#R_ARM_THM_PC12
 54

	)

2497 
	#R_ARM_ABS32_NOI
 55

	)

2498 
	#R_ARM_REL32_NOI
 56

	)

2499 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2500 
	#R_ARM_ALU_PC_G0
 58

	)

2501 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2502 
	#R_ARM_ALU_PC_G1
 60

	)

2503 
	#R_ARM_ALU_PC_G2
 61

	)

2504 
	#R_ARM_LDR_PC_G1
 62

	)

2505 
	#R_ARM_LDR_PC_G2
 63

	)

2506 
	#R_ARM_LDRS_PC_G0
 64

	)

2508 
	#R_ARM_LDRS_PC_G1
 65

	)

2510 
	#R_ARM_LDRS_PC_G2
 66

	)

2512 
	#R_ARM_LDC_PC_G0
 67

	)

2513 
	#R_ARM_LDC_PC_G1
 68

	)

2514 
	#R_ARM_LDC_PC_G2
 69

	)

2515 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2516 
	#R_ARM_ALU_SB_G0
 71

	)

2517 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2518 
	#R_ARM_ALU_SB_G1
 73

	)

2519 
	#R_ARM_ALU_SB_G2
 74

	)

2520 
	#R_ARM_LDR_SB_G0
 75

	)

2522 
	#R_ARM_LDR_SB_G1
 76

	)

2524 
	#R_ARM_LDR_SB_G2
 77

	)

2526 
	#R_ARM_LDRS_SB_G0
 78

	)

2528 
	#R_ARM_LDRS_SB_G1
 79

	)

2530 
	#R_ARM_LDRS_SB_G2
 80

	)

2532 
	#R_ARM_LDC_SB_G0
 81

	)

2533 
	#R_ARM_LDC_SB_G1
 82

	)

2534 
	#R_ARM_LDC_SB_G2
 83

	)

2535 
	#R_ARM_MOVW_BREL_NC
 84

	)

2537 
	#R_ARM_MOVT_BREL
 85

	)

2539 
	#R_ARM_MOVW_BREL
 86

	)

2541 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2543 
	#R_ARM_THM_MOVT_BREL
 88

	)

2545 
	#R_ARM_THM_MOVW_BREL
 89

	)

2547 
	#R_ARM_TLS_GOTDESC
 90

	)

2548 
	#R_ARM_TLS_CALL
 91

	)

2549 
	#R_ARM_TLS_DESCSEQ
 92

	)

2550 
	#R_ARM_THM_TLS_CALL
 93

	)

2551 
	#R_ARM_PLT32_ABS
 94

	)

2552 
	#R_ARM_GOT_ABS
 95

	)

2553 
	#R_ARM_GOT_PREL
 96

	)

2554 
	#R_ARM_GOT_BREL12
 97

	)

2556 
	#R_ARM_GOTOFF12
 98

	)

2558 
	#R_ARM_GOTRELAX
 99

	)

2559 
	#R_ARM_GNU_VTENTRY
 100

	)

2560 
	#R_ARM_GNU_VTINHERIT
 101

	)

2561 
	#R_ARM_THM_PC11
 102

	)

2562 
	#R_ARM_THM_PC9
 103

	)

2564 
	#R_ARM_TLS_GD32
 104

	)

2566 
	#R_ARM_TLS_LDM32
 105

	)

2568 
	#R_ARM_TLS_LDO32
 106

	)

2570 
	#R_ARM_TLS_IE32
 107

	)

2572 
	#R_ARM_TLS_LE32
 108

	)

2574 
	#R_ARM_TLS_LDO12
 109

	)

2576 
	#R_ARM_TLS_LE12
 110

	)

2578 
	#R_ARM_TLS_IE12GP
 111

	)

2580 
	#R_ARM_ME_TOO
 128

	)

2581 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2582 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2583 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2584 
	#R_ARM_THM_GOT_BREL12
 131

	)

2586 
	#R_ARM_IRELATIVE
 160

	)

2587 
	#R_ARM_RXPC25
 249

	)

2588 
	#R_ARM_RSBREL32
 250

	)

2589 
	#R_ARM_THM_RPC22
 251

	)

2590 
	#R_ARM_RREL32
 252

	)

2591 
	#R_ARM_RABS22
 253

	)

2592 
	#R_ARM_RPC24
 254

	)

2593 
	#R_ARM_RBASE
 255

	)

2595 
	#R_ARM_NUM
 256

	)

2600 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2601 
	#EF_IA_64_ABI64
 0x00000010

	)

2602 
	#EF_IA_64_ARCH
 0xff000000

	)

2605 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2606 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2607 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2608 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2609 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2612 
	#PF_IA_64_NORECOV
 0x80000000

	)

2615 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2616 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2619 
	#SHF_IA_64_SHORT
 0x10000000

	)

2620 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2623 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2624 
	#DT_IA_64_NUM
 1

	)

2627 
	#R_IA64_NONE
 0x00

	)

2628 
	#R_IA64_IMM14
 0x21

	)

2629 
	#R_IA64_IMM22
 0x22

	)

2630 
	#R_IA64_IMM64
 0x23

	)

2631 
	#R_IA64_DIR32MSB
 0x24

	)

2632 
	#R_IA64_DIR32LSB
 0x25

	)

2633 
	#R_IA64_DIR64MSB
 0x26

	)

2634 
	#R_IA64_DIR64LSB
 0x27

	)

2635 
	#R_IA64_GPREL22
 0x2®

	)

2636 
	#R_IA64_GPREL64I
 0x2b

	)

2637 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2638 
	#R_IA64_GPREL32LSB
 0x2d

	)

2639 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2640 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2641 
	#R_IA64_LTOFF22
 0x32

	)

2642 
	#R_IA64_LTOFF64I
 0x33

	)

2643 
	#R_IA64_PLTOFF22
 0x3®

	)

2644 
	#R_IA64_PLTOFF64I
 0x3b

	)

2645 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2646 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2647 
	#R_IA64_FPTR64I
 0x43

	)

2648 
	#R_IA64_FPTR32MSB
 0x44

	)

2649 
	#R_IA64_FPTR32LSB
 0x45

	)

2650 
	#R_IA64_FPTR64MSB
 0x46

	)

2651 
	#R_IA64_FPTR64LSB
 0x47

	)

2652 
	#R_IA64_PCREL60B
 0x48

	)

2653 
	#R_IA64_PCREL21B
 0x49

	)

2654 
	#R_IA64_PCREL21M
 0x4®

	)

2655 
	#R_IA64_PCREL21F
 0x4b

	)

2656 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2657 
	#R_IA64_PCREL32LSB
 0x4d

	)

2658 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2659 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2660 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2661 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2662 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2663 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2664 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2665 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2666 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2667 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2668 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2669 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2670 
	#R_IA64_SECREL32MSB
 0x64

	)

2671 
	#R_IA64_SECREL32LSB
 0x65

	)

2672 
	#R_IA64_SECREL64MSB
 0x66

	)

2673 
	#R_IA64_SECREL64LSB
 0x67

	)

2674 
	#R_IA64_REL32MSB
 0x6¯

	)

2675 
	#R_IA64_REL32LSB
 0x6d

	)

2676 
	#R_IA64_REL64MSB
 0x6ê

	)

2677 
	#R_IA64_REL64LSB
 0x6‡

	)

2678 
	#R_IA64_LTV32MSB
 0x74

	)

2679 
	#R_IA64_LTV32LSB
 0x75

	)

2680 
	#R_IA64_LTV64MSB
 0x76

	)

2681 
	#R_IA64_LTV64LSB
 0x77

	)

2682 
	#R_IA64_PCREL21BI
 0x79

	)

2683 
	#R_IA64_PCREL22
 0x7®

	)

2684 
	#R_IA64_PCREL64I
 0x7b

	)

2685 
	#R_IA64_IPLTMSB
 0x80

	)

2686 
	#R_IA64_IPLTLSB
 0x81

	)

2687 
	#R_IA64_COPY
 0x84

	)

2688 
	#R_IA64_SUB
 0x85

	)

2689 
	#R_IA64_LTOFF22X
 0x86

	)

2690 
	#R_IA64_LDXMOV
 0x87

	)

2691 
	#R_IA64_TPREL14
 0x91

	)

2692 
	#R_IA64_TPREL22
 0x92

	)

2693 
	#R_IA64_TPREL64I
 0x93

	)

2694 
	#R_IA64_TPREL64MSB
 0x96

	)

2695 
	#R_IA64_TPREL64LSB
 0x97

	)

2696 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2697 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2698 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2699 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2700 
	#R_IA64_DTPREL14
 0xb1

	)

2701 
	#R_IA64_DTPREL22
 0xb2

	)

2702 
	#R_IA64_DTPREL64I
 0xb3

	)

2703 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2704 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2705 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2706 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2707 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2712 
	#EF_SH_MACH_MASK
 0x1f

	)

2713 
	#EF_SH_UNKNOWN
 0x0

	)

2714 
	#EF_SH1
 0x1

	)

2715 
	#EF_SH2
 0x2

	)

2716 
	#EF_SH3
 0x3

	)

2717 
	#EF_SH_DSP
 0x4

	)

2718 
	#EF_SH3_DSP
 0x5

	)

2719 
	#EF_SH4AL_DSP
 0x6

	)

2720 
	#EF_SH3E
 0x8

	)

2721 
	#EF_SH4
 0x9

	)

2722 
	#EF_SH2E
 0xb

	)

2723 
	#EF_SH4A
 0xc

	)

2724 
	#EF_SH2A
 0xd

	)

2725 
	#EF_SH4_NOFPU
 0x10

	)

2726 
	#EF_SH4A_NOFPU
 0x11

	)

2727 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2728 
	#EF_SH2A_NOFPU
 0x13

	)

2729 
	#EF_SH3_NOMMU
 0x14

	)

2730 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2731 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2732 
	#EF_SH2A_SH4
 0x17

	)

2733 
	#EF_SH2A_SH3E
 0x18

	)

2736 
	#R_SH_NONE
 0

	)

2737 
	#R_SH_DIR32
 1

	)

2738 
	#R_SH_REL32
 2

	)

2739 
	#R_SH_DIR8WPN
 3

	)

2740 
	#R_SH_IND12W
 4

	)

2741 
	#R_SH_DIR8WPL
 5

	)

2742 
	#R_SH_DIR8WPZ
 6

	)

2743 
	#R_SH_DIR8BP
 7

	)

2744 
	#R_SH_DIR8W
 8

	)

2745 
	#R_SH_DIR8L
 9

	)

2746 
	#R_SH_SWITCH16
 25

	)

2747 
	#R_SH_SWITCH32
 26

	)

2748 
	#R_SH_USES
 27

	)

2749 
	#R_SH_COUNT
 28

	)

2750 
	#R_SH_ALIGN
 29

	)

2751 
	#R_SH_CODE
 30

	)

2752 
	#R_SH_DATA
 31

	)

2753 
	#R_SH_LABEL
 32

	)

2754 
	#R_SH_SWITCH8
 33

	)

2755 
	#R_SH_GNU_VTINHERIT
 34

	)

2756 
	#R_SH_GNU_VTENTRY
 35

	)

2757 
	#R_SH_TLS_GD_32
 144

	)

2758 
	#R_SH_TLS_LD_32
 145

	)

2759 
	#R_SH_TLS_LDO_32
 146

	)

2760 
	#R_SH_TLS_IE_32
 147

	)

2761 
	#R_SH_TLS_LE_32
 148

	)

2762 
	#R_SH_TLS_DTPMOD32
 149

	)

2763 
	#R_SH_TLS_DTPOFF32
 150

	)

2764 
	#R_SH_TLS_TPOFF32
 151

	)

2765 
	#R_SH_GOT32
 160

	)

2766 
	#R_SH_PLT32
 161

	)

2767 
	#R_SH_COPY
 162

	)

2768 
	#R_SH_GLOB_DAT
 163

	)

2769 
	#R_SH_JMP_SLOT
 164

	)

2770 
	#R_SH_RELATIVE
 165

	)

2771 
	#R_SH_GOTOFF
 166

	)

2772 
	#R_SH_GOTPC
 167

	)

2774 
	#R_SH_NUM
 256

	)

2780 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2784 
	#R_390_NONE
 0

	)

2785 
	#R_390_8
 1

	)

2786 
	#R_390_12
 2

	)

2787 
	#R_390_16
 3

	)

2788 
	#R_390_32
 4

	)

2789 
	#R_390_PC32
 5

	)

2790 
	#R_390_GOT12
 6

	)

2791 
	#R_390_GOT32
 7

	)

2792 
	#R_390_PLT32
 8

	)

2793 
	#R_390_COPY
 9

	)

2794 
	#R_390_GLOB_DAT
 10

	)

2795 
	#R_390_JMP_SLOT
 11

	)

2796 
	#R_390_RELATIVE
 12

	)

2797 
	#R_390_GOTOFF32
 13

	)

2798 
	#R_390_GOTPC
 14

	)

2799 
	#R_390_GOT16
 15

	)

2800 
	#R_390_PC16
 16

	)

2801 
	#R_390_PC16DBL
 17

	)

2802 
	#R_390_PLT16DBL
 18

	)

2803 
	#R_390_PC32DBL
 19

	)

2804 
	#R_390_PLT32DBL
 20

	)

2805 
	#R_390_GOTPCDBL
 21

	)

2806 
	#R_390_64
 22

	)

2807 
	#R_390_PC64
 23

	)

2808 
	#R_390_GOT64
 24

	)

2809 
	#R_390_PLT64
 25

	)

2810 
	#R_390_GOTENT
 26

	)

2811 
	#R_390_GOTOFF16
 27

	)

2812 
	#R_390_GOTOFF64
 28

	)

2813 
	#R_390_GOTPLT12
 29

	)

2814 
	#R_390_GOTPLT16
 30

	)

2815 
	#R_390_GOTPLT32
 31

	)

2816 
	#R_390_GOTPLT64
 32

	)

2817 
	#R_390_GOTPLTENT
 33

	)

2818 
	#R_390_PLTOFF16
 34

	)

2819 
	#R_390_PLTOFF32
 35

	)

2820 
	#R_390_PLTOFF64
 36

	)

2821 
	#R_390_TLS_LOAD
 37

	)

2822 
	#R_390_TLS_GDCALL
 38

	)

2824 
	#R_390_TLS_LDCALL
 39

	)

2826 
	#R_390_TLS_GD32
 40

	)

2828 
	#R_390_TLS_GD64
 41

	)

2830 
	#R_390_TLS_GOTIE12
 42

	)

2832 
	#R_390_TLS_GOTIE32
 43

	)

2834 
	#R_390_TLS_GOTIE64
 44

	)

2836 
	#R_390_TLS_LDM32
 45

	)

2838 
	#R_390_TLS_LDM64
 46

	)

2840 
	#R_390_TLS_IE32
 47

	)

2842 
	#R_390_TLS_IE64
 48

	)

2844 
	#R_390_TLS_IEENT
 49

	)

2846 
	#R_390_TLS_LE32
 50

	)

2848 
	#R_390_TLS_LE64
 51

	)

2850 
	#R_390_TLS_LDO32
 52

	)

2852 
	#R_390_TLS_LDO64
 53

	)

2854 
	#R_390_TLS_DTPMOD
 54

	)

2855 
	#R_390_TLS_DTPOFF
 55

	)

2856 
	#R_390_TLS_TPOFF
 56

	)

2858 
	#R_390_20
 57

	)

2859 
	#R_390_GOT20
 58

	)

2860 
	#R_390_GOTPLT20
 59

	)

2861 
	#R_390_TLS_GOTIE20
 60

	)

2863 
	#R_390_IRELATIVE
 61

	)

2865 
	#R_390_NUM
 62

	)

2869 
	#R_CRIS_NONE
 0

	)

2870 
	#R_CRIS_8
 1

	)

2871 
	#R_CRIS_16
 2

	)

2872 
	#R_CRIS_32
 3

	)

2873 
	#R_CRIS_8_PCREL
 4

	)

2874 
	#R_CRIS_16_PCREL
 5

	)

2875 
	#R_CRIS_32_PCREL
 6

	)

2876 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2877 
	#R_CRIS_GNU_VTENTRY
 8

	)

2878 
	#R_CRIS_COPY
 9

	)

2879 
	#R_CRIS_GLOB_DAT
 10

	)

2880 
	#R_CRIS_JUMP_SLOT
 11

	)

2881 
	#R_CRIS_RELATIVE
 12

	)

2882 
	#R_CRIS_16_GOT
 13

	)

2883 
	#R_CRIS_32_GOT
 14

	)

2884 
	#R_CRIS_16_GOTPLT
 15

	)

2885 
	#R_CRIS_32_GOTPLT
 16

	)

2886 
	#R_CRIS_32_GOTREL
 17

	)

2887 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2888 
	#R_CRIS_32_PLT_PCREL
 19

	)

2890 
	#R_CRIS_NUM
 20

	)

2894 
	#R_X86_64_NONE
 0

	)

2895 
	#R_X86_64_64
 1

	)

2896 
	#R_X86_64_PC32
 2

	)

2897 
	#R_X86_64_GOT32
 3

	)

2898 
	#R_X86_64_PLT32
 4

	)

2899 
	#R_X86_64_COPY
 5

	)

2900 
	#R_X86_64_GLOB_DAT
 6

	)

2901 
	#R_X86_64_JUMP_SLOT
 7

	)

2902 
	#R_X86_64_RELATIVE
 8

	)

2903 
	#R_X86_64_GOTPCREL
 9

	)

2905 
	#R_X86_64_32
 10

	)

2906 
	#R_X86_64_32S
 11

	)

2907 
	#R_X86_64_16
 12

	)

2908 
	#R_X86_64_PC16
 13

	)

2909 
	#R_X86_64_8
 14

	)

2910 
	#R_X86_64_PC8
 15

	)

2911 
	#R_X86_64_DTPMOD64
 16

	)

2912 
	#R_X86_64_DTPOFF64
 17

	)

2913 
	#R_X86_64_TPOFF64
 18

	)

2914 
	#R_X86_64_TLSGD
 19

	)

2916 
	#R_X86_64_TLSLD
 20

	)

2918 
	#R_X86_64_DTPOFF32
 21

	)

2919 
	#R_X86_64_GOTTPOFF
 22

	)

2921 
	#R_X86_64_TPOFF32
 23

	)

2922 
	#R_X86_64_PC64
 24

	)

2923 
	#R_X86_64_GOTOFF64
 25

	)

2924 
	#R_X86_64_GOTPC32
 26

	)

2926 
	#R_X86_64_GOT64
 27

	)

2927 
	#R_X86_64_GOTPCREL64
 28

	)

2929 
	#R_X86_64_GOTPC64
 29

	)

2930 
	#R_X86_64_GOTPLT64
 30

	)

2931 
	#R_X86_64_PLTOFF64
 31

	)

2933 
	#R_X86_64_SIZE32
 32

	)

2934 
	#R_X86_64_SIZE64
 33

	)

2935 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2936 
	#R_X86_64_TLSDESC_CALL
 35

	)

2938 
	#R_X86_64_TLSDESC
 36

	)

2939 
	#R_X86_64_IRELATIVE
 37

	)

2940 
	#R_X86_64_RELATIVE64
 38

	)

2942 
	#R_X86_64_NUM
 39

	)

2946 
	#R_MN10300_NONE
 0

	)

2947 
	#R_MN10300_32
 1

	)

2948 
	#R_MN10300_16
 2

	)

2949 
	#R_MN10300_8
 3

	)

2950 
	#R_MN10300_PCREL32
 4

	)

2951 
	#R_MN10300_PCREL16
 5

	)

2952 
	#R_MN10300_PCREL8
 6

	)

2953 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2954 
	#R_MN10300_GNU_VTENTRY
 8

	)

2955 
	#R_MN10300_24
 9

	)

2956 
	#R_MN10300_GOTPC32
 10

	)

2957 
	#R_MN10300_GOTPC16
 11

	)

2958 
	#R_MN10300_GOTOFF32
 12

	)

2959 
	#R_MN10300_GOTOFF24
 13

	)

2960 
	#R_MN10300_GOTOFF16
 14

	)

2961 
	#R_MN10300_PLT32
 15

	)

2962 
	#R_MN10300_PLT16
 16

	)

2963 
	#R_MN10300_GOT32
 17

	)

2964 
	#R_MN10300_GOT24
 18

	)

2965 
	#R_MN10300_GOT16
 19

	)

2966 
	#R_MN10300_COPY
 20

	)

2967 
	#R_MN10300_GLOB_DAT
 21

	)

2968 
	#R_MN10300_JMP_SLOT
 22

	)

2969 
	#R_MN10300_RELATIVE
 23

	)

2970 
	#R_MN10300_TLS_GD
 24

	)

2971 
	#R_MN10300_TLS_LD
 25

	)

2972 
	#R_MN10300_TLS_LDO
 26

	)

2973 
	#R_MN10300_TLS_GOTIE
 27

	)

2975 
	#R_MN10300_TLS_IE
 28

	)

2977 
	#R_MN10300_TLS_LE
 29

	)

2979 
	#R_MN10300_TLS_DTPMOD
 30

	)

2980 
	#R_MN10300_TLS_DTPOFF
 31

	)

2981 
	#R_MN10300_TLS_TPOFF
 32

	)

2982 
	#R_MN10300_SYM_DIFF
 33

	)

2984 
	#R_MN10300_ALIGN
 34

	)

2986 
	#R_MN10300_NUM
 35

	)

2990 
	#R_M32R_NONE
 0

	)

2991 
	#R_M32R_16
 1

	)

2992 
	#R_M32R_32
 2

	)

2993 
	#R_M32R_24
 3

	)

2994 
	#R_M32R_10_PCREL
 4

	)

2995 
	#R_M32R_18_PCREL
 5

	)

2996 
	#R_M32R_26_PCREL
 6

	)

2997 
	#R_M32R_HI16_ULO
 7

	)

2998 
	#R_M32R_HI16_SLO
 8

	)

2999 
	#R_M32R_LO16
 9

	)

3000 
	#R_M32R_SDA16
 10

	)

3001 
	#R_M32R_GNU_VTINHERIT
 11

	)

3002 
	#R_M32R_GNU_VTENTRY
 12

	)

3004 
	#R_M32R_16_RELA
 33

	)

3005 
	#R_M32R_32_RELA
 34

	)

3006 
	#R_M32R_24_RELA
 35

	)

3007 
	#R_M32R_10_PCREL_RELA
 36

	)

3008 
	#R_M32R_18_PCREL_RELA
 37

	)

3009 
	#R_M32R_26_PCREL_RELA
 38

	)

3010 
	#R_M32R_HI16_ULO_RELA
 39

	)

3011 
	#R_M32R_HI16_SLO_RELA
 40

	)

3012 
	#R_M32R_LO16_RELA
 41

	)

3013 
	#R_M32R_SDA16_RELA
 42

	)

3014 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3015 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3016 
	#R_M32R_REL32
 45

	)

3018 
	#R_M32R_GOT24
 48

	)

3019 
	#R_M32R_26_PLTREL
 49

	)

3020 
	#R_M32R_COPY
 50

	)

3021 
	#R_M32R_GLOB_DAT
 51

	)

3022 
	#R_M32R_JMP_SLOT
 52

	)

3023 
	#R_M32R_RELATIVE
 53

	)

3024 
	#R_M32R_GOTOFF
 54

	)

3025 
	#R_M32R_GOTPC24
 55

	)

3026 
	#R_M32R_GOT16_HI_ULO
 56

	)

3028 
	#R_M32R_GOT16_HI_SLO
 57

	)

3030 
	#R_M32R_GOT16_LO
 58

	)

3031 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3033 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3035 
	#R_M32R_GOTPC_LO
 61

	)

3037 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3039 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3041 
	#R_M32R_GOTOFF_LO
 64

	)

3042 
	#R_M32R_NUM
 256

	)

3045 
	#R_MICROBLAZE_NONE
 0

	)

3046 
	#R_MICROBLAZE_32
 1

	)

3047 
	#R_MICROBLAZE_32_PCREL
 2

	)

3048 
	#R_MICROBLAZE_64_PCREL
 3

	)

3049 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3050 
	#R_MICROBLAZE_64
 5

	)

3051 
	#R_MICROBLAZE_32_LO
 6

	)

3052 
	#R_MICROBLAZE_SRO32
 7

	)

3053 
	#R_MICROBLAZE_SRW32
 8

	)

3054 
	#R_MICROBLAZE_64_NONE
 9

	)

3055 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3056 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3057 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3058 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3059 
	#R_MICROBLAZE_GOT_64
 14

	)

3060 
	#R_MICROBLAZE_PLT_64
 15

	)

3061 
	#R_MICROBLAZE_REL
 16

	)

3062 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3063 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3064 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3065 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3066 
	#R_MICROBLAZE_COPY
 21

	)

3067 
	#R_MICROBLAZE_TLS
 22

	)

3068 
	#R_MICROBLAZE_TLSGD
 23

	)

3069 
	#R_MICROBLAZE_TLSLD
 24

	)

3070 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3071 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3072 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3073 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3074 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3077 
	#R_TILEPRO_NONE
 0

	)

3078 
	#R_TILEPRO_32
 1

	)

3079 
	#R_TILEPRO_16
 2

	)

3080 
	#R_TILEPRO_8
 3

	)

3081 
	#R_TILEPRO_32_PCREL
 4

	)

3082 
	#R_TILEPRO_16_PCREL
 5

	)

3083 
	#R_TILEPRO_8_PCREL
 6

	)

3084 
	#R_TILEPRO_LO16
 7

	)

3085 
	#R_TILEPRO_HI16
 8

	)

3086 
	#R_TILEPRO_HA16
 9

	)

3087 
	#R_TILEPRO_COPY
 10

	)

3088 
	#R_TILEPRO_GLOB_DAT
 11

	)

3089 
	#R_TILEPRO_JMP_SLOT
 12

	)

3090 
	#R_TILEPRO_RELATIVE
 13

	)

3091 
	#R_TILEPRO_BROFF_X1
 14

	)

3092 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3093 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3094 
	#R_TILEPRO_IMM8_X0
 17

	)

3095 
	#R_TILEPRO_IMM8_Y0
 18

	)

3096 
	#R_TILEPRO_IMM8_X1
 19

	)

3097 
	#R_TILEPRO_IMM8_Y1
 20

	)

3098 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3099 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3100 
	#R_TILEPRO_IMM16_X0
 23

	)

3101 
	#R_TILEPRO_IMM16_X1
 24

	)

3102 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3103 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3104 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3105 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3106 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3107 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3108 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3109 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3110 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3111 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3112 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3113 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3114 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3115 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3116 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3117 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3118 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3119 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3120 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3121 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3122 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3123 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3124 
	#R_TILEPRO_MMSTART_X0
 47

	)

3125 
	#R_TILEPRO_MMEND_X0
 48

	)

3126 
	#R_TILEPRO_MMSTART_X1
 49

	)

3127 
	#R_TILEPRO_MMEND_X1
 50

	)

3128 
	#R_TILEPRO_SHAMT_X0
 51

	)

3129 
	#R_TILEPRO_SHAMT_X1
 52

	)

3130 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3131 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3132 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3134 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3135 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3136 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3137 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3138 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3139 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3140 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3141 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3142 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3143 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3144 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3145 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3146 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3147 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3148 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3149 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3150 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3151 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3152 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3153 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3154 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3155 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3156 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3157 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3158 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3159 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3160 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3161 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3162 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3163 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3164 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3165 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3166 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3168 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3169 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3171 
	#R_TILEPRO_NUM
 130

	)

3175 
	#R_TILEGX_NONE
 0

	)

3176 
	#R_TILEGX_64
 1

	)

3177 
	#R_TILEGX_32
 2

	)

3178 
	#R_TILEGX_16
 3

	)

3179 
	#R_TILEGX_8
 4

	)

3180 
	#R_TILEGX_64_PCREL
 5

	)

3181 
	#R_TILEGX_32_PCREL
 6

	)

3182 
	#R_TILEGX_16_PCREL
 7

	)

3183 
	#R_TILEGX_8_PCREL
 8

	)

3184 
	#R_TILEGX_HW0
 9

	)

3185 
	#R_TILEGX_HW1
 10

	)

3186 
	#R_TILEGX_HW2
 11

	)

3187 
	#R_TILEGX_HW3
 12

	)

3188 
	#R_TILEGX_HW0_LAST
 13

	)

3189 
	#R_TILEGX_HW1_LAST
 14

	)

3190 
	#R_TILEGX_HW2_LAST
 15

	)

3191 
	#R_TILEGX_COPY
 16

	)

3192 
	#R_TILEGX_GLOB_DAT
 17

	)

3193 
	#R_TILEGX_JMP_SLOT
 18

	)

3194 
	#R_TILEGX_RELATIVE
 19

	)

3195 
	#R_TILEGX_BROFF_X1
 20

	)

3196 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3197 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3198 
	#R_TILEGX_IMM8_X0
 23

	)

3199 
	#R_TILEGX_IMM8_Y0
 24

	)

3200 
	#R_TILEGX_IMM8_X1
 25

	)

3201 
	#R_TILEGX_IMM8_Y1
 26

	)

3202 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3203 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3204 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3205 
	#R_TILEGX_MMSTART_X0
 30

	)

3206 
	#R_TILEGX_MMEND_X0
 31

	)

3207 
	#R_TILEGX_SHAMT_X0
 32

	)

3208 
	#R_TILEGX_SHAMT_X1
 33

	)

3209 
	#R_TILEGX_SHAMT_Y0
 34

	)

3210 
	#R_TILEGX_SHAMT_Y1
 35

	)

3211 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3212 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3213 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3214 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3215 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3216 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3217 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3218 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3219 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3220 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3221 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3222 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3223 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3224 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3225 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3226 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3227 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3228 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3229 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3230 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3231 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3232 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3233 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3234 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3235 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3236 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3237 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3238 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3239 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3240 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3241 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3242 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3243 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3244 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3245 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3246 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3247 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3248 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3249 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3250 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3251 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3252 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3253 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3254 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3255 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3256 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3257 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3258 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3259 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3260 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3261 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3262 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3263 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3264 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3266 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3267 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3268 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3269 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3270 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3271 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3272 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3273 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3274 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3275 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3276 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3277 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3279 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3280 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3281 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3282 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3283 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3284 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3285 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3286 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3287 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3288 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3289 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3290 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3291 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3292 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3293 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3294 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3296 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3297 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3299 
	#R_TILEGX_NUM
 130

	)

3302 
	g__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
171
3483
arch/mips/include/asmdefs.h
arch/mips/include/bus.h
arch/mips/include/ktypes.h
arch/mips/include/pcb.h
arch/mips/include/setjmp.h
arch/mips/include/specialreg.h
arch/mips/include/spl.h
arch/mips/include/switchframe.h
arch/mips/include/tlb.h
arch/mips/include/trapframe.h
arch/mips/include/types.h
arch/mips/include/vm.h
arch/mips/mips/cache_mips1.S
arch/mips/mips/exception.S
arch/mips/mips/interrupt.c
arch/mips/mips/lamebus_mips.c
arch/mips/mips/pcb.c
arch/mips/mips/ram.c
arch/mips/mips/spl.c
arch/mips/mips/start.S
arch/mips/mips/switch.S
arch/mips/mips/syscall.c
arch/mips/mips/threadstart.S
arch/mips/mips/tlb_mips1.S
arch/mips/mips/trap.c
asst1/catlock.c
asst1/catsem.c
asst1/stoplight.c
compile/ASST2/autoconf.c
compile/ASST2/autoconf.h
compile/ASST2/opt-dumbvm.h
compile/ASST2/opt-net.h
compile/ASST2/opt-netfs.h
compile/ASST2/opt-sfs.h
compile/ASST2/opt-synchprobs.h
compile/ASST2/vers.c
compile/ASST3/autoconf.c
compile/ASST3/autoconf.h
compile/ASST3/opt-dumbvm.h
compile/ASST3/opt-net.h
compile/ASST3/opt-netfs.h
compile/ASST3/opt-sfs.h
compile/ASST3/opt-synchprobs.h
compile/ASST3/vers.c
dev/generic/beep.c
dev/generic/beep.h
dev/generic/console.c
dev/generic/console.h
dev/generic/pseudorand.c
dev/generic/pseudorand.h
dev/generic/pseudorand_att.c
dev/generic/random.c
dev/generic/random.h
dev/generic/rtclock.c
dev/generic/rtclock.h
dev/init.c
dev/lamebus/beep_ltimer.c
dev/lamebus/con_lscreen.c
dev/lamebus/con_lser.c
dev/lamebus/emu.c
dev/lamebus/emu.h
dev/lamebus/emu_att.c
dev/lamebus/lamebus.c
dev/lamebus/lamebus.h
dev/lamebus/lhd.c
dev/lamebus/lhd.h
dev/lamebus/lhd_att.c
dev/lamebus/lnet.c
dev/lamebus/lnet_att.c
dev/lamebus/lrandom.c
dev/lamebus/lrandom.h
dev/lamebus/lrandom_att.c
dev/lamebus/lscreen.c
dev/lamebus/lscreen.h
dev/lamebus/lscreen_att.c
dev/lamebus/lser.c
dev/lamebus/lser.h
dev/lamebus/lser_att.c
dev/lamebus/ltimer.c
dev/lamebus/ltimer.h
dev/lamebus/ltimer_att.c
dev/lamebus/ltrace.c
dev/lamebus/ltrace.h
dev/lamebus/ltrace_att.c
dev/lamebus/random_lrandom.c
dev/lamebus/rtclock_ltimer.c
fs/sfs/sfs_fs.c
fs/sfs/sfs_io.c
fs/sfs/sfs_vnode.c
fs/vfs/device.c
fs/vfs/devnull.c
fs/vfs/vfscwd.c
fs/vfs/vfslist.c
fs/vfs/vfslookup.c
fs/vfs/vfspath.c
fs/vfs/vnode.c
include/addrspace.h
include/array.h
include/bitmap.h
include/clock.h
include/curthread.h
include/db-helper.h
include/dev.h
include/elf.h
include/emufs.h
include/fs.h
include/kern/callno.h
include/kern/errmsg.h
include/kern/errno.h
include/kern/ioctl.h
include/kern/limits.h
include/kern/sfs.h
include/kern/stat.h
include/kern/types.h
include/kern/unistd.h
include/lib.h
include/process_helper.h
include/queue.h
include/scheduler.h
include/sfs.h
include/stdarg.h
include/synch.h
include/syscall.h
include/test.h
include/thread.h
include/types.h
include/uio.h
include/version.h
include/vfs.h
include/vm.h
include/vm_helper.h
include/vnode.h
lib/array.c
lib/bitmap.c
lib/copyinout.c
lib/kgets.c
lib/kheap.c
lib/kprintf.c
lib/misc.c
lib/ntoh.c
lib/queue.c
main/hello.c
main/main.c
main/menu.c
test/arraytest.c
test/bitmaptest.c
test/fstest.c
test/malloctest.c
test/nettest.c
test/queuetest.c
test/synchtest.c
test/threadtest.c
test/tt3.c
thread/hardclock.c
thread/scheduler.c
thread/synch.c
thread/thread.c
userprog/io_syscall.c
userprog/loadelf.c
userprog/process_helper.c
userprog/runprogram.c
userprog/thread_syscall.c
userprog/uio.c
vm/addrspace.c
vm/vm.c
vm/vm_helper.c
/usr/include/elf.h
/usr/include/syscall.h
/usr/include/features.h
/usr/include/stdint.h
/usr/include/stdc-predef.h
